// WARN: This file is auto generated by cmp_app_xtask
{
    App::new(env!("CARGO_PKG_NAME"))
    .version(env!("CARGO_PKG_VERSION"))
    .opt(Opt::new("abstract-unix-socket", &mut conf.opt_abstract_unix_socket).optional()
        .long("abstract-unix-socket").help("Connect via abstract Unix domain socket"))
    .opt(Opt::new("alt-svc", &mut conf.opt_alt_svc).optional()
        .long("alt-svc").help("Enable alt-svc with this cache file"))
    .opt(Opt::new("anyauth", &mut conf.flg_anyauth).optional()
        .long("anyauth").help("Pick any authentication method"))
    .opt(Opt::new("append", &mut conf.flg_append).optional()
        .short('a').long("append").help("Append to target file when uploading"))
    .opt(Opt::new("basic", &mut conf.flg_basic).optional()
        .long("basic").help("Use HTTP Basic Authentication"))
    .opt(Opt::new("cacert", &mut conf.opt_cacert).optional()
        .long("cacert").help("CA certificate to verify peer against"))
    .opt(Opt::new("capath", &mut conf.opt_capath).optional()
        .long("capath").help("CA directory to verify peer against"))
    .opt(Opt::new("cert", &mut conf.opt_cert).optional()
        .short('E').long("cert").help("Client certificate file and password"))
    .opt(Opt::new("cert-status", &mut conf.flg_cert_status).optional()
        .long("cert-status").help("Verify the status of the server certificate"))
    .opt(Opt::new("cert-type", &mut conf.opt_cert_type).optional()
        .long("cert-type").help("Certificate file type (DER/PEM/ENG)"))
    .opt(Opt::new("ciphers", &mut conf.opt_ciphers).optional()
        .long("ciphers").help("SSL ciphers to use"))
    .opt(Opt::new("compressed", &mut conf.flg_compressed).optional()
        .long("compressed").help("Request compressed response"))
    .opt(Opt::new("compressed-ssh", &mut conf.flg_compressed_ssh).optional()
        .long("compressed-ssh").help("Enable SSH compression"))
    .opt(Opt::new("config", &mut conf.opt_config).optional()
        .short('K').long("config").help("Read config from a file"))
    .opt(Opt::new("connect-timeout", &mut conf.opt_connect_timeout).optional()
        .long("connect-timeout").help("Maximum time allowed for connection"))
    .opt(Opt::new("connect-to", &mut conf.opt_connect_to).optional()
        .long("connect-to").help("Connect to host"))
    .opt(Opt::new("continue-at", &mut conf.opt_continue_at).optional()
        .short('C').long("continue-at").help("Resumed transfer offset"))
    .opt(Opt::new("cookie", &mut conf.opt_cookie).optional()
        .short('b').long("cookie").help("Send cookies from string/file"))
    .opt(Opt::new("cookie-jar", &mut conf.opt_cookie_jar).optional()
        .short('c').long("cookie-jar").help("Write cookies to <filename> after operation"))
    .opt(Opt::new("create-dirs", &mut conf.flg_create_dirs).optional()
        .long("create-dirs").help("Create necessary local directory hierarchy"))
    .opt(Opt::new("crlf", &mut conf.flg_crlf).optional()
        .long("crlf").help("Convert LF to CRLF in upload"))
    .opt(Opt::new("crlfile", &mut conf.opt_crlfile).optional()
        .long("crlfile").help("Get a CRL list in PEM format from the given file"))
    .opt(Opt::new("data", &mut conf.opt_data).optional()
        .short('d').long("data").help("HTTP POST data"))
    .opt(Opt::new("data-ascii", &mut conf.opt_data_ascii).optional()
        .long("data-ascii").help("HTTP POST ASCII data"))
    .opt(Opt::new("data-binary", &mut conf.opt_data_binary).optional()
        .long("data-binary").help("HTTP POST binary data"))
    .opt(Opt::new("data-raw", &mut conf.opt_data_raw).optional()
        .long("data-raw").help("HTTP POST data  '@' allowed"))
    .opt(Opt::new("data-urlencode", &mut conf.opt_data_urlencode).optional()
        .long("data-urlencode").help("HTTP POST data url encoded"))
    .opt(Opt::new("delegation", &mut conf.opt_delegation).optional()
        .long("delegation").help("GSS-API delegation permission"))
    .opt(Opt::new("digest", &mut conf.flg_digest).optional()
        .long("digest").help("Use HTTP Digest Authentication"))
    .opt(Opt::new("disable", &mut conf.flg_disable).optional()
        .short('q').long("disable").help("Disable .curlrc"))
    .opt(Opt::new("disable-eprt", &mut conf.flg_disable_eprt).optional()
        .long("disable-eprt").help("Inhibit using EPRT or LPRT"))
    .opt(Opt::new("disable-epsv", &mut conf.flg_disable_epsv).optional()
        .long("disable-epsv").help("Inhibit using EPSV"))
    .opt(Opt::new("disallow-username-in-url", &mut conf.flg_disallow_username_in_url).optional()
        .long("disallow-username-in-url").help("Disallow username in url"))
    .opt(Opt::new("dns-interface", &mut conf.opt_dns_interface).optional()
        .long("dns-interface").help("Interface to use for DNS requests"))
    .opt(Opt::new("dns-ipv4-addr", &mut conf.opt_dns_ipv4_addr).optional()
        .long("dns-ipv4-addr").help("IPv4 address to use for DNS requests"))
    .opt(Opt::new("dns-ipv6-addr", &mut conf.opt_dns_ipv6_addr).optional()
        .long("dns-ipv6-addr").help("IPv6 address to use for DNS requests"))
    .opt(Opt::new("dns-servers", &mut conf.opt_dns_servers).optional()
        .long("dns-servers").help("DNS server addrs to use"))
    .opt(Opt::new("doh-url", &mut conf.opt_doh_url).optional()
        .long("doh-url").help("Resolve host names over DOH"))
    .opt(Opt::new("dump-header", &mut conf.opt_dump_header).optional()
        .short('D').long("dump-header").help("Write the received headers to <filename>"))
    .opt(Opt::new("egd-file", &mut conf.opt_egd_file).optional()
        .long("egd-file").help("EGD socket path for random data"))
    .opt(Opt::new("engine", &mut conf.opt_engine).optional()
        .long("engine").help("Crypto engine to use"))
    .opt(Opt::new("etag-save", &mut conf.opt_etag_save).optional()
        .long("etag-save").help("Get an ETag from response header and save it to a FILE"))
    .opt(Opt::new("etag-compare", &mut conf.opt_etag_compare).optional()
        .long("etag-compare").help("Get an ETag from a file and send a conditional request"))
    .opt(Opt::new("expect100-timeout", &mut conf.opt_expect100_timeout).optional()
        .long("expect100-timeout").help("How long to wait for 100-continue"))
    .opt(Opt::new("fail", &mut conf.flg_fail).optional()
        .short('f').long("fail").help("Fail silently (no output at all) on HTTP errors"))
    .opt(Opt::new("fail-early", &mut conf.flg_fail_early).optional()
        .long("fail-early").help("Fail on first transfer error  do not continue"))
    .opt(Opt::new("false-start", &mut conf.flg_false_start).optional()
        .long("false-start").help("Enable TLS False Start"))
    .opt(Opt::new("form", &mut conf.opt_form).optional()
        .short('F').long("form").help("Specify multipart MIME data"))
    .opt(Opt::new("form-string", &mut conf.opt_form_string).optional()
        .long("form-string").help("Specify multipart MIME data"))
    .opt(Opt::new("ftp-account", &mut conf.opt_ftp_account).optional()
        .long("ftp-account").help("Account data string"))
    .opt(Opt::new("ftp-alternative-to-user", &mut conf.opt_ftp_alternative_to_user).optional()
        .long("ftp-alternative-to-user").help("String to replace USER [name]"))
    .opt(Opt::new("ftp-create-dirs", &mut conf.flg_ftp_create_dirs).optional()
        .long("ftp-create-dirs").help("Create the remote dirs if not present"))
    .opt(Opt::new("ftp-method", &mut conf.opt_ftp_method).optional()
        .long("ftp-method").help("Control CWD usage"))
    .opt(Opt::new("ftp-pasv", &mut conf.flg_ftp_pasv).optional()
        .long("ftp-pasv").help("Use PASV/EPSV instead of PORT"))
    .opt(Opt::new("ftp-port", &mut conf.opt_ftp_port).optional()
        .short('P').long("ftp-port").help("Use PORT instead of PASV"))
    .opt(Opt::new("ftp-pret", &mut conf.flg_ftp_pret).optional()
        .long("ftp-pret").help("Send PRET before PASV"))
    .opt(Opt::new("ftp-skip-pasv-ip", &mut conf.flg_ftp_skip_pasv_ip).optional()
        .long("ftp-skip-pasv-ip").help("Skip the IP address for PASV"))
    .opt(Opt::new("ftp-ssl-ccc", &mut conf.flg_ftp_ssl_ccc).optional()
        .long("ftp-ssl-ccc").help("Send CCC after authenticating"))
    .opt(Opt::new("ftp-ssl-ccc-mode", &mut conf.opt_ftp_ssl_ccc_mode).optional()
        .long("ftp-ssl-ccc-mode").help("Set CCC mode"))
    .opt(Opt::new("ftp-ssl-control", &mut conf.flg_ftp_ssl_control).optional()
        .long("ftp-ssl-control").help("Require SSL/TLS for FTP login  clear for transfer"))
    .opt(Opt::new("get", &mut conf.flg_get).optional()
        .short('G').long("get").help("Put the post data in the URL and use GET"))
    .opt(Opt::new("globoff", &mut conf.flg_globoff).optional()
        .short('g').long("globoff").help("Disable URL sequences and ranges using {} and []"))
    .opt(Opt::new("happy-eyeballs-timeout-ms", &mut conf.opt_happy_eyeballs_timeout_ms).optional()
        .long("happy-eyeballs-timeout-ms").help("How long to wait in milliseconds for IPv6 before trying IPv4"))
    .opt(Opt::new("haproxy-protocol", &mut conf.flg_haproxy_protocol).optional()
        .long("haproxy-protocol").help("Send HAProxy PROXY protocol v1 header"))
    .opt(Opt::new("head", &mut conf.flg_head).optional()
        .short('I').long("head").help("Show document info only"))
    .opt(Opt::new("header", &mut conf.opt_header).optional()
        .long("header").help("Pass custom header(s) to server"))
    .opt(Opt::new("hostpubmd5", &mut conf.opt_hostpubmd5).optional()
        .long("hostpubmd5").help("Acceptable MD5 hash of the host public key"))
    .opt(Opt::new("http0.9", &mut conf.flg_http0_9).optional()
        .long("http0.9").help("Allow HTTP 0.9 responses"))
    .opt(Opt::new("http1.0", &mut conf.flg_http1_0).optional()
        .short('0').long("http1.0").help("Use HTTP 1.0"))
    .opt(Opt::new("http1.1", &mut conf.flg_http1_1).optional()
        .long("http1.1").help("Use HTTP 1.1"))
    .opt(Opt::new("http2", &mut conf.flg_http2).optional()
        .long("http2").help("Use HTTP 2"))
    .opt(Opt::new("http2-prior-knowledge", &mut conf.flg_http2_prior_knowledge).optional()
        .long("http2-prior-knowledge").help("Use HTTP 2 without HTTP/1.1 Upgrade"))
    .opt(Opt::new("http3", &mut conf.flg_http3).optional()
        .long("http3").help("Use HTTP v3"))
    .opt(Opt::new("ignore-content-length", &mut conf.flg_ignore_content_length).optional()
        .long("ignore-content-length").help("Ignore the size of the remote resource"))
    .opt(Opt::new("include", &mut conf.flg_include).optional()
        .short('i').long("include").help("Include protocol response headers in the output"))
    .opt(Opt::new("insecure", &mut conf.flg_insecure).optional()
        .short('k').long("insecure").help("Allow insecure server connections when using SSL"))
    .opt(Opt::new("interface", &mut conf.opt_interface).optional()
        .long("interface").help("Use network INTERFACE (or address)"))
    .opt(Opt::new("ipv4", &mut conf.flg_ipv4).optional()
        .short('4').long("ipv4").help("Resolve names to IPv4 addresses"))
    .opt(Opt::new("ipv6", &mut conf.flg_ipv6).optional()
        .short('6').long("ipv6").help("Resolve names to IPv6 addresses"))
    .opt(Opt::new("junk-session-cookies", &mut conf.flg_junk_session_cookies).optional()
        .short('j').long("junk-session-cookies").help("Ignore session cookies read from file"))
    .opt(Opt::new("keepalive-time", &mut conf.opt_keepalive_time).optional()
        .long("keepalive-time").help("Interval time for keepalive probes"))
    .opt(Opt::new("key", &mut conf.opt_key).optional()
        .long("key").help("Private key file name"))
    .opt(Opt::new("key-type", &mut conf.opt_key_type).optional()
        .long("key-type").help("Private key file type (DER/PEM/ENG)"))
    .opt(Opt::new("krb", &mut conf.opt_krb).optional()
        .long("krb").help("Enable Kerberos with security <level>"))
    .opt(Opt::new("libcurl", &mut conf.opt_libcurl).optional()
        .long("libcurl").help("Dump libcurl equivalent code of this command line"))
    .opt(Opt::new("limit-rate", &mut conf.opt_limit_rate).optional()
        .long("limit-rate").help("Limit transfer speed to RATE"))
    .opt(Opt::new("list-only", &mut conf.flg_list_only).optional()
        .short('l').long("list-only").help("List only mode"))
    .opt(Opt::new("local-port", &mut conf.opt_local_port).optional()
        .long("local-port").help("Force use of RANGE for local port numbers"))
    .opt(Opt::new("location", &mut conf.flg_location).optional()
        .short('L').long("location").help("Follow redirects"))
    .opt(Opt::new("location-trusted", &mut conf.flg_location_trusted).optional()
        .long("location-trusted").help("Like --location  and send auth to other hosts"))
    .opt(Opt::new("login-options", &mut conf.opt_login_options).optional()
        .long("login-options").help("Server login options"))
    .opt(Opt::new("mail-auth", &mut conf.opt_mail_auth).optional()
        .long("mail-auth").help("Originator address of the original email"))
    .opt(Opt::new("mail-from", &mut conf.opt_mail_from).optional()
        .long("mail-from").help("Mail from this address"))
    .opt(Opt::new("mail-rcpt", &mut conf.opt_mail_rcpt).optional()
        .long("mail-rcpt").help("Mail to this address"))
    .opt(Opt::new("manual", &mut conf.flg_manual).optional()
        .short('M').long("manual").help("Display the full manual"))
    .opt(Opt::new("max-filesize", &mut conf.opt_max_filesize).optional()
        .long("max-filesize").help("Maximum file size to download"))
    .opt(Opt::new("max-redirs", &mut conf.opt_max_redirs).optional()
        .long("max-redirs").help("Maximum number of redirects allowed"))
    .opt(Opt::new("max-time", &mut conf.opt_max_time).optional()
        .short('m').long("max-time").help("Maximum time allowed for the transfer"))
    .opt(Opt::new("metalink", &mut conf.flg_metalink).optional()
        .long("metalink").help("Process given URLs as metalink XML file"))
    .opt(Opt::new("negotiate", &mut conf.flg_negotiate).optional()
        .long("negotiate").help("Use HTTP Negotiate (SPNEGO) authentication"))
    .opt(Opt::new("netrc", &mut conf.flg_netrc).optional()
        .short('n').long("netrc").help("Must read .netrc for user name and password"))
    .opt(Opt::new("netrc-file", &mut conf.opt_netrc_file).optional()
        .long("netrc-file").help("Specify FILE for netrc"))
    .opt(Opt::new("netrc-optional", &mut conf.flg_netrc_optional).optional()
        .long("netrc-optional").help("Use either .netrc or URL"))
    .opt(Opt::new("next", &mut conf.flg_next).optional()
        .short(':').long("next").help("Make next URL use its separate set of options"))
    .opt(Opt::new("no-alpn", &mut conf.flg_no_alpn).optional()
        .long("no-alpn").help("Disable the ALPN TLS extension"))
    .opt(Opt::new("no-buffer", &mut conf.flg_no_buffer).optional()
        .short('N').long("no-buffer").help("Disable buffering of the output stream"))
    .opt(Opt::new("no-keepalive", &mut conf.flg_no_keepalive).optional()
        .long("no-keepalive").help("Disable TCP keepalive on the connection"))
    .opt(Opt::new("no-npn", &mut conf.flg_no_npn).optional()
        .long("no-npn").help("Disable the NPN TLS extension"))
    .opt(Opt::new("no-progress-meter", &mut conf.flg_no_progress_meter).optional()
        .long("no-progress-meter").help("Do not show the progress meter"))
    .opt(Opt::new("no-sessionid", &mut conf.flg_no_sessionid).optional()
        .long("no-sessionid").help("Disable SSL session-ID reusing"))
    .opt(Opt::new("noproxy", &mut conf.opt_noproxy).optional()
        .long("noproxy").help("List of hosts which do not use proxy"))
    .opt(Opt::new("ntlm", &mut conf.flg_ntlm).optional()
        .long("ntlm").help("Use HTTP NTLM authentication"))
    .opt(Opt::new("ntlm-wb", &mut conf.flg_ntlm_wb).optional()
        .long("ntlm-wb").help("Use HTTP NTLM authentication with winbind"))
    .opt(Opt::new("oauth2-bearer", &mut conf.opt_oauth2_bearer).optional()
        .long("oauth2-bearer").help("OAuth 2 Bearer Token"))
    .opt(Opt::new("output", &mut conf.opt_output).optional()
        .short('o').long("output").help("Write to file instead of stdout"))
    .opt(Opt::new("parallel", &mut conf.flg_parallel).optional()
        .short('Z').long("parallel").help("Perform transfers in parallel"))
    .opt(Opt::new("parallel-immediate", &mut conf.flg_parallel_immediate).optional()
        .long("parallel-immediate").help("Do not wait for multiplexing (with --parallel)"))
    .opt(Opt::new("parallel-max", &mut conf.flg_parallel_max).optional()
        .long("parallel-max").help("Maximum concurrency for parallel transfers"))
    .opt(Opt::new("pass", &mut conf.opt_pass).optional()
        .long("pass").help("Pass phrase for the private key"))
    .opt(Opt::new("path-as-is", &mut conf.flg_path_as_is).optional()
        .long("path-as-is").help("Do not squash .. sequences in URL path"))
    .opt(Opt::new("pinnedpubkey", &mut conf.opt_pinnedpubkey).optional()
        .long("pinnedpubkey").help("FILE/HASHES Public key to verify peer against"))
    .opt(Opt::new("post301", &mut conf.flg_post301).optional()
        .long("post301").help("Do not switch to GET after following a 301"))
    .opt(Opt::new("post302", &mut conf.flg_post302).optional()
        .long("post302").help("Do not switch to GET after following a 302"))
    .opt(Opt::new("post303", &mut conf.flg_post303).optional()
        .long("post303").help("Do not switch to GET after following a 303"))
    .opt(Opt::new("preproxy", &mut conf.opt_preproxy).optional()
        .long("preproxy").help("Use this proxy first"))
    .opt(Opt::new("progress-bar", &mut conf.flg_progress_bar).optional()
        .short('#').long("progress-bar").help("Display transfer progress as a bar"))
    .opt(Opt::new("proto", &mut conf.opt_proto).optional()
        .long("proto").help("Enable/disable PROTOCOLS"))
    .opt(Opt::new("proto-default", &mut conf.opt_proto_default).optional()
        .long("proto-default").help("Use PROTOCOL for any URL missing a scheme"))
    .opt(Opt::new("proto-redir", &mut conf.opt_proto_redir).optional()
        .long("proto-redir").help("Enable/disable PROTOCOLS on redirect"))
    .opt(Opt::new("proxy", &mut conf.opt_proxy).optional()
        .short('x').long("proxy").help("Use this proxy"))
    .opt(Opt::new("proxy-anyauth", &mut conf.flg_proxy_anyauth).optional()
        .long("proxy-anyauth").help("Pick any proxy authentication method"))
    .opt(Opt::new("proxy-basic", &mut conf.flg_proxy_basic).optional()
        .long("proxy-basic").help("Use Basic authentication on the proxy"))
    .opt(Opt::new("proxy-cacert", &mut conf.opt_proxy_cacert).optional()
        .long("proxy-cacert").help("CA certificate to verify peer against for proxy"))
    .opt(Opt::new("proxy-capath", &mut conf.opt_proxy_capath).optional()
        .long("proxy-capath").help("CA directory to verify peer against for proxy"))
    .opt(Opt::new("proxy-cert", &mut conf.opt_proxy_cert).optional()
        .long("proxy-cert").help("Set client certificate for proxy"))
    .opt(Opt::new("proxy-cert-type", &mut conf.opt_proxy_cert_type).optional()
        .long("proxy-cert-type").help("Client certificate type for HTTPS proxy"))
    .opt(Opt::new("proxy-ciphers", &mut conf.opt_proxy_ciphers).optional()
        .long("proxy-ciphers").help("SSL ciphers to use for proxy"))
    .opt(Opt::new("proxy-crlfile", &mut conf.opt_proxy_crlfile).optional()
        .long("proxy-crlfile").help("Set a CRL list for proxy"))
    .opt(Opt::new("proxy-digest", &mut conf.flg_proxy_digest).optional()
        .long("proxy-digest").help("Use Digest authentication on the proxy"))
    .opt(Opt::new("proxy-header", &mut conf.opt_proxy_header).optional()
        .long("proxy-header").help("Pass custom header(s) to proxy"))
    .opt(Opt::new("proxy-insecure", &mut conf.flg_proxy_insecure).optional()
        .long("proxy-insecure").help("Do HTTPS proxy connections without verifying the proxy"))
    .opt(Opt::new("proxy-key", &mut conf.opt_proxy_key).optional()
        .long("proxy-key").help("Private key for HTTPS proxy"))
    .opt(Opt::new("proxy-key-type", &mut conf.opt_proxy_key_type).optional()
        .long("proxy-key-type").help("Private key file type for proxy"))
    .opt(Opt::new("proxy-negotiate", &mut conf.flg_proxy_negotiate).optional()
        .long("proxy-negotiate").help("Use HTTP Negotiate (SPNEGO) authentication on the proxy"))
    .opt(Opt::new("proxy-ntlm", &mut conf.flg_proxy_ntlm).optional()
        .long("proxy-ntlm").help("Use NTLM authentication on the proxy"))
    .opt(Opt::new("proxy-pass", &mut conf.opt_proxy_pass).optional()
        .long("proxy-pass").help("Pass phrase for the private key for HTTPS proxy"))
    .opt(Opt::new("proxy-pinnedpubkey", &mut conf.opt_proxy_pinnedpubkey).optional()
        .long("proxy-pinnedpubkey").help("FILE/HASHES public key to verify proxy with"))
    .opt(Opt::new("proxy-service-name", &mut conf.opt_proxy_service_name).optional()
        .long("proxy-service-name").help("SPNEGO proxy service name"))
    .opt(Opt::new("proxy-ssl-allow-beast", &mut conf.flg_proxy_ssl_allow_beast).optional()
        .long("proxy-ssl-allow-beast").help("Allow security flaw for interop for HTTPS proxy"))
    .opt(Opt::new("proxy-tls13-ciphers", &mut conf.opt_proxy_tls13_ciphers).optional()
        .long("proxy-tls13-ciphers").help("TLS 1.3 ciphersuites for proxy (OpenSSL)"))
    .opt(Opt::new("proxy-tlsauthtype", &mut conf.opt_proxy_tlsauthtype).optional()
        .long("proxy-tlsauthtype").help("TLS authentication type for HTTPS proxy"))
    .opt(Opt::new("proxy-tlspassword", &mut conf.opt_proxy_tlspassword).optional()
        .long("proxy-tlspassword").help("TLS password for HTTPS proxy"))
    .opt(Opt::new("proxy-tlsuser", &mut conf.opt_proxy_tlsuser).optional()
        .long("proxy-tlsuser").help("TLS username for HTTPS proxy"))
    .opt(Opt::new("proxy-tlsv1", &mut conf.flg_proxy_tlsv1).optional()
        .long("proxy-tlsv1").help("Use TLSv1 for HTTPS proxy"))
    .opt(Opt::new("proxy-user", &mut conf.opt_proxy_user).optional()
        .short('U').long("proxy-user").help("Proxy user and password"))
    .opt(Opt::new("proxy1.0", &mut conf.opt_proxy1_0).optional()
        .long("proxy1.0").help("Use HTTP/1.0 proxy on given port"))
    .opt(Opt::new("proxytunnel", &mut conf.flg_proxytunnel).optional()
        .short('p').long("proxytunnel").help("Operate through an HTTP proxy tunnel (using CONNECT)"))
    .opt(Opt::new("pubkey", &mut conf.opt_pubkey).optional()
        .long("pubkey").help("SSH Public key file name"))
    .opt(Opt::new("quote", &mut conf.flg_quote).optional()
        .short('Q').long("quote").help("Send command(s) to server before transfer"))
    .opt(Opt::new("random-file", &mut conf.opt_random_file).optional()
        .long("random-file").help("File for reading random data from"))
    .opt(Opt::new("range", &mut conf.opt_range).optional()
        .short('r').long("range").help("Retrieve only the bytes within RANGE"))
    .opt(Opt::new("raw", &mut conf.flg_raw).optional()
        .long("raw").help("Do HTTP 'raw'; no transfer decoding"))
    .opt(Opt::new("referer", &mut conf.opt_referer).optional()
        .short('e').long("referer").help("Referrer URL"))
    .opt(Opt::new("remote-header-name", &mut conf.flg_remote_header_name).optional()
        .short('J').long("remote-header-name").help("Use the header-provided filename"))
    .opt(Opt::new("remote-name", &mut conf.flg_remote_name).optional()
        .short('O').long("remote-name").help("Write output to a file named as the remote file"))
    .opt(Opt::new("remote-name-all", &mut conf.flg_remote_name_all).optional()
        .long("remote-name-all").help("Use the remote file name for all URLs"))
    .opt(Opt::new("remote-time", &mut conf.flg_remote_time).optional()
        .short('R').long("remote-time").help("Set the remote file's time on the local output"))
    .opt(Opt::new("request", &mut conf.opt_request).optional()
        .short('X').long("request").help("Specify request command to use"))
    .opt(Opt::new("request-target", &mut conf.flg_request_target).optional()
        .long("request-target").help("Specify the target for this request"))
    .opt(Opt::new("resolve", &mut conf.opt_resolve).optional()
        .long("resolve").help("Resolve the host+port to this address"))
    .opt(Opt::new("retry", &mut conf.opt_retry).optional()
        .long("retry").help("Retry request if transient problems occur"))
    .opt(Opt::new("retry-connrefused", &mut conf.flg_retry_connrefused).optional()
        .long("retry-connrefused").help("Retry on connection refused (use with --retry)"))
    .opt(Opt::new("retry-delay", &mut conf.opt_retry_delay).optional()
        .long("retry-delay").help("Wait time between retries"))
    .opt(Opt::new("retry-max-time", &mut conf.opt_retry_max_time).optional()
        .long("retry-max-time").help("Retry only within this period"))
    .opt(Opt::new("sasl-authzid", &mut conf.opt_sasl_authzid).optional()
        .long("sasl-authzid").help("Use this identity to act as during SASL PLAIN authentication"))
    .opt(Opt::new("sasl-ir", &mut conf.flg_sasl_ir).optional()
        .long("sasl-ir").help("Enable initial response in SASL authentication"))
    .opt(Opt::new("service-name", &mut conf.opt_service_name).optional()
        .long("service-name").help("SPNEGO service name"))
    .opt(Opt::new("show-error", &mut conf.flg_show_error).optional()
        .short('S').long("show-error").help("Show error even when -s is used"))
    .opt(Opt::new("silent", &mut conf.flg_silent).optional()
        .short('s').long("silent").help("Silent mode"))
    .opt(Opt::new("socks4", &mut conf.opt_socks4).optional()
        .long("socks4").help("SOCKS4 proxy on given host + port"))
    .opt(Opt::new("socks4a", &mut conf.opt_socks4a).optional()
        .long("socks4a").help("SOCKS4a proxy on given host + port"))
    .opt(Opt::new("socks5", &mut conf.opt_socks5).optional()
        .long("socks5").help("SOCKS5 proxy on given host + port"))
    .opt(Opt::new("socks5-basic", &mut conf.flg_socks5_basic).optional()
        .long("socks5-basic").help("Enable username/password auth for SOCKS5 proxies"))
    .opt(Opt::new("socks5-gssapi", &mut conf.flg_socks5_gssapi).optional()
        .long("socks5-gssapi").help("Enable GSS-API auth for SOCKS5 proxies"))
    .opt(Opt::new("socks5-gssapi-nec", &mut conf.flg_socks5_gssapi_nec).optional()
        .long("socks5-gssapi-nec").help("Compatibility with NEC SOCKS5 server"))
    .opt(Opt::new("socks5-gssapi-service", &mut conf.opt_socks5_gssapi_service).optional()
        .long("socks5-gssapi-service").help("SOCKS5 proxy service name for GSS-API"))
    .opt(Opt::new("socks5-hostname", &mut conf.opt_socks5_hostname).optional()
        .long("socks5-hostname").help("SOCKS5 proxy  pass host name to proxy"))
    .opt(Opt::new("speed-limit", &mut conf.opt_speed_limit).optional()
        .short('Y').long("speed-limit").help("Stop transfers slower than this"))
    .opt(Opt::new("speed-time", &mut conf.opt_speed_time).optional()
        .short('y').long("speed-time").help("Trigger 'speed-limit' abort after this time"))
    .opt(Opt::new("ssl", &mut conf.flg_ssl).optional()
        .long("ssl").help("Try SSL/TLS"))
    .opt(Opt::new("ssl-allow-beast", &mut conf.flg_ssl_allow_beast).optional()
        .long("ssl-allow-beast").help("Allow security flaw to improve interop"))
    .opt(Opt::new("ssl-no-revoke", &mut conf.flg_ssl_no_revoke).optional()
        .long("ssl-no-revoke").help("Disable cert revocation checks (Schannel)"))
    .opt(Opt::new("ssl-reqd", &mut conf.flg_ssl_reqd).optional()
        .long("ssl-reqd").help("Require SSL/TLS"))
    .opt(Opt::new("sslv2", &mut conf.flg_sslv2).optional()
        .short('2').long("sslv2").help("Use SSLv2"))
    .opt(Opt::new("sslv3", &mut conf.flg_sslv3).optional()
        .short('3').long("sslv3").help("Use SSLv3"))
    .opt(Opt::new("stderr", &mut conf.flg_stderr).optional()
        .long("stderr").help("Where to redirect stderr"))
    .opt(Opt::new("styled-output", &mut conf.flg_styled_output).optional()
        .long("styled-output").help("Enable styled output for HTTP headers"))
    .opt(Opt::new("suppress-connect-headers", &mut conf.flg_suppress_connect_headers).optional()
        .long("suppress-connect-headers").help("Suppress proxy CONNECT response headers"))
    .opt(Opt::new("tcp-fastopen", &mut conf.flg_tcp_fastopen).optional()
        .long("tcp-fastopen").help("Use TCP Fast Open"))
    .opt(Opt::new("tcp-nodelay", &mut conf.flg_tcp_nodelay).optional()
        .long("tcp-nodelay").help("Use the TCP_NODELAY option"))
    .opt(Opt::new("telnet-option", &mut conf.opt_telnet_option).optional()
        .short('t').long("telnet-option").help("Set telnet option"))
    .opt(Opt::new("tftp-blksize", &mut conf.opt_tftp_blksize).optional()
        .long("tftp-blksize").help("Set TFTP BLKSIZE option"))
    .opt(Opt::new("tftp-no-options", &mut conf.flg_tftp_no_options).optional()
        .long("tftp-no-options").help("Do not send any TFTP options"))
    .opt(Opt::new("time-cond", &mut conf.opt_time_cond).optional()
        .short('z').long("time-cond").help("Transfer based on a time condition"))
    .opt(Opt::new("tls-max", &mut conf.opt_tls_max).optional()
        .long("tls-max").help("Set maximum allowed TLS version"))
    .opt(Opt::new("tls13-ciphers", &mut conf.opt_tls13_ciphers).optional()
        .long("tls13-ciphers").help("TLS 1.3 ciphersuites (OpenSSL)"))
    .opt(Opt::new("tlsauthtype", &mut conf.opt_tlsauthtype).optional()
        .long("tlsauthtype").help("TLS authentication type"))
    .opt(Opt::new("tlspassword", &mut conf.flg_tlspassword).optional()
        .long("tlspassword").help("TLS password"))
    .opt(Opt::new("tlsuser", &mut conf.opt_tlsuser).optional()
        .long("tlsuser").help("TLS user name"))
    .opt(Opt::new("tlsv1", &mut conf.flg_tlsv1).optional()
        .short('1').long("tlsv1").help("Use TLSv1.0 or greater"))
    .opt(Opt::new("tlsv1.0", &mut conf.flg_tlsv1_0).optional()
        .long("tlsv1.0").help("Use TLSv1.0 or greater"))
    .opt(Opt::new("tlsv1.1", &mut conf.flg_tlsv1_1).optional()
        .long("tlsv1.1").help("Use TLSv1.1 or greater"))
    .opt(Opt::new("tlsv1.2", &mut conf.flg_tlsv1_2).optional()
        .long("tlsv1.2").help("Use TLSv1.2 or greater"))
    .opt(Opt::new("tlsv1.3", &mut conf.flg_tlsv1_3).optional()
        .long("tlsv1.3").help("Use TLSv1.3 or greater"))
    .opt(Opt::new("tr-encoding", &mut conf.flg_tr_encoding).optional()
        .long("tr-encoding").help("Request compressed transfer encoding"))
    .opt(Opt::new("trace", &mut conf.opt_trace).optional()
        .long("trace").help("Write a debug trace to FILE"))
    .opt(Opt::new("trace-ascii", &mut conf.opt_trace_ascii).optional()
        .long("trace-ascii").help("Like --trace  but without hex output"))
    .opt(Opt::new("trace-time", &mut conf.flg_trace_time).optional()
        .long("trace-time").help("Add time stamps to trace/verbose output"))
    .opt(Opt::new("unix-socket", &mut conf.opt_unix_socket).optional()
        .long("unix-socket").help("Connect through this Unix domain socket"))
    .opt(Opt::new("upload-file", &mut conf.opt_upload_file).optional()
        .short('T').long("upload-file").help("Transfer local FILE to destination"))
    .opt(Opt::new("url", &mut conf.opt_url).optional()
        .long("url").help("URL to work with"))
    .opt(Opt::new("use-ascii", &mut conf.flg_use_ascii).optional()
        .short('B').long("use-ascii").help("Use ASCII/text transfer"))
    .opt(Opt::new("user", &mut conf.opt_user).optional()
        .short('u').long("user").help("Server user and password"))
    .opt(Opt::new("user-agent", &mut conf.opt_user_agent).optional()
        .short('A').long("user-agent").help("Send User-Agent <name> to server"))
    .opt(Opt::new("verbose", &mut conf.flg_verbose).optional()
        .short('v').long("verbose").help("Make the operation more talkative"))
    .opt(Opt::new("write-out", &mut conf.opt_write_out).optional()
        .short('w').long("write-out").help("Use output FORMAT after completion"))
    .opt(Opt::new("xattr", &mut conf.flg_xattr).optional()
        .long("xattr").help("Store metadata in extended file attributes"))

    .args(
        Args::new("URL", &mut conf.arg_params)
            .len(1usize)
            .help("Input file"),
    )

}
