use optstr_curl::parse_input_file;
use optstr_curl::OptStr;

pub fn do_gen_src() -> anyhow::Result<()> {
    let (vec_optstr, vec_line) = parse_input_file("comps/common/optstr-curl/src/curl.cmd.txt")?;
    //
    let sss = do_gen_src_help(&vec_optstr, &vec_line)?;
    update_file::update_file(&sss, "comps/cmp_app/src/curl.cmd.help.rs.txt")?;
    //
    let sss = do_gen_src_lex(&vec_optstr)?;
    update_file::update_file(&sss, "comps/cmp_app/src/curl.cmd.lex.rs.txt")?;
    //
    Ok(())
}

fn do_gen_src_help(vec_optstr: &[OptStr], _vec_line: &[String]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));

    sss += r#"
"#;
    //
    sss += r#"
#[derive(Debug, Default, PartialEq)]
pub struct CmdOptConf {
    pub opt_program: String,
    //
"#;
    for rec in vec_optstr.iter() {
        sss += &format!("    pub {}: {},\n", rec.field_s, rec.type_s);
    }
    sss += r#"    //
    pub arg_params: Vec<String>,
}
"#;
    //
    Ok(sss)
}

fn do_gen_src_lex(vec_optstr: &[OptStr]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));
    //
    sss += r#"
{
    App::new(env!("CARGO_PKG_NAME"))
    .version(env!("CARGO_PKG_VERSION"))
"#;
    for rec in vec_optstr.iter() {
        if rec.sho == "h" || rec.lon == "help" || rec.lon == "version" {
            continue;
        }
        let sholon = if !rec.lon.is_empty() {
            rec.lon.clone()
        } else {
            rec.sho.clone()
        };
        sss += &format!(
            "    .opt(Opt::new(\"{}\", &mut conf.{}).optional()\n",
            sholon, rec.field_s
        );
        if !rec.sho.is_empty() && !rec.lon.is_empty() {
            sss += &format!(
                "        .short(\'{}\').long(\"{}\").help(\"{}\"))\n",
                rec.sho, rec.lon, rec._comment
            );
        } else if !rec.sho.is_empty() {
            sss += &format!(
                "        .short(\'{}\').help(\"{}\"))\n",
                rec.sho, rec._comment
            );
        } else {
            sss += &format!(
                "        .long(\"{}\").help(\"{}\"))\n",
                rec.lon, rec._comment
            );
        }
    }
    sss += r#"
    .args(
        Args::new("URL", &mut conf.arg_params)
            .len(1usize)
            .help("Input file"),
    )
"#;
    sss += r#"
}
"#;
    //
    Ok(sss)
}
