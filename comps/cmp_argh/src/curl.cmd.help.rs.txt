// WARN: This file is auto generated by cmp_argh_xtask

#[derive(Debug, Default, PartialEq)]
pub struct CmdOptConf {
    pub opt_program: String,
    //
    pub opt_abstract_unix_socket: String,
    pub opt_alt_svc: String,
    pub flg_anyauth: bool,
    pub flg_append: bool,
    pub flg_basic: bool,
    pub opt_cacert: String,
    pub opt_capath: String,
    pub opt_cert: String,
    pub flg_cert_status: bool,
    pub opt_cert_type: String,
    pub opt_ciphers: String,
    pub flg_compressed: bool,
    pub flg_compressed_ssh: bool,
    pub opt_config: String,
    pub opt_connect_timeout: u32,
    pub opt_connect_to: String,
    pub opt_continue_at: u64,
    pub opt_cookie: String,
    pub opt_cookie_jar: String,
    pub flg_create_dirs: bool,
    pub flg_crlf: bool,
    pub opt_crlfile: String,
    pub opt_data: String,
    pub opt_data_ascii: String,
    pub opt_data_binary: String,
    pub opt_data_raw: String,
    pub opt_data_urlencode: String,
    pub opt_delegation: String,
    pub flg_digest: bool,
    pub flg_disable: bool,
    pub flg_disable_eprt: bool,
    pub flg_disable_epsv: bool,
    pub flg_disallow_username_in_url: bool,
    pub opt_dns_interface: String,
    pub opt_dns_ipv4_addr: String,
    pub opt_dns_ipv6_addr: String,
    pub opt_dns_servers: String,
    pub opt_doh_url: String,
    pub opt_dump_header: String,
    pub opt_egd_file: String,
    pub opt_engine: String,
    pub opt_etag_save: String,
    pub opt_etag_compare: String,
    pub opt_expect100_timeout: u32,
    pub flg_fail: bool,
    pub flg_fail_early: bool,
    pub flg_false_start: bool,
    pub opt_form: String,
    pub opt_form_string: String,
    pub opt_ftp_account: String,
    pub opt_ftp_alternative_to_user: String,
    pub flg_ftp_create_dirs: bool,
    pub opt_ftp_method: String,
    pub flg_ftp_pasv: bool,
    pub opt_ftp_port: String,
    pub flg_ftp_pret: bool,
    pub flg_ftp_skip_pasv_ip: bool,
    pub flg_ftp_ssl_ccc: bool,
    pub opt_ftp_ssl_ccc_mode: String,
    pub flg_ftp_ssl_control: bool,
    pub flg_get: bool,
    pub flg_globoff: bool,
    pub opt_happy_eyeballs_timeout_ms: u64,
    pub flg_haproxy_protocol: bool,
    pub flg_head: bool,
    pub opt_header: String,
    pub opt_hostpubmd5: String,
    pub flg_http0_9: bool,
    pub flg_http1_0: bool,
    pub flg_http1_1: bool,
    pub flg_http2: bool,
    pub flg_http2_prior_knowledge: bool,
    pub flg_http3: bool,
    pub flg_ignore_content_length: bool,
    pub flg_include: bool,
    pub flg_insecure: bool,
    pub opt_interface: String,
    pub flg_ipv4: bool,
    pub flg_ipv6: bool,
    pub flg_junk_session_cookies: bool,
    pub opt_keepalive_time: u32,
    pub opt_key: String,
    pub opt_key_type: String,
    pub opt_krb: String,
    pub opt_libcurl: String,
    pub opt_limit_rate: u64,
    pub flg_list_only: bool,
    pub opt_local_port: String,
    pub flg_location: bool,
    pub flg_location_trusted: bool,
    pub opt_login_options: String,
    pub opt_mail_auth: String,
    pub opt_mail_from: String,
    pub opt_mail_rcpt: String,
    pub flg_manual: bool,
    pub opt_max_filesize: u64,
    pub opt_max_redirs: u32,
    pub opt_max_time: u32,
    pub flg_metalink: bool,
    pub flg_negotiate: bool,
    pub flg_netrc: bool,
    pub opt_netrc_file: String,
    pub flg_netrc_optional: bool,
    pub flg_next: bool,
    pub flg_no_alpn: bool,
    pub flg_no_buffer: bool,
    pub flg_no_keepalive: bool,
    pub flg_no_npn: bool,
    pub flg_no_progress_meter: bool,
    pub flg_no_sessionid: bool,
    pub opt_noproxy: String,
    pub flg_ntlm: bool,
    pub flg_ntlm_wb: bool,
    pub opt_oauth2_bearer: String,
    pub opt_output: String,
    pub flg_parallel: bool,
    pub flg_parallel_immediate: bool,
    pub flg_parallel_max: bool,
    pub opt_pass: String,
    pub flg_path_as_is: bool,
    pub opt_pinnedpubkey: String,
    pub flg_post301: bool,
    pub flg_post302: bool,
    pub flg_post303: bool,
    pub opt_preproxy: String,
    pub flg_progress_bar: bool,
    pub opt_proto: String,
    pub opt_proto_default: String,
    pub opt_proto_redir: String,
    pub opt_proxy: String,
    pub flg_proxy_anyauth: bool,
    pub flg_proxy_basic: bool,
    pub opt_proxy_cacert: String,
    pub opt_proxy_capath: String,
    pub opt_proxy_cert: String,
    pub opt_proxy_cert_type: String,
    pub opt_proxy_ciphers: String,
    pub opt_proxy_crlfile: String,
    pub flg_proxy_digest: bool,
    pub opt_proxy_header: String,
    pub flg_proxy_insecure: bool,
    pub opt_proxy_key: String,
    pub opt_proxy_key_type: String,
    pub flg_proxy_negotiate: bool,
    pub flg_proxy_ntlm: bool,
    pub opt_proxy_pass: String,
    pub opt_proxy_pinnedpubkey: String,
    pub opt_proxy_service_name: String,
    pub flg_proxy_ssl_allow_beast: bool,
    pub opt_proxy_tls13_ciphers: String,
    pub opt_proxy_tlsauthtype: String,
    pub opt_proxy_tlspassword: String,
    pub opt_proxy_tlsuser: String,
    pub flg_proxy_tlsv1: bool,
    pub opt_proxy_user: String,
    pub opt_proxy1_0: String,
    pub flg_proxytunnel: bool,
    pub opt_pubkey: String,
    pub flg_quote: bool,
    pub opt_random_file: String,
    pub opt_range: String,
    pub flg_raw: bool,
    pub opt_referer: String,
    pub flg_remote_header_name: bool,
    pub flg_remote_name: bool,
    pub flg_remote_name_all: bool,
    pub flg_remote_time: bool,
    pub opt_request: String,
    pub flg_request_target: bool,
    pub opt_resolve: String,
    pub opt_retry: u32,
    pub flg_retry_connrefused: bool,
    pub opt_retry_delay: u32,
    pub opt_retry_max_time: u32,
    pub opt_sasl_authzid: String,
    pub flg_sasl_ir: bool,
    pub opt_service_name: String,
    pub flg_show_error: bool,
    pub flg_silent: bool,
    pub opt_socks4: String,
    pub opt_socks4a: String,
    pub opt_socks5: String,
    pub flg_socks5_basic: bool,
    pub flg_socks5_gssapi: bool,
    pub flg_socks5_gssapi_nec: bool,
    pub opt_socks5_gssapi_service: String,
    pub opt_socks5_hostname: String,
    pub opt_speed_limit: u64,
    pub opt_speed_time: u32,
    pub flg_ssl: bool,
    pub flg_ssl_allow_beast: bool,
    pub flg_ssl_no_revoke: bool,
    pub flg_ssl_reqd: bool,
    pub flg_sslv2: bool,
    pub flg_sslv3: bool,
    pub flg_stderr: bool,
    pub flg_styled_output: bool,
    pub flg_suppress_connect_headers: bool,
    pub flg_tcp_fastopen: bool,
    pub flg_tcp_nodelay: bool,
    pub opt_telnet_option: String,
    pub opt_tftp_blksize: u32,
    pub flg_tftp_no_options: bool,
    pub opt_time_cond: String,
    pub opt_tls_max: String,
    pub opt_tls13_ciphers: String,
    pub opt_tlsauthtype: String,
    pub flg_tlspassword: bool,
    pub opt_tlsuser: String,
    pub flg_tlsv1: bool,
    pub flg_tlsv1_0: bool,
    pub flg_tlsv1_1: bool,
    pub flg_tlsv1_2: bool,
    pub flg_tlsv1_3: bool,
    pub flg_tr_encoding: bool,
    pub opt_trace: String,
    pub opt_trace_ascii: String,
    pub flg_trace_time: bool,
    pub opt_unix_socket: String,
    pub opt_upload_file: String,
    pub opt_url: String,
    pub flg_use_ascii: bool,
    pub opt_user: String,
    pub opt_user_agent: String,
    pub flg_verbose: bool,
    pub opt_write_out: String,
    pub flg_xattr: bool,
    pub flg_help: bool,
    pub flg_version: bool,
    //
    pub arg_params: Vec<String>,
}

#[derive(FromArgs, PartialEq, Debug)]
/// transfer a URL, another name is the multiprotocol getter
pub struct MyOptions {
    /// connect via abstract unix domain socket
    #[argh(
        option,
        long = "abstract-unix-socket",
    )]
    pub opt_abstract_unix_socket: Option<String>,
    /// enable alt-svc with this cache file
    #[argh(
        option,
        long = "alt-svc",
    )]
    pub opt_alt_svc: Option<String>,
    /// pick any authentication method
    #[argh(
        switch,
        long = "anyauth",
    )]
    pub flg_anyauth: bool,
    /// append to target file when uploading
    #[argh(
        switch,
        short = 'a',
        long = "append",
    )]
    pub flg_append: bool,
    /// use http basic authentication
    #[argh(
        switch,
        long = "basic",
    )]
    pub flg_basic: bool,
    /// ca certificate to verify peer against
    #[argh(
        option,
        long = "cacert",
    )]
    pub opt_cacert: Option<String>,
    /// ca directory to verify peer against
    #[argh(
        option,
        long = "capath",
    )]
    pub opt_capath: Option<String>,
    /// client certificate file and password
    #[argh(
        option,
        short = 'E',
        long = "cert",
    )]
    pub opt_cert: Option<String>,
    /// verify the status of the server certificate
    #[argh(
        switch,
        long = "cert-status",
    )]
    pub flg_cert_status: bool,
    /// certificate file type (der/pem/eng)
    #[argh(
        option,
        long = "cert-type",
    )]
    pub opt_cert_type: Option<String>,
    /// ssl ciphers to use
    #[argh(
        option,
        long = "ciphers",
    )]
    pub opt_ciphers: Option<String>,
    /// request compressed response
    #[argh(
        switch,
        long = "compressed",
    )]
    pub flg_compressed: bool,
    /// enable ssh compression
    #[argh(
        switch,
        long = "compressed-ssh",
    )]
    pub flg_compressed_ssh: bool,
    /// read config from a file
    #[argh(
        option,
        short = 'K',
        long = "config",
    )]
    pub opt_config: Option<String>,
    /// maximum time allowed for connection
    #[argh(
        option,
        long = "connect-timeout",
    )]
    pub opt_connect_timeout: Option<u32>,
    /// connect to host
    #[argh(
        option,
        long = "connect-to",
    )]
    pub opt_connect_to: Option<String>,
    /// resumed transfer offset
    #[argh(
        option,
        short = 'C',
        long = "continue-at",
    )]
    pub opt_continue_at: Option<u64>,
    /// send cookies from string/file
    #[argh(
        option,
        short = 'b',
        long = "cookie",
    )]
    pub opt_cookie: Option<String>,
    /// write cookies to <filename> after operation
    #[argh(
        option,
        short = 'c',
        long = "cookie-jar",
    )]
    pub opt_cookie_jar: Option<String>,
    /// create necessary local directory hierarchy
    #[argh(
        switch,
        long = "create-dirs",
    )]
    pub flg_create_dirs: bool,
    /// convert lf to crlf in upload
    #[argh(
        switch,
        long = "crlf",
    )]
    pub flg_crlf: bool,
    /// get a crl list in pem format from the given file
    #[argh(
        option,
        long = "crlfile",
    )]
    pub opt_crlfile: Option<String>,
    /// http post data
    #[argh(
        option,
        short = 'd',
        long = "data",
    )]
    pub opt_data: Option<String>,
    /// http post ascii data
    #[argh(
        option,
        long = "data-ascii",
    )]
    pub opt_data_ascii: Option<String>,
    /// http post binary data
    #[argh(
        option,
        long = "data-binary",
    )]
    pub opt_data_binary: Option<String>,
    /// http post data  '@' allowed
    #[argh(
        option,
        long = "data-raw",
    )]
    pub opt_data_raw: Option<String>,
    /// http post data url encoded
    #[argh(
        option,
        long = "data-urlencode",
    )]
    pub opt_data_urlencode: Option<String>,
    /// gss-api delegation permission
    #[argh(
        option,
        long = "delegation",
    )]
    pub opt_delegation: Option<String>,
    /// use http digest authentication
    #[argh(
        switch,
        long = "digest",
    )]
    pub flg_digest: bool,
    /// disable .curlrc
    #[argh(
        switch,
        short = 'q',
        long = "disable",
    )]
    pub flg_disable: bool,
    /// inhibit using eprt or lprt
    #[argh(
        switch,
        long = "disable-eprt",
    )]
    pub flg_disable_eprt: bool,
    /// inhibit using epsv
    #[argh(
        switch,
        long = "disable-epsv",
    )]
    pub flg_disable_epsv: bool,
    /// disallow username in url
    #[argh(
        switch,
        long = "disallow-username-in-url",
    )]
    pub flg_disallow_username_in_url: bool,
    /// interface to use for dns requests
    #[argh(
        option,
        long = "dns-interface",
    )]
    pub opt_dns_interface: Option<String>,
    /// ipv4 address to use for dns requests
    #[argh(
        option,
        long = "dns-ipvfour-addr",
    )]
    pub opt_dns_ipv4_addr: Option<String>,
    /// ipv6 address to use for dns requests
    #[argh(
        option,
        long = "dns-ipvsix-addr",
    )]
    pub opt_dns_ipv6_addr: Option<String>,
    /// dns server addrs to use
    #[argh(
        option,
        long = "dns-servers",
    )]
    pub opt_dns_servers: Option<String>,
    /// resolve host names over doh
    #[argh(
        option,
        long = "doh-url",
    )]
    pub opt_doh_url: Option<String>,
    /// write the received headers to <filename>
    #[argh(
        option,
        short = 'D',
        long = "dump-header",
    )]
    pub opt_dump_header: Option<String>,
    /// egd socket path for random data
    #[argh(
        option,
        long = "egd-file",
    )]
    pub opt_egd_file: Option<String>,
    /// crypto engine to use
    #[argh(
        option,
        long = "engine",
    )]
    pub opt_engine: Option<String>,
    /// get an etag from response header and save it to a file
    #[argh(
        option,
        long = "etag-save",
    )]
    pub opt_etag_save: Option<String>,
    /// get an etag from a file and send a conditional request
    #[argh(
        option,
        long = "etag-compare",
    )]
    pub opt_etag_compare: Option<String>,
    /// how long to wait for 100-continue
    #[argh(
        option,
        long = "expecthandreds-timeout",
    )]
    pub opt_expect100_timeout: Option<u32>,
    /// fail silently (no output at all) on http errors
    #[argh(
        switch,
        short = 'f',
        long = "fail",
    )]
    pub flg_fail: bool,
    /// fail on first transfer error  do not continue
    #[argh(
        switch,
        long = "fail-early",
    )]
    pub flg_fail_early: bool,
    /// enable tls false start
    #[argh(
        switch,
        long = "false-start",
    )]
    pub flg_false_start: bool,
    /// specify multipart mime data
    #[argh(
        option,
        short = 'F',
        long = "form",
    )]
    pub opt_form: Option<String>,
    /// specify multipart mime data
    #[argh(
        option,
        long = "form-string",
    )]
    pub opt_form_string: Option<String>,
    /// account data string
    #[argh(
        option,
        long = "ftp-account",
    )]
    pub opt_ftp_account: Option<String>,
    /// string to replace user [name]
    #[argh(
        option,
        long = "ftp-alternative-to-user",
    )]
    pub opt_ftp_alternative_to_user: Option<String>,
    /// create the remote dirs if not present
    #[argh(
        switch,
        long = "ftp-create-dirs",
    )]
    pub flg_ftp_create_dirs: bool,
    /// control cwd usage
    #[argh(
        option,
        long = "ftp-method",
    )]
    pub opt_ftp_method: Option<String>,
    /// use pasv/epsv instead of port
    #[argh(
        switch,
        long = "ftp-pasv",
    )]
    pub flg_ftp_pasv: bool,
    /// use port instead of pasv
    #[argh(
        option,
        short = 'P',
        long = "ftp-port",
    )]
    pub opt_ftp_port: Option<String>,
    /// send pret before pasv
    #[argh(
        switch,
        long = "ftp-pret",
    )]
    pub flg_ftp_pret: bool,
    /// skip the ip address for pasv
    #[argh(
        switch,
        long = "ftp-skip-pasv-ip",
    )]
    pub flg_ftp_skip_pasv_ip: bool,
    /// send ccc after authenticating
    #[argh(
        switch,
        long = "ftp-ssl-ccc",
    )]
    pub flg_ftp_ssl_ccc: bool,
    /// set ccc mode
    #[argh(
        option,
        long = "ftp-ssl-ccc-mode",
    )]
    pub opt_ftp_ssl_ccc_mode: Option<String>,
    /// require ssl/tls for ftp login  clear for transfer
    #[argh(
        switch,
        long = "ftp-ssl-control",
    )]
    pub flg_ftp_ssl_control: bool,
    /// put the post data in the url and use get
    #[argh(
        switch,
        short = 'G',
        long = "get",
    )]
    pub flg_get: bool,
    /// disable url sequences and ranges using {} and []
    #[argh(
        switch,
        short = 'g',
        long = "globoff",
    )]
    pub flg_globoff: bool,
    /// how long to wait in milliseconds for ipv6 before trying ipv4
    #[argh(
        option,
        long = "happy-eyeballs-timeout-ms",
    )]
    pub opt_happy_eyeballs_timeout_ms: Option<u64>,
    /// send haproxy proxy protocol v1 header
    #[argh(
        switch,
        long = "haproxy-protocol",
    )]
    pub flg_haproxy_protocol: bool,
    /// show document info only
    #[argh(
        switch,
        short = 'I',
        long = "head",
    )]
    pub flg_head: bool,
    /// pass custom header(s) to server
    #[argh(
        option,
        long = "header",
    )]
    pub opt_header: Option<String>,
    /// acceptable md5 hash of the host public key
    #[argh(
        option,
        long = "hostpubmdfive",
    )]
    pub opt_hostpubmd5: Option<String>,
    /// allow http 0.9 responses
    #[argh(
        switch,
        long = "httponine",
    )]
    pub flg_http0_9: bool,
    /// use http 1.0
    #[argh(
        switch,
        short = '0',
        long = "httponepzero",
    )]
    pub flg_http1_0: bool,
    /// use http 1.1
    #[argh(
        switch,
        long = "httponepone",
    )]
    pub flg_http1_1: bool,
    /// use http 2
    #[argh(
        switch,
        long = "httptwo",
    )]
    pub flg_http2: bool,
    /// use http 2 without http/1.1 upgrade
    #[argh(
        switch,
        long = "httptwo-prior-knowledge",
    )]
    pub flg_http2_prior_knowledge: bool,
    /// use http v3
    #[argh(
        switch,
        long = "httpthree",
    )]
    pub flg_http3: bool,
    /// ignore the size of the remote resource
    #[argh(
        switch,
        long = "ignore-content-length",
    )]
    pub flg_ignore_content_length: bool,
    /// include protocol response headers in the output
    #[argh(
        switch,
        short = 'i',
        long = "include",
    )]
    pub flg_include: bool,
    /// allow insecure server connections when using ssl
    #[argh(
        switch,
        short = 'k',
        long = "insecure",
    )]
    pub flg_insecure: bool,
    /// use network interface (or address)
    #[argh(
        option,
        long = "interface",
    )]
    pub opt_interface: Option<String>,
    /// resolve names to ipv4 addresses
    #[argh(
        switch,
        short = '4',
        long = "ipvfour",
    )]
    pub flg_ipv4: bool,
    /// resolve names to ipv6 addresses
    #[argh(
        switch,
        short = '6',
        long = "ipvsix",
    )]
    pub flg_ipv6: bool,
    /// ignore session cookies read from file
    #[argh(
        switch,
        short = 'j',
        long = "junk-session-cookies",
    )]
    pub flg_junk_session_cookies: bool,
    /// interval time for keepalive probes
    #[argh(
        option,
        long = "keepalive-time",
    )]
    pub opt_keepalive_time: Option<u32>,
    /// private key file name
    #[argh(
        option,
        long = "key",
    )]
    pub opt_key: Option<String>,
    /// private key file type (der/pem/eng)
    #[argh(
        option,
        long = "key-type",
    )]
    pub opt_key_type: Option<String>,
    /// enable kerberos with security <level>
    #[argh(
        option,
        long = "krb",
    )]
    pub opt_krb: Option<String>,
    /// dump libcurl equivalent code of this command line
    #[argh(
        option,
        long = "libcurl",
    )]
    pub opt_libcurl: Option<String>,
    /// limit transfer speed to rate
    #[argh(
        option,
        long = "limit-rate",
    )]
    pub opt_limit_rate: Option<u64>,
    /// list only mode
    #[argh(
        switch,
        short = 'l',
        long = "list-only",
    )]
    pub flg_list_only: bool,
    /// force use of range for local port numbers
    #[argh(
        option,
        long = "local-port",
    )]
    pub opt_local_port: Option<String>,
    /// follow redirects
    #[argh(
        switch,
        short = 'L',
        long = "location",
    )]
    pub flg_location: bool,
    /// like --location  and send auth to other hosts
    #[argh(
        switch,
        long = "location-trusted",
    )]
    pub flg_location_trusted: bool,
    /// server login options
    #[argh(
        option,
        long = "login-options",
    )]
    pub opt_login_options: Option<String>,
    /// originator address of the original email
    #[argh(
        option,
        long = "mail-auth",
    )]
    pub opt_mail_auth: Option<String>,
    /// mail from this address
    #[argh(
        option,
        long = "mail-from",
    )]
    pub opt_mail_from: Option<String>,
    /// mail to this address
    #[argh(
        option,
        long = "mail-rcpt",
    )]
    pub opt_mail_rcpt: Option<String>,
    /// display the full manual
    #[argh(
        switch,
        short = 'M',
        long = "manual",
    )]
    pub flg_manual: bool,
    /// maximum file size to download
    #[argh(
        option,
        long = "max-filesize",
    )]
    pub opt_max_filesize: Option<u64>,
    /// maximum number of redirects allowed
    #[argh(
        option,
        long = "max-redirs",
    )]
    pub opt_max_redirs: Option<u32>,
    /// maximum time allowed for the transfer
    #[argh(
        option,
        short = 'm',
        long = "max-time",
    )]
    pub opt_max_time: Option<u32>,
    /// process given urls as metalink xml file
    #[argh(
        switch,
        long = "metalink",
    )]
    pub flg_metalink: bool,
    /// use http negotiate (spnego) authentication
    #[argh(
        switch,
        long = "negotiate",
    )]
    pub flg_negotiate: bool,
    /// must read .netrc for user name and password
    #[argh(
        switch,
        short = 'n',
        long = "netrc",
    )]
    pub flg_netrc: bool,
    /// specify file for netrc
    #[argh(
        option,
        long = "netrc-file",
    )]
    pub opt_netrc_file: Option<String>,
    /// use either .netrc or url
    #[argh(
        switch,
        long = "netrc-optional",
    )]
    pub flg_netrc_optional: bool,
    /// make next url use its separate set of options
    #[argh(
        switch,
        short = ':',
        long = "next",
    )]
    pub flg_next: bool,
    /// disable the alpn tls extension
    #[argh(
        switch,
        long = "no-alpn",
    )]
    pub flg_no_alpn: bool,
    /// disable buffering of the output stream
    #[argh(
        switch,
        short = 'N',
        long = "no-buffer",
    )]
    pub flg_no_buffer: bool,
    /// disable tcp keepalive on the connection
    #[argh(
        switch,
        long = "no-keepalive",
    )]
    pub flg_no_keepalive: bool,
    /// disable the npn tls extension
    #[argh(
        switch,
        long = "no-npn",
    )]
    pub flg_no_npn: bool,
    /// do not show the progress meter
    #[argh(
        switch,
        long = "no-progress-meter",
    )]
    pub flg_no_progress_meter: bool,
    /// disable ssl session-id reusing
    #[argh(
        switch,
        long = "no-sessionid",
    )]
    pub flg_no_sessionid: bool,
    /// list of hosts which do not use proxy
    #[argh(
        option,
        long = "noproxy",
    )]
    pub opt_noproxy: Option<String>,
    /// use http ntlm authentication
    #[argh(
        switch,
        long = "ntlm",
    )]
    pub flg_ntlm: bool,
    /// use http ntlm authentication with winbind
    #[argh(
        switch,
        long = "ntlm-wb",
    )]
    pub flg_ntlm_wb: bool,
    /// oauth 2 bearer token
    #[argh(
        option,
        long = "oauthtwo-bearer",
    )]
    pub opt_oauth2_bearer: Option<String>,
    /// write to file instead of stdout
    #[argh(
        option,
        short = 'o',
        long = "output",
    )]
    pub opt_output: Option<String>,
    /// perform transfers in parallel
    #[argh(
        switch,
        short = 'Z',
        long = "parallel",
    )]
    pub flg_parallel: bool,
    /// do not wait for multiplexing (with --parallel)
    #[argh(
        switch,
        long = "parallel-immediate",
    )]
    pub flg_parallel_immediate: bool,
    /// maximum concurrency for parallel transfers
    #[argh(
        switch,
        long = "parallel-max",
    )]
    pub flg_parallel_max: bool,
    /// pass phrase for the private key
    #[argh(
        option,
        long = "pass",
    )]
    pub opt_pass: Option<String>,
    /// do not squash .. sequences in url path
    #[argh(
        switch,
        long = "path-as-is",
    )]
    pub flg_path_as_is: bool,
    /// file/hashes public key to verify peer against
    #[argh(
        option,
        long = "pinnedpubkey",
    )]
    pub opt_pinnedpubkey: Option<String>,
    /// do not switch to get after following a 301
    #[argh(
        switch,
        long = "postthreezeroone",
    )]
    pub flg_post301: bool,
    /// do not switch to get after following a 302
    #[argh(
        switch,
        long = "postthreezerotwo",
    )]
    pub flg_post302: bool,
    /// do not switch to get after following a 303
    #[argh(
        switch,
        long = "postthreezerothree",
    )]
    pub flg_post303: bool,
    /// use this proxy first
    #[argh(
        option,
        long = "preproxy",
    )]
    pub opt_preproxy: Option<String>,
    /// display transfer progress as a bar
    #[argh(
        switch,
        short = '#',
        long = "progress-bar",
    )]
    pub flg_progress_bar: bool,
    /// enable/disable protocols
    #[argh(
        option,
        long = "proto",
    )]
    pub opt_proto: Option<String>,
    /// use protocol for any url missing a scheme
    #[argh(
        option,
        long = "proto-default",
    )]
    pub opt_proto_default: Option<String>,
    /// enable/disable protocols on redirect
    #[argh(
        option,
        long = "proto-redir",
    )]
    pub opt_proto_redir: Option<String>,
    /// use this proxy
    #[argh(
        option,
        short = 'x',
        long = "proxy",
    )]
    pub opt_proxy: Option<String>,
    /// pick any proxy authentication method
    #[argh(
        switch,
        long = "proxy-anyauth",
    )]
    pub flg_proxy_anyauth: bool,
    /// use basic authentication on the proxy
    #[argh(
        switch,
        long = "proxy-basic",
    )]
    pub flg_proxy_basic: bool,
    /// ca certificate to verify peer against for proxy
    #[argh(
        option,
        long = "proxy-cacert",
    )]
    pub opt_proxy_cacert: Option<String>,
    /// ca directory to verify peer against for proxy
    #[argh(
        option,
        long = "proxy-capath",
    )]
    pub opt_proxy_capath: Option<String>,
    /// set client certificate for proxy
    #[argh(
        option,
        long = "proxy-cert",
    )]
    pub opt_proxy_cert: Option<String>,
    /// client certificate type for https proxy
    #[argh(
        option,
        long = "proxy-cert-type",
    )]
    pub opt_proxy_cert_type: Option<String>,
    /// ssl ciphers to use for proxy
    #[argh(
        option,
        long = "proxy-ciphers",
    )]
    pub opt_proxy_ciphers: Option<String>,
    /// set a crl list for proxy
    #[argh(
        option,
        long = "proxy-crlfile",
    )]
    pub opt_proxy_crlfile: Option<String>,
    /// use digest authentication on the proxy
    #[argh(
        switch,
        long = "proxy-digest",
    )]
    pub flg_proxy_digest: bool,
    /// pass custom header(s) to proxy
    #[argh(
        option,
        long = "proxy-header",
    )]
    pub opt_proxy_header: Option<String>,
    /// do https proxy connections without verifying the proxy
    #[argh(
        switch,
        long = "proxy-insecure",
    )]
    pub flg_proxy_insecure: bool,
    /// private key for https proxy
    #[argh(
        option,
        long = "proxy-key",
    )]
    pub opt_proxy_key: Option<String>,
    /// private key file type for proxy
    #[argh(
        option,
        long = "proxy-key-type",
    )]
    pub opt_proxy_key_type: Option<String>,
    /// use http negotiate (spnego) authentication on the proxy
    #[argh(
        switch,
        long = "proxy-negotiate",
    )]
    pub flg_proxy_negotiate: bool,
    /// use ntlm authentication on the proxy
    #[argh(
        switch,
        long = "proxy-ntlm",
    )]
    pub flg_proxy_ntlm: bool,
    /// pass phrase for the private key for https proxy
    #[argh(
        option,
        long = "proxy-pass",
    )]
    pub opt_proxy_pass: Option<String>,
    /// file/hashes public key to verify proxy with
    #[argh(
        option,
        long = "proxy-pinnedpubkey",
    )]
    pub opt_proxy_pinnedpubkey: Option<String>,
    /// spnego proxy service name
    #[argh(
        option,
        long = "proxy-service-name",
    )]
    pub opt_proxy_service_name: Option<String>,
    /// allow security flaw for interop for https proxy
    #[argh(
        switch,
        long = "proxy-ssl-allow-beast",
    )]
    pub flg_proxy_ssl_allow_beast: bool,
    /// tls 1.3 ciphersuites for proxy (openssl)
    #[argh(
        option,
        long = "proxy-tlsonethree-ciphers",
    )]
    pub opt_proxy_tls13_ciphers: Option<String>,
    /// tls authentication type for https proxy
    #[argh(
        option,
        long = "proxy-tlsauthtype",
    )]
    pub opt_proxy_tlsauthtype: Option<String>,
    /// tls password for https proxy
    #[argh(
        option,
        long = "proxy-tlspassword",
    )]
    pub opt_proxy_tlspassword: Option<String>,
    /// tls username for https proxy
    #[argh(
        option,
        long = "proxy-tlsuser",
    )]
    pub opt_proxy_tlsuser: Option<String>,
    /// use tlsv1 for https proxy
    #[argh(
        switch,
        long = "proxy-tlsvone",
    )]
    pub flg_proxy_tlsv1: bool,
    /// proxy user and password
    #[argh(
        option,
        short = 'U',
        long = "proxy-user",
    )]
    pub opt_proxy_user: Option<String>,
    /// use http/1.0 proxy on given port
    #[argh(
        option,
        long = "proxyonepzero",
    )]
    pub opt_proxy1_0: Option<String>,
    /// operate through an http proxy tunnel (using connect)
    #[argh(
        switch,
        short = 'p',
        long = "proxytunnel",
    )]
    pub flg_proxytunnel: bool,
    /// ssh public key file name
    #[argh(
        option,
        long = "pubkey",
    )]
    pub opt_pubkey: Option<String>,
    /// send command(s) to server before transfer
    #[argh(
        switch,
        short = 'Q',
        long = "quote",
    )]
    pub flg_quote: bool,
    /// file for reading random data from
    #[argh(
        option,
        long = "random-file",
    )]
    pub opt_random_file: Option<String>,
    /// retrieve only the bytes within range
    #[argh(
        option,
        short = 'r',
        long = "range",
    )]
    pub opt_range: Option<String>,
    /// do http 'raw'; no transfer decoding
    #[argh(
        switch,
        long = "raw",
    )]
    pub flg_raw: bool,
    /// referrer url
    #[argh(
        option,
        short = 'e',
        long = "referer",
    )]
    pub opt_referer: Option<String>,
    /// use the header-provided filename
    #[argh(
        switch,
        short = 'J',
        long = "remote-header-name",
    )]
    pub flg_remote_header_name: bool,
    /// write output to a file named as the remote file
    #[argh(
        switch,
        short = 'O',
        long = "remote-name",
    )]
    pub flg_remote_name: bool,
    /// use the remote file name for all urls
    #[argh(
        switch,
        long = "remote-name-all",
    )]
    pub flg_remote_name_all: bool,
    /// set the remote file's time on the local output
    #[argh(
        switch,
        short = 'R',
        long = "remote-time",
    )]
    pub flg_remote_time: bool,
    /// specify request command to use
    #[argh(
        option,
        short = 'X',
        long = "request",
    )]
    pub opt_request: Option<String>,
    /// specify the target for this request
    #[argh(
        switch,
        long = "request-target",
    )]
    pub flg_request_target: bool,
    /// resolve the host+port to this address
    #[argh(
        option,
        long = "resolve",
    )]
    pub opt_resolve: Option<String>,
    /// retry request if transient problems occur
    #[argh(
        option,
        long = "retry",
    )]
    pub opt_retry: Option<u32>,
    /// retry on connection refused (use with --retry)
    #[argh(
        switch,
        long = "retry-connrefused",
    )]
    pub flg_retry_connrefused: bool,
    /// wait time between retries
    #[argh(
        option,
        long = "retry-delay",
    )]
    pub opt_retry_delay: Option<u32>,
    /// retry only within this period
    #[argh(
        option,
        long = "retry-max-time",
    )]
    pub opt_retry_max_time: Option<u32>,
    /// use this identity to act as during sasl plain authentication
    #[argh(
        option,
        long = "sasl-authzid",
    )]
    pub opt_sasl_authzid: Option<String>,
    /// enable initial response in sasl authentication
    #[argh(
        switch,
        long = "sasl-ir",
    )]
    pub flg_sasl_ir: bool,
    /// spnego service name
    #[argh(
        option,
        long = "service-name",
    )]
    pub opt_service_name: Option<String>,
    /// show error even when -s is used
    #[argh(
        switch,
        short = 'S',
        long = "show-error",
    )]
    pub flg_show_error: bool,
    /// silent mode
    #[argh(
        switch,
        short = 's',
        long = "silent",
    )]
    pub flg_silent: bool,
    /// socks4 proxy on given host + port
    #[argh(
        option,
        long = "socksfour",
    )]
    pub opt_socks4: Option<String>,
    /// socks4a proxy on given host + port
    #[argh(
        option,
        long = "socksfoura",
    )]
    pub opt_socks4a: Option<String>,
    /// socks5 proxy on given host + port
    #[argh(
        option,
        long = "socksfive",
    )]
    pub opt_socks5: Option<String>,
    /// enable username/password auth for socks5 proxies
    #[argh(
        switch,
        long = "socksfive-basic",
    )]
    pub flg_socks5_basic: bool,
    /// enable gss-api auth for socks5 proxies
    #[argh(
        switch,
        long = "socksfive-gssapi",
    )]
    pub flg_socks5_gssapi: bool,
    /// compatibility with nec socks5 server
    #[argh(
        switch,
        long = "socksfive-gssapi-nec",
    )]
    pub flg_socks5_gssapi_nec: bool,
    /// socks5 proxy service name for gss-api
    #[argh(
        option,
        long = "socksfive-gssapi-service",
    )]
    pub opt_socks5_gssapi_service: Option<String>,
    /// socks5 proxy  pass host name to proxy
    #[argh(
        option,
        long = "socksfive-hostname",
    )]
    pub opt_socks5_hostname: Option<String>,
    /// stop transfers slower than this
    #[argh(
        option,
        short = 'Y',
        long = "speed-limit",
    )]
    pub opt_speed_limit: Option<u64>,
    /// trigger 'speed-limit' abort after this time
    #[argh(
        option,
        short = 'y',
        long = "speed-time",
    )]
    pub opt_speed_time: Option<u32>,
    /// try ssl/tls
    #[argh(
        switch,
        long = "ssl",
    )]
    pub flg_ssl: bool,
    /// allow security flaw to improve interop
    #[argh(
        switch,
        long = "ssl-allow-beast",
    )]
    pub flg_ssl_allow_beast: bool,
    /// disable cert revocation checks (schannel)
    #[argh(
        switch,
        long = "ssl-no-revoke",
    )]
    pub flg_ssl_no_revoke: bool,
    /// require ssl/tls
    #[argh(
        switch,
        long = "ssl-reqd",
    )]
    pub flg_ssl_reqd: bool,
    /// use sslv2
    #[argh(
        switch,
        short = '2',
        long = "sslvtwo",
    )]
    pub flg_sslv2: bool,
    /// use sslv3
    #[argh(
        switch,
        short = '3',
        long = "sslvthree",
    )]
    pub flg_sslv3: bool,
    /// where to redirect stderr
    #[argh(
        switch,
        long = "stderr",
    )]
    pub flg_stderr: bool,
    /// enable styled output for http headers
    #[argh(
        switch,
        long = "styled-output",
    )]
    pub flg_styled_output: bool,
    /// suppress proxy connect response headers
    #[argh(
        switch,
        long = "suppress-connect-headers",
    )]
    pub flg_suppress_connect_headers: bool,
    /// use tcp fast open
    #[argh(
        switch,
        long = "tcp-fastopen",
    )]
    pub flg_tcp_fastopen: bool,
    /// use the tcp_nodelay option
    #[argh(
        switch,
        long = "tcp-nodelay",
    )]
    pub flg_tcp_nodelay: bool,
    /// set telnet option
    #[argh(
        option,
        short = 't',
        long = "telnet-option",
    )]
    pub opt_telnet_option: Option<String>,
    /// set tftp blksize option
    #[argh(
        option,
        long = "tftp-blksize",
    )]
    pub opt_tftp_blksize: Option<u32>,
    /// do not send any tftp options
    #[argh(
        switch,
        long = "tftp-no-options",
    )]
    pub flg_tftp_no_options: bool,
    /// transfer based on a time condition
    #[argh(
        option,
        short = 'z',
        long = "time-cond",
    )]
    pub opt_time_cond: Option<String>,
    /// set maximum allowed tls version
    #[argh(
        option,
        long = "tls-max",
    )]
    pub opt_tls_max: Option<String>,
    /// tls 1.3 ciphersuites (openssl)
    #[argh(
        option,
        long = "tlsonethree-ciphers",
    )]
    pub opt_tls13_ciphers: Option<String>,
    /// tls authentication type
    #[argh(
        option,
        long = "tlsauthtype",
    )]
    pub opt_tlsauthtype: Option<String>,
    /// tls password
    #[argh(
        switch,
        long = "tlspassword",
    )]
    pub flg_tlspassword: bool,
    /// tls user name
    #[argh(
        option,
        long = "tlsuser",
    )]
    pub opt_tlsuser: Option<String>,
    /// use tlsv1.0 or greater
    #[argh(
        switch,
        short = '1',
        long = "tlsvone",
    )]
    pub flg_tlsv1: bool,
    /// use tlsv1.0 or greater
    #[argh(
        switch,
        long = "tlsvonepzero",
    )]
    pub flg_tlsv1_0: bool,
    /// use tlsv1.1 or greater
    #[argh(
        switch,
        long = "tlsvonepone",
    )]
    pub flg_tlsv1_1: bool,
    /// use tlsv1.2 or greater
    #[argh(
        switch,
        long = "tlsvoneptwo",
    )]
    pub flg_tlsv1_2: bool,
    /// use tlsv1.3 or greater
    #[argh(
        switch,
        long = "tlsvonepthree",
    )]
    pub flg_tlsv1_3: bool,
    /// request compressed transfer encoding
    #[argh(
        switch,
        long = "tr-encoding",
    )]
    pub flg_tr_encoding: bool,
    /// write a debug trace to file
    #[argh(
        option,
        long = "trace",
    )]
    pub opt_trace: Option<String>,
    /// like --trace  but without hex output
    #[argh(
        option,
        long = "trace-ascii",
    )]
    pub opt_trace_ascii: Option<String>,
    /// add time stamps to trace/verbose output
    #[argh(
        switch,
        long = "trace-time",
    )]
    pub flg_trace_time: bool,
    /// connect through this unix domain socket
    #[argh(
        option,
        long = "unix-socket",
    )]
    pub opt_unix_socket: Option<String>,
    /// transfer local file to destination
    #[argh(
        option,
        short = 'T',
        long = "upload-file",
    )]
    pub opt_upload_file: Option<String>,
    /// url to work with
    #[argh(
        option,
        long = "url",
    )]
    pub opt_url: Option<String>,
    /// use ascii/text transfer
    #[argh(
        switch,
        short = 'B',
        long = "use-ascii",
    )]
    pub flg_use_ascii: bool,
    /// server user and password
    #[argh(
        option,
        short = 'u',
        long = "user",
    )]
    pub opt_user: Option<String>,
    /// send user-agent <name> to server
    #[argh(
        option,
        short = 'A',
        long = "user-agent",
    )]
    pub opt_user_agent: Option<String>,
    /// make the operation more talkative
    #[argh(
        switch,
        short = 'v',
        long = "verbose",
    )]
    pub flg_verbose: bool,
    /// use output format after completion
    #[argh(
        option,
        short = 'w',
        long = "write-out",
    )]
    pub opt_write_out: Option<String>,
    /// store metadata in extended file attributes
    #[argh(
        switch,
        long = "xattr",
    )]
    pub flg_xattr: bool,

    #[argh(positional)]
    arg_input: String,
}
