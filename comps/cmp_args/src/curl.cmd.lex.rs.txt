// WARN: This file is auto generated by cmp_args_xtask
{
    aargs.option("", "abstract-unix-socket", "Connect via abstract Unix domain socket", "<>", Occur::Optional,None);
    aargs.option("", "alt-svc", "Enable alt-svc with this cache file", "<>", Occur::Optional,None);
    aargs.flag("", "anyauth", "Pick any authentication method");
    aargs.flag("a", "append", "Append to target file when uploading");
    aargs.flag("", "basic", "Use HTTP Basic Authentication");
    aargs.option("", "cacert", "CA certificate to verify peer against", "<>", Occur::Optional,None);
    aargs.option("", "capath", "CA directory to verify peer against", "<>", Occur::Optional,None);
    aargs.option("E", "cert", "Client certificate file and password", "<>", Occur::Optional,None);
    aargs.flag("", "cert-status", "Verify the status of the server certificate");
    aargs.option("", "cert-type", "Certificate file type (DER/PEM/ENG)", "<>", Occur::Optional,None);
    aargs.option("", "ciphers", "SSL ciphers to use", "<>", Occur::Optional,None);
    aargs.flag("", "compressed", "Request compressed response");
    aargs.flag("", "compressed-ssh", "Enable SSH compression");
    aargs.option("K", "config", "Read config from a file", "<>", Occur::Optional,None);
    aargs.option("", "connect-timeout", "Maximum time allowed for connection", "<>", Occur::Optional,None);
    aargs.option("", "connect-to", "Connect to host", "<>", Occur::Optional,None);
    aargs.option("C", "continue-at", "Resumed transfer offset", "<>", Occur::Optional,None);
    aargs.option("b", "cookie", "Send cookies from string/file", "<>", Occur::Optional,None);
    aargs.option("c", "cookie-jar", "Write cookies to <filename> after operation", "<>", Occur::Optional,None);
    aargs.flag("", "create-dirs", "Create necessary local directory hierarchy");
    aargs.flag("", "crlf", "Convert LF to CRLF in upload");
    aargs.option("", "crlfile", "Get a CRL list in PEM format from the given file", "<>", Occur::Optional,None);
    aargs.option("d", "data", "HTTP POST data", "<>", Occur::Optional,None);
    aargs.option("", "data-ascii", "HTTP POST ASCII data", "<>", Occur::Optional,None);
    aargs.option("", "data-binary", "HTTP POST binary data", "<>", Occur::Optional,None);
    aargs.option("", "data-raw", "HTTP POST data  '@' allowed", "<>", Occur::Optional,None);
    aargs.option("", "data-urlencode", "HTTP POST data url encoded", "<>", Occur::Optional,None);
    aargs.option("", "delegation", "GSS-API delegation permission", "<>", Occur::Optional,None);
    aargs.flag("", "digest", "Use HTTP Digest Authentication");
    aargs.flag("q", "disable", "Disable .curlrc");
    aargs.flag("", "disable-eprt", "Inhibit using EPRT or LPRT");
    aargs.flag("", "disable-epsv", "Inhibit using EPSV");
    aargs.flag("", "disallow-username-in-url", "Disallow username in url");
    aargs.option("", "dns-interface", "Interface to use for DNS requests", "<>", Occur::Optional,None);
    aargs.option("", "dns-ipv4-addr", "IPv4 address to use for DNS requests", "<>", Occur::Optional,None);
    aargs.option("", "dns-ipv6-addr", "IPv6 address to use for DNS requests", "<>", Occur::Optional,None);
    aargs.option("", "dns-servers", "DNS server addrs to use", "<>", Occur::Optional,None);
    aargs.option("", "doh-url", "Resolve host names over DOH", "<>", Occur::Optional,None);
    aargs.option("D", "dump-header", "Write the received headers to <filename>", "<>", Occur::Optional,None);
    aargs.option("", "egd-file", "EGD socket path for random data", "<>", Occur::Optional,None);
    aargs.option("", "engine", "Crypto engine to use", "<>", Occur::Optional,None);
    aargs.option("", "etag-save", "Get an ETag from response header and save it to a FILE", "<>", Occur::Optional,None);
    aargs.option("", "etag-compare", "Get an ETag from a file and send a conditional request", "<>", Occur::Optional,None);
    aargs.option("", "expect100-timeout", "How long to wait for 100-continue", "<>", Occur::Optional,None);
    aargs.flag("f", "fail", "Fail silently (no output at all) on HTTP errors");
    aargs.flag("", "fail-early", "Fail on first transfer error  do not continue");
    aargs.flag("", "false-start", "Enable TLS False Start");
    aargs.option("F", "form", "Specify multipart MIME data", "<>", Occur::Optional,None);
    aargs.option("", "form-string", "Specify multipart MIME data", "<>", Occur::Optional,None);
    aargs.option("", "ftp-account", "Account data string", "<>", Occur::Optional,None);
    aargs.option("", "ftp-alternative-to-user", "String to replace USER [name]", "<>", Occur::Optional,None);
    aargs.flag("", "ftp-create-dirs", "Create the remote dirs if not present");
    aargs.option("", "ftp-method", "Control CWD usage", "<>", Occur::Optional,None);
    aargs.flag("", "ftp-pasv", "Use PASV/EPSV instead of PORT");
    aargs.option("P", "ftp-port", "Use PORT instead of PASV", "<>", Occur::Optional,None);
    aargs.flag("", "ftp-pret", "Send PRET before PASV");
    aargs.flag("", "ftp-skip-pasv-ip", "Skip the IP address for PASV");
    aargs.flag("", "ftp-ssl-ccc", "Send CCC after authenticating");
    aargs.option("", "ftp-ssl-ccc-mode", "Set CCC mode", "<>", Occur::Optional,None);
    aargs.flag("", "ftp-ssl-control", "Require SSL/TLS for FTP login  clear for transfer");
    aargs.flag("G", "get", "Put the post data in the URL and use GET");
    aargs.flag("g", "globoff", "Disable URL sequences and ranges using {} and []");
    aargs.option("", "happy-eyeballs-timeout-ms", "How long to wait in milliseconds for IPv6 before trying IPv4", "<>", Occur::Optional,None);
    aargs.flag("", "haproxy-protocol", "Send HAProxy PROXY protocol v1 header");
    aargs.flag("I", "head", "Show document info only");
    aargs.option("h", "header", "Pass custom header(s) to server", "<>", Occur::Optional,None);
    aargs.option("", "hostpubmd5", "Acceptable MD5 hash of the host public key", "<>", Occur::Optional,None);
    aargs.flag("", "http0.9", "Allow HTTP 0.9 responses");
    aargs.flag("0", "http1.0", "Use HTTP 1.0");
    aargs.flag("", "http1.1", "Use HTTP 1.1");
    aargs.flag("", "http2", "Use HTTP 2");
    aargs.flag("", "http2-prior-knowledge", "Use HTTP 2 without HTTP/1.1 Upgrade");
    aargs.flag("", "http3", "Use HTTP v3");
    aargs.flag("", "ignore-content-length", "Ignore the size of the remote resource");
    aargs.flag("i", "include", "Include protocol response headers in the output");
    aargs.flag("k", "insecure", "Allow insecure server connections when using SSL");
    aargs.option("", "interface", "Use network INTERFACE (or address)", "<>", Occur::Optional,None);
    aargs.flag("4", "ipv4", "Resolve names to IPv4 addresses");
    aargs.flag("6", "ipv6", "Resolve names to IPv6 addresses");
    aargs.flag("j", "junk-session-cookies", "Ignore session cookies read from file");
    aargs.option("", "keepalive-time", "Interval time for keepalive probes", "<>", Occur::Optional,None);
    aargs.option("", "key", "Private key file name", "<>", Occur::Optional,None);
    aargs.option("", "key-type", "Private key file type (DER/PEM/ENG)", "<>", Occur::Optional,None);
    aargs.option("", "krb", "Enable Kerberos with security <level>", "<>", Occur::Optional,None);
    aargs.option("", "libcurl", "Dump libcurl equivalent code of this command line", "<>", Occur::Optional,None);
    aargs.option("", "limit-rate", "Limit transfer speed to RATE", "<>", Occur::Optional,None);
    aargs.flag("l", "list-only", "List only mode");
    aargs.option("", "local-port", "Force use of RANGE for local port numbers", "<>", Occur::Optional,None);
    aargs.flag("L", "location", "Follow redirects");
    aargs.flag("", "location-trusted", "Like --location  and send auth to other hosts");
    aargs.option("", "login-options", "Server login options", "<>", Occur::Optional,None);
    aargs.option("", "mail-auth", "Originator address of the original email", "<>", Occur::Optional,None);
    aargs.option("", "mail-from", "Mail from this address", "<>", Occur::Optional,None);
    aargs.option("", "mail-rcpt", "Mail to this address", "<>", Occur::Optional,None);
    aargs.flag("M", "manual", "Display the full manual");
    aargs.option("", "max-filesize", "Maximum file size to download", "<>", Occur::Optional,None);
    aargs.option("", "max-redirs", "Maximum number of redirects allowed", "<>", Occur::Optional,None);
    aargs.option("m", "max-time", "Maximum time allowed for the transfer", "<>", Occur::Optional,None);
    aargs.flag("", "metalink", "Process given URLs as metalink XML file");
    aargs.flag("", "negotiate", "Use HTTP Negotiate (SPNEGO) authentication");
    aargs.flag("n", "netrc", "Must read .netrc for user name and password");
    aargs.option("", "netrc-file", "Specify FILE for netrc", "<>", Occur::Optional,None);
    aargs.flag("", "netrc-optional", "Use either .netrc or URL");
    aargs.flag(":", "next", "Make next URL use its separate set of options");
    aargs.flag("", "no-alpn", "Disable the ALPN TLS extension");
    aargs.flag("N", "no-buffer", "Disable buffering of the output stream");
    aargs.flag("", "no-keepalive", "Disable TCP keepalive on the connection");
    aargs.flag("", "no-npn", "Disable the NPN TLS extension");
    aargs.flag("", "no-progress-meter", "Do not show the progress meter");
    aargs.flag("", "no-sessionid", "Disable SSL session-ID reusing");
    aargs.option("", "noproxy", "List of hosts which do not use proxy", "<>", Occur::Optional,None);
    aargs.flag("", "ntlm", "Use HTTP NTLM authentication");
    aargs.flag("", "ntlm-wb", "Use HTTP NTLM authentication with winbind");
    aargs.option("", "oauth2-bearer", "OAuth 2 Bearer Token", "<>", Occur::Optional,None);
    aargs.option("o", "output", "Write to file instead of stdout", "<>", Occur::Optional,None);
    aargs.flag("Z", "parallel", "Perform transfers in parallel");
    aargs.flag("", "parallel-immediate", "Do not wait for multiplexing (with --parallel)");
    aargs.flag("", "parallel-max", "Maximum concurrency for parallel transfers");
    aargs.option("", "pass", "Pass phrase for the private key", "<>", Occur::Optional,None);
    aargs.flag("", "path-as-is", "Do not squash .. sequences in URL path");
    aargs.option("", "pinnedpubkey", "FILE/HASHES Public key to verify peer against", "<>", Occur::Optional,None);
    aargs.flag("", "post301", "Do not switch to GET after following a 301");
    aargs.flag("", "post302", "Do not switch to GET after following a 302");
    aargs.flag("", "post303", "Do not switch to GET after following a 303");
    aargs.option("", "preproxy", "Use this proxy first", "<>", Occur::Optional,None);
    aargs.flag("#", "progress-bar", "Display transfer progress as a bar");
    aargs.option("", "proto", "Enable/disable PROTOCOLS", "<>", Occur::Optional,None);
    aargs.option("", "proto-default", "Use PROTOCOL for any URL missing a scheme", "<>", Occur::Optional,None);
    aargs.option("", "proto-redir", "Enable/disable PROTOCOLS on redirect", "<>", Occur::Optional,None);
    aargs.option("x", "proxy", "Use this proxy", "<>", Occur::Optional,None);
    aargs.flag("", "proxy-anyauth", "Pick any proxy authentication method");
    aargs.flag("", "proxy-basic", "Use Basic authentication on the proxy");
    aargs.option("", "proxy-cacert", "CA certificate to verify peer against for proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-capath", "CA directory to verify peer against for proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-cert", "Set client certificate for proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-cert-type", "Client certificate type for HTTPS proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-ciphers", "SSL ciphers to use for proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-crlfile", "Set a CRL list for proxy", "<>", Occur::Optional,None);
    aargs.flag("", "proxy-digest", "Use Digest authentication on the proxy");
    aargs.option("", "proxy-header", "Pass custom header(s) to proxy", "<>", Occur::Optional,None);
    aargs.flag("", "proxy-insecure", "Do HTTPS proxy connections without verifying the proxy");
    aargs.option("", "proxy-key", "Private key for HTTPS proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-key-type", "Private key file type for proxy", "<>", Occur::Optional,None);
    aargs.flag("", "proxy-negotiate", "Use HTTP Negotiate (SPNEGO) authentication on the proxy");
    aargs.flag("", "proxy-ntlm", "Use NTLM authentication on the proxy");
    aargs.option("", "proxy-pass", "Pass phrase for the private key for HTTPS proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-pinnedpubkey", "FILE/HASHES public key to verify proxy with", "<>", Occur::Optional,None);
    aargs.option("", "proxy-service-name", "SPNEGO proxy service name", "<>", Occur::Optional,None);
    aargs.flag("", "proxy-ssl-allow-beast", "Allow security flaw for interop for HTTPS proxy");
    aargs.option("", "proxy-tls13-ciphers", "TLS 1.3 ciphersuites for proxy (OpenSSL)", "<>", Occur::Optional,None);
    aargs.option("", "proxy-tlsauthtype", "TLS authentication type for HTTPS proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-tlspassword", "TLS password for HTTPS proxy", "<>", Occur::Optional,None);
    aargs.option("", "proxy-tlsuser", "TLS username for HTTPS proxy", "<>", Occur::Optional,None);
    aargs.flag("", "proxy-tlsv1", "Use TLSv1 for HTTPS proxy");
    aargs.option("U", "proxy-user", "Proxy user and password", "<>", Occur::Optional,None);
    aargs.option("", "proxy1.0", "Use HTTP/1.0 proxy on given port", "<>", Occur::Optional,None);
    aargs.flag("p", "proxytunnel", "Operate through an HTTP proxy tunnel (using CONNECT)");
    aargs.option("", "pubkey", "SSH Public key file name", "<>", Occur::Optional,None);
    aargs.flag("Q", "quote", "Send command(s) to server before transfer");
    aargs.option("", "random-file", "File for reading random data from", "<>", Occur::Optional,None);
    aargs.option("r", "range", "Retrieve only the bytes within RANGE", "<>", Occur::Optional,None);
    aargs.flag("", "raw", "Do HTTP 'raw'; no transfer decoding");
    aargs.option("e", "referer", "Referrer URL", "<>", Occur::Optional,None);
    aargs.flag("J", "remote-header-name", "Use the header-provided filename");
    aargs.flag("O", "remote-name", "Write output to a file named as the remote file");
    aargs.flag("", "remote-name-all", "Use the remote file name for all URLs");
    aargs.flag("R", "remote-time", "Set the remote file's time on the local output");
    aargs.option("X", "request", "Specify request command to use", "<>", Occur::Optional,None);
    aargs.flag("", "request-target", "Specify the target for this request");
    aargs.option("", "resolve", "Resolve the host+port to this address", "<>", Occur::Optional,None);
    aargs.option("", "retry", "Retry request if transient problems occur", "<>", Occur::Optional,None);
    aargs.flag("", "retry-connrefused", "Retry on connection refused (use with --retry)");
    aargs.option("", "retry-delay", "Wait time between retries", "<>", Occur::Optional,None);
    aargs.option("", "retry-max-time", "Retry only within this period", "<>", Occur::Optional,None);
    aargs.option("", "sasl-authzid", "Use this identity to act as during SASL PLAIN authentication", "<>", Occur::Optional,None);
    aargs.flag("", "sasl-ir", "Enable initial response in SASL authentication");
    aargs.option("", "service-name", "SPNEGO service name", "<>", Occur::Optional,None);
    aargs.flag("S", "show-error", "Show error even when -s is used");
    aargs.flag("s", "silent", "Silent mode");
    aargs.option("", "socks4", "SOCKS4 proxy on given host + port", "<>", Occur::Optional,None);
    aargs.option("", "socks4a", "SOCKS4a proxy on given host + port", "<>", Occur::Optional,None);
    aargs.option("", "socks5", "SOCKS5 proxy on given host + port", "<>", Occur::Optional,None);
    aargs.flag("", "socks5-basic", "Enable username/password auth for SOCKS5 proxies");
    aargs.flag("", "socks5-gssapi", "Enable GSS-API auth for SOCKS5 proxies");
    aargs.flag("", "socks5-gssapi-nec", "Compatibility with NEC SOCKS5 server");
    aargs.option("", "socks5-gssapi-service", "SOCKS5 proxy service name for GSS-API", "<>", Occur::Optional,None);
    aargs.option("", "socks5-hostname", "SOCKS5 proxy  pass host name to proxy", "<>", Occur::Optional,None);
    aargs.option("Y", "speed-limit", "Stop transfers slower than this", "<>", Occur::Optional,None);
    aargs.option("y", "speed-time", "Trigger 'speed-limit' abort after this time", "<>", Occur::Optional,None);
    aargs.flag("", "ssl", "Try SSL/TLS");
    aargs.flag("", "ssl-allow-beast", "Allow security flaw to improve interop");
    aargs.flag("", "ssl-no-revoke", "Disable cert revocation checks (Schannel)");
    aargs.flag("", "ssl-reqd", "Require SSL/TLS");
    aargs.flag("2", "sslv2", "Use SSLv2");
    aargs.flag("3", "sslv3", "Use SSLv3");
    aargs.flag("", "stderr", "Where to redirect stderr");
    aargs.flag("", "styled-output", "Enable styled output for HTTP headers");
    aargs.flag("", "suppress-connect-headers", "Suppress proxy CONNECT response headers");
    aargs.flag("", "tcp-fastopen", "Use TCP Fast Open");
    aargs.flag("", "tcp-nodelay", "Use the TCP_NODELAY option");
    aargs.option("t", "telnet-option", "Set telnet option", "<>", Occur::Optional,None);
    aargs.option("", "tftp-blksize", "Set TFTP BLKSIZE option", "<>", Occur::Optional,None);
    aargs.flag("", "tftp-no-options", "Do not send any TFTP options");
    aargs.option("z", "time-cond", "Transfer based on a time condition", "<>", Occur::Optional,None);
    aargs.option("", "tls-max", "Set maximum allowed TLS version", "<>", Occur::Optional,None);
    aargs.option("", "tls13-ciphers", "TLS 1.3 ciphersuites (OpenSSL)", "<>", Occur::Optional,None);
    aargs.option("", "tlsauthtype", "TLS authentication type", "<>", Occur::Optional,None);
    aargs.flag("", "tlspassword", "TLS password");
    aargs.option("", "tlsuser", "TLS user name", "<>", Occur::Optional,None);
    aargs.flag("1", "tlsv1", "Use TLSv1.0 or greater");
    aargs.flag("", "tlsv1.0", "Use TLSv1.0 or greater");
    aargs.flag("", "tlsv1.1", "Use TLSv1.1 or greater");
    aargs.flag("", "tlsv1.2", "Use TLSv1.2 or greater");
    aargs.flag("", "tlsv1.3", "Use TLSv1.3 or greater");
    aargs.flag("", "tr-encoding", "Request compressed transfer encoding");
    aargs.option("", "trace", "Write a debug trace to FILE", "<>", Occur::Optional,None);
    aargs.option("", "trace-ascii", "Like --trace  but without hex output", "<>", Occur::Optional,None);
    aargs.flag("", "trace-time", "Add time stamps to trace/verbose output");
    aargs.option("", "unix-socket", "Connect through this Unix domain socket", "<>", Occur::Optional,None);
    aargs.option("T", "upload-file", "Transfer local FILE to destination", "<>", Occur::Optional,None);
    aargs.option("", "url", "URL to work with", "<>", Occur::Optional,None);
    aargs.flag("B", "use-ascii", "Use ASCII/text transfer");
    aargs.option("u", "user", "Server user and password", "<>", Occur::Optional,None);
    aargs.option("A", "user-agent", "Send User-Agent <name> to server", "<>", Occur::Optional,None);
    aargs.flag("v", "verbose", "Make the operation more talkative");
    aargs.option("w", "write-out", "Use output FORMAT after completion", "<>", Occur::Optional,None);
    aargs.flag("", "xattr", "Store metadata in extended file attributes");
    aargs.flag("H", "help", "display this help and exit");
    aargs.flag("V", "version", "output version information and exit");
}
