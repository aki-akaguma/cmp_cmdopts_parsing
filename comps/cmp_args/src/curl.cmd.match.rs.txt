// WARN: This file is auto generated by cmp_args_xtask
{
    conf.opt_abstract_unix_socket = value_to_string("abstract-unix-socket", aargs.value_of("abstract-unix-socket"))?;
    conf.opt_alt_svc = value_to_string("alt-svc", aargs.value_of("alt-svc"))?;
    if let Ok(v) = aargs.value_of("anyauth") {
        conf.flg_anyauth = v;
    }
    if let Ok(v) = aargs.value_of("append") {
        conf.flg_append = v;
    }
    if let Ok(v) = aargs.value_of("basic") {
        conf.flg_basic = v;
    }
    conf.opt_cacert = value_to_string("cacert", aargs.value_of("cacert"))?;
    conf.opt_capath = value_to_string("capath", aargs.value_of("capath"))?;
    conf.opt_cert = value_to_string("cert", aargs.value_of("cert"))?;
    if let Ok(v) = aargs.value_of("cert-status") {
        conf.flg_cert_status = v;
    }
    conf.opt_cert_type = value_to_string("cert-type", aargs.value_of("cert-type"))?;
    conf.opt_ciphers = value_to_string("ciphers", aargs.value_of("ciphers"))?;
    if let Ok(v) = aargs.value_of("compressed") {
        conf.flg_compressed = v;
    }
    if let Ok(v) = aargs.value_of("compressed-ssh") {
        conf.flg_compressed_ssh = v;
    }
    conf.opt_config = value_to_string("config", aargs.value_of("config"))?;
    conf.opt_connect_timeout = value_to_u32("connect-timeout", aargs.value_of("connect-timeout"))?;
    conf.opt_connect_to = value_to_string("connect-to", aargs.value_of("connect-to"))?;
    conf.opt_continue_at = value_to_u64("continue-at", aargs.value_of("continue-at"))?;
    conf.opt_cookie = value_to_string("cookie", aargs.value_of("cookie"))?;
    conf.opt_cookie_jar = value_to_string("cookie-jar", aargs.value_of("cookie-jar"))?;
    if let Ok(v) = aargs.value_of("create-dirs") {
        conf.flg_create_dirs = v;
    }
    if let Ok(v) = aargs.value_of("crlf") {
        conf.flg_crlf = v;
    }
    conf.opt_crlfile = value_to_string("crlfile", aargs.value_of("crlfile"))?;
    conf.opt_data = value_to_string("data", aargs.value_of("data"))?;
    conf.opt_data_ascii = value_to_string("data-ascii", aargs.value_of("data-ascii"))?;
    conf.opt_data_binary = value_to_string("data-binary", aargs.value_of("data-binary"))?;
    conf.opt_data_raw = value_to_string("data-raw", aargs.value_of("data-raw"))?;
    conf.opt_data_urlencode = value_to_string("data-urlencode", aargs.value_of("data-urlencode"))?;
    conf.opt_delegation = value_to_string("delegation", aargs.value_of("delegation"))?;
    if let Ok(v) = aargs.value_of("digest") {
        conf.flg_digest = v;
    }
    if let Ok(v) = aargs.value_of("disable") {
        conf.flg_disable = v;
    }
    if let Ok(v) = aargs.value_of("disable-eprt") {
        conf.flg_disable_eprt = v;
    }
    if let Ok(v) = aargs.value_of("disable-epsv") {
        conf.flg_disable_epsv = v;
    }
    if let Ok(v) = aargs.value_of("disallow-username-in-url") {
        conf.flg_disallow_username_in_url = v;
    }
    conf.opt_dns_interface = value_to_string("dns-interface", aargs.value_of("dns-interface"))?;
    conf.opt_dns_ipv4_addr = value_to_string("dns-ipv4-addr", aargs.value_of("dns-ipv4-addr"))?;
    conf.opt_dns_ipv6_addr = value_to_string("dns-ipv6-addr", aargs.value_of("dns-ipv6-addr"))?;
    conf.opt_dns_servers = value_to_string("dns-servers", aargs.value_of("dns-servers"))?;
    conf.opt_doh_url = value_to_string("doh-url", aargs.value_of("doh-url"))?;
    conf.opt_dump_header = value_to_string("dump-header", aargs.value_of("dump-header"))?;
    conf.opt_egd_file = value_to_string("egd-file", aargs.value_of("egd-file"))?;
    conf.opt_engine = value_to_string("engine", aargs.value_of("engine"))?;
    conf.opt_etag_save = value_to_string("etag-save", aargs.value_of("etag-save"))?;
    conf.opt_etag_compare = value_to_string("etag-compare", aargs.value_of("etag-compare"))?;
    conf.opt_expect100_timeout = value_to_u32("expect100-timeout", aargs.value_of("expect100-timeout"))?;
    if let Ok(v) = aargs.value_of("fail") {
        conf.flg_fail = v;
    }
    if let Ok(v) = aargs.value_of("fail-early") {
        conf.flg_fail_early = v;
    }
    if let Ok(v) = aargs.value_of("false-start") {
        conf.flg_false_start = v;
    }
    conf.opt_form = value_to_string("form", aargs.value_of("form"))?;
    conf.opt_form_string = value_to_string("form-string", aargs.value_of("form-string"))?;
    conf.opt_ftp_account = value_to_string("ftp-account", aargs.value_of("ftp-account"))?;
    conf.opt_ftp_alternative_to_user = value_to_string("ftp-alternative-to-user", aargs.value_of("ftp-alternative-to-user"))?;
    if let Ok(v) = aargs.value_of("ftp-create-dirs") {
        conf.flg_ftp_create_dirs = v;
    }
    conf.opt_ftp_method = value_to_string("ftp-method", aargs.value_of("ftp-method"))?;
    if let Ok(v) = aargs.value_of("ftp-pasv") {
        conf.flg_ftp_pasv = v;
    }
    conf.opt_ftp_port = value_to_string("ftp-port", aargs.value_of("ftp-port"))?;
    if let Ok(v) = aargs.value_of("ftp-pret") {
        conf.flg_ftp_pret = v;
    }
    if let Ok(v) = aargs.value_of("ftp-skip-pasv-ip") {
        conf.flg_ftp_skip_pasv_ip = v;
    }
    if let Ok(v) = aargs.value_of("ftp-ssl-ccc") {
        conf.flg_ftp_ssl_ccc = v;
    }
    conf.opt_ftp_ssl_ccc_mode = value_to_string("ftp-ssl-ccc-mode", aargs.value_of("ftp-ssl-ccc-mode"))?;
    if let Ok(v) = aargs.value_of("ftp-ssl-control") {
        conf.flg_ftp_ssl_control = v;
    }
    if let Ok(v) = aargs.value_of("get") {
        conf.flg_get = v;
    }
    if let Ok(v) = aargs.value_of("globoff") {
        conf.flg_globoff = v;
    }
    conf.opt_happy_eyeballs_timeout_ms = value_to_u64("happy-eyeballs-timeout-ms", aargs.value_of("happy-eyeballs-timeout-ms"))?;
    if let Ok(v) = aargs.value_of("haproxy-protocol") {
        conf.flg_haproxy_protocol = v;
    }
    if let Ok(v) = aargs.value_of("head") {
        conf.flg_head = v;
    }
    conf.opt_header = value_to_string("header", aargs.value_of("header"))?;
    conf.opt_hostpubmd5 = value_to_string("hostpubmd5", aargs.value_of("hostpubmd5"))?;
    if let Ok(v) = aargs.value_of("http0.9") {
        conf.flg_http0_9 = v;
    }
    if let Ok(v) = aargs.value_of("http1.0") {
        conf.flg_http1_0 = v;
    }
    if let Ok(v) = aargs.value_of("http1.1") {
        conf.flg_http1_1 = v;
    }
    if let Ok(v) = aargs.value_of("http2") {
        conf.flg_http2 = v;
    }
    if let Ok(v) = aargs.value_of("http2-prior-knowledge") {
        conf.flg_http2_prior_knowledge = v;
    }
    if let Ok(v) = aargs.value_of("http3") {
        conf.flg_http3 = v;
    }
    if let Ok(v) = aargs.value_of("ignore-content-length") {
        conf.flg_ignore_content_length = v;
    }
    if let Ok(v) = aargs.value_of("include") {
        conf.flg_include = v;
    }
    if let Ok(v) = aargs.value_of("insecure") {
        conf.flg_insecure = v;
    }
    conf.opt_interface = value_to_string("interface", aargs.value_of("interface"))?;
    if let Ok(v) = aargs.value_of("ipv4") {
        conf.flg_ipv4 = v;
    }
    if let Ok(v) = aargs.value_of("ipv6") {
        conf.flg_ipv6 = v;
    }
    if let Ok(v) = aargs.value_of("junk-session-cookies") {
        conf.flg_junk_session_cookies = v;
    }
    conf.opt_keepalive_time = value_to_u32("keepalive-time", aargs.value_of("keepalive-time"))?;
    conf.opt_key = value_to_string("key", aargs.value_of("key"))?;
    conf.opt_key_type = value_to_string("key-type", aargs.value_of("key-type"))?;
    conf.opt_krb = value_to_string("krb", aargs.value_of("krb"))?;
    conf.opt_libcurl = value_to_string("libcurl", aargs.value_of("libcurl"))?;
    conf.opt_limit_rate = value_to_u64("limit-rate", aargs.value_of("limit-rate"))?;
    if let Ok(v) = aargs.value_of("list-only") {
        conf.flg_list_only = v;
    }
    conf.opt_local_port = value_to_string("local-port", aargs.value_of("local-port"))?;
    if let Ok(v) = aargs.value_of("location") {
        conf.flg_location = v;
    }
    if let Ok(v) = aargs.value_of("location-trusted") {
        conf.flg_location_trusted = v;
    }
    conf.opt_login_options = value_to_string("login-options", aargs.value_of("login-options"))?;
    conf.opt_mail_auth = value_to_string("mail-auth", aargs.value_of("mail-auth"))?;
    conf.opt_mail_from = value_to_string("mail-from", aargs.value_of("mail-from"))?;
    conf.opt_mail_rcpt = value_to_string("mail-rcpt", aargs.value_of("mail-rcpt"))?;
    if let Ok(v) = aargs.value_of("manual") {
        conf.flg_manual = v;
    }
    conf.opt_max_filesize = value_to_u64("max-filesize", aargs.value_of("max-filesize"))?;
    conf.opt_max_redirs = value_to_u32("max-redirs", aargs.value_of("max-redirs"))?;
    conf.opt_max_time = value_to_u32("max-time", aargs.value_of("max-time"))?;
    if let Ok(v) = aargs.value_of("metalink") {
        conf.flg_metalink = v;
    }
    if let Ok(v) = aargs.value_of("negotiate") {
        conf.flg_negotiate = v;
    }
    if let Ok(v) = aargs.value_of("netrc") {
        conf.flg_netrc = v;
    }
    conf.opt_netrc_file = value_to_string("netrc-file", aargs.value_of("netrc-file"))?;
    if let Ok(v) = aargs.value_of("netrc-optional") {
        conf.flg_netrc_optional = v;
    }
    if let Ok(v) = aargs.value_of("next") {
        conf.flg_next = v;
    }
    if let Ok(v) = aargs.value_of("no-alpn") {
        conf.flg_no_alpn = v;
    }
    if let Ok(v) = aargs.value_of("no-buffer") {
        conf.flg_no_buffer = v;
    }
    if let Ok(v) = aargs.value_of("no-keepalive") {
        conf.flg_no_keepalive = v;
    }
    if let Ok(v) = aargs.value_of("no-npn") {
        conf.flg_no_npn = v;
    }
    if let Ok(v) = aargs.value_of("no-progress-meter") {
        conf.flg_no_progress_meter = v;
    }
    if let Ok(v) = aargs.value_of("no-sessionid") {
        conf.flg_no_sessionid = v;
    }
    conf.opt_noproxy = value_to_string("noproxy", aargs.value_of("noproxy"))?;
    if let Ok(v) = aargs.value_of("ntlm") {
        conf.flg_ntlm = v;
    }
    if let Ok(v) = aargs.value_of("ntlm-wb") {
        conf.flg_ntlm_wb = v;
    }
    conf.opt_oauth2_bearer = value_to_string("oauth2-bearer", aargs.value_of("oauth2-bearer"))?;
    conf.opt_output = value_to_string("output", aargs.value_of("output"))?;
    if let Ok(v) = aargs.value_of("parallel") {
        conf.flg_parallel = v;
    }
    if let Ok(v) = aargs.value_of("parallel-immediate") {
        conf.flg_parallel_immediate = v;
    }
    if let Ok(v) = aargs.value_of("parallel-max") {
        conf.flg_parallel_max = v;
    }
    conf.opt_pass = value_to_string("pass", aargs.value_of("pass"))?;
    if let Ok(v) = aargs.value_of("path-as-is") {
        conf.flg_path_as_is = v;
    }
    conf.opt_pinnedpubkey = value_to_string("pinnedpubkey", aargs.value_of("pinnedpubkey"))?;
    if let Ok(v) = aargs.value_of("post301") {
        conf.flg_post301 = v;
    }
    if let Ok(v) = aargs.value_of("post302") {
        conf.flg_post302 = v;
    }
    if let Ok(v) = aargs.value_of("post303") {
        conf.flg_post303 = v;
    }
    conf.opt_preproxy = value_to_string("preproxy", aargs.value_of("preproxy"))?;
    if let Ok(v) = aargs.value_of("progress-bar") {
        conf.flg_progress_bar = v;
    }
    conf.opt_proto = value_to_string("proto", aargs.value_of("proto"))?;
    conf.opt_proto_default = value_to_string("proto-default", aargs.value_of("proto-default"))?;
    conf.opt_proto_redir = value_to_string("proto-redir", aargs.value_of("proto-redir"))?;
    conf.opt_proxy = value_to_string("proxy", aargs.value_of("proxy"))?;
    if let Ok(v) = aargs.value_of("proxy-anyauth") {
        conf.flg_proxy_anyauth = v;
    }
    if let Ok(v) = aargs.value_of("proxy-basic") {
        conf.flg_proxy_basic = v;
    }
    conf.opt_proxy_cacert = value_to_string("proxy-cacert", aargs.value_of("proxy-cacert"))?;
    conf.opt_proxy_capath = value_to_string("proxy-capath", aargs.value_of("proxy-capath"))?;
    conf.opt_proxy_cert = value_to_string("proxy-cert", aargs.value_of("proxy-cert"))?;
    conf.opt_proxy_cert_type = value_to_string("proxy-cert-type", aargs.value_of("proxy-cert-type"))?;
    conf.opt_proxy_ciphers = value_to_string("proxy-ciphers", aargs.value_of("proxy-ciphers"))?;
    conf.opt_proxy_crlfile = value_to_string("proxy-crlfile", aargs.value_of("proxy-crlfile"))?;
    if let Ok(v) = aargs.value_of("proxy-digest") {
        conf.flg_proxy_digest = v;
    }
    conf.opt_proxy_header = value_to_string("proxy-header", aargs.value_of("proxy-header"))?;
    if let Ok(v) = aargs.value_of("proxy-insecure") {
        conf.flg_proxy_insecure = v;
    }
    conf.opt_proxy_key = value_to_string("proxy-key", aargs.value_of("proxy-key"))?;
    conf.opt_proxy_key_type = value_to_string("proxy-key-type", aargs.value_of("proxy-key-type"))?;
    if let Ok(v) = aargs.value_of("proxy-negotiate") {
        conf.flg_proxy_negotiate = v;
    }
    if let Ok(v) = aargs.value_of("proxy-ntlm") {
        conf.flg_proxy_ntlm = v;
    }
    conf.opt_proxy_pass = value_to_string("proxy-pass", aargs.value_of("proxy-pass"))?;
    conf.opt_proxy_pinnedpubkey = value_to_string("proxy-pinnedpubkey", aargs.value_of("proxy-pinnedpubkey"))?;
    conf.opt_proxy_service_name = value_to_string("proxy-service-name", aargs.value_of("proxy-service-name"))?;
    if let Ok(v) = aargs.value_of("proxy-ssl-allow-beast") {
        conf.flg_proxy_ssl_allow_beast = v;
    }
    conf.opt_proxy_tls13_ciphers = value_to_string("proxy-tls13-ciphers", aargs.value_of("proxy-tls13-ciphers"))?;
    conf.opt_proxy_tlsauthtype = value_to_string("proxy-tlsauthtype", aargs.value_of("proxy-tlsauthtype"))?;
    conf.opt_proxy_tlspassword = value_to_string("proxy-tlspassword", aargs.value_of("proxy-tlspassword"))?;
    conf.opt_proxy_tlsuser = value_to_string("proxy-tlsuser", aargs.value_of("proxy-tlsuser"))?;
    if let Ok(v) = aargs.value_of("proxy-tlsv1") {
        conf.flg_proxy_tlsv1 = v;
    }
    conf.opt_proxy_user = value_to_string("proxy-user", aargs.value_of("proxy-user"))?;
    conf.opt_proxy1_0 = value_to_string("proxy1.0", aargs.value_of("proxy1.0"))?;
    if let Ok(v) = aargs.value_of("proxytunnel") {
        conf.flg_proxytunnel = v;
    }
    conf.opt_pubkey = value_to_string("pubkey", aargs.value_of("pubkey"))?;
    if let Ok(v) = aargs.value_of("quote") {
        conf.flg_quote = v;
    }
    conf.opt_random_file = value_to_string("random-file", aargs.value_of("random-file"))?;
    conf.opt_range = value_to_string("range", aargs.value_of("range"))?;
    if let Ok(v) = aargs.value_of("raw") {
        conf.flg_raw = v;
    }
    conf.opt_referer = value_to_string("referer", aargs.value_of("referer"))?;
    if let Ok(v) = aargs.value_of("remote-header-name") {
        conf.flg_remote_header_name = v;
    }
    if let Ok(v) = aargs.value_of("remote-name") {
        conf.flg_remote_name = v;
    }
    if let Ok(v) = aargs.value_of("remote-name-all") {
        conf.flg_remote_name_all = v;
    }
    if let Ok(v) = aargs.value_of("remote-time") {
        conf.flg_remote_time = v;
    }
    conf.opt_request = value_to_string("request", aargs.value_of("request"))?;
    if let Ok(v) = aargs.value_of("request-target") {
        conf.flg_request_target = v;
    }
    conf.opt_resolve = value_to_string("resolve", aargs.value_of("resolve"))?;
    conf.opt_retry = value_to_u32("retry", aargs.value_of("retry"))?;
    if let Ok(v) = aargs.value_of("retry-connrefused") {
        conf.flg_retry_connrefused = v;
    }
    conf.opt_retry_delay = value_to_u32("retry-delay", aargs.value_of("retry-delay"))?;
    conf.opt_retry_max_time = value_to_u32("retry-max-time", aargs.value_of("retry-max-time"))?;
    conf.opt_sasl_authzid = value_to_string("sasl-authzid", aargs.value_of("sasl-authzid"))?;
    if let Ok(v) = aargs.value_of("sasl-ir") {
        conf.flg_sasl_ir = v;
    }
    conf.opt_service_name = value_to_string("service-name", aargs.value_of("service-name"))?;
    if let Ok(v) = aargs.value_of("show-error") {
        conf.flg_show_error = v;
    }
    if let Ok(v) = aargs.value_of("silent") {
        conf.flg_silent = v;
    }
    conf.opt_socks4 = value_to_string("socks4", aargs.value_of("socks4"))?;
    conf.opt_socks4a = value_to_string("socks4a", aargs.value_of("socks4a"))?;
    conf.opt_socks5 = value_to_string("socks5", aargs.value_of("socks5"))?;
    if let Ok(v) = aargs.value_of("socks5-basic") {
        conf.flg_socks5_basic = v;
    }
    if let Ok(v) = aargs.value_of("socks5-gssapi") {
        conf.flg_socks5_gssapi = v;
    }
    if let Ok(v) = aargs.value_of("socks5-gssapi-nec") {
        conf.flg_socks5_gssapi_nec = v;
    }
    conf.opt_socks5_gssapi_service = value_to_string("socks5-gssapi-service", aargs.value_of("socks5-gssapi-service"))?;
    conf.opt_socks5_hostname = value_to_string("socks5-hostname", aargs.value_of("socks5-hostname"))?;
    conf.opt_speed_limit = value_to_u64("speed-limit", aargs.value_of("speed-limit"))?;
    conf.opt_speed_time = value_to_u32("speed-time", aargs.value_of("speed-time"))?;
    if let Ok(v) = aargs.value_of("ssl") {
        conf.flg_ssl = v;
    }
    if let Ok(v) = aargs.value_of("ssl-allow-beast") {
        conf.flg_ssl_allow_beast = v;
    }
    if let Ok(v) = aargs.value_of("ssl-no-revoke") {
        conf.flg_ssl_no_revoke = v;
    }
    if let Ok(v) = aargs.value_of("ssl-reqd") {
        conf.flg_ssl_reqd = v;
    }
    if let Ok(v) = aargs.value_of("sslv2") {
        conf.flg_sslv2 = v;
    }
    if let Ok(v) = aargs.value_of("sslv3") {
        conf.flg_sslv3 = v;
    }
    if let Ok(v) = aargs.value_of("stderr") {
        conf.flg_stderr = v;
    }
    if let Ok(v) = aargs.value_of("styled-output") {
        conf.flg_styled_output = v;
    }
    if let Ok(v) = aargs.value_of("suppress-connect-headers") {
        conf.flg_suppress_connect_headers = v;
    }
    if let Ok(v) = aargs.value_of("tcp-fastopen") {
        conf.flg_tcp_fastopen = v;
    }
    if let Ok(v) = aargs.value_of("tcp-nodelay") {
        conf.flg_tcp_nodelay = v;
    }
    conf.opt_telnet_option = value_to_string("telnet-option", aargs.value_of("telnet-option"))?;
    conf.opt_tftp_blksize = value_to_u32("tftp-blksize", aargs.value_of("tftp-blksize"))?;
    if let Ok(v) = aargs.value_of("tftp-no-options") {
        conf.flg_tftp_no_options = v;
    }
    conf.opt_time_cond = value_to_string("time-cond", aargs.value_of("time-cond"))?;
    conf.opt_tls_max = value_to_string("tls-max", aargs.value_of("tls-max"))?;
    conf.opt_tls13_ciphers = value_to_string("tls13-ciphers", aargs.value_of("tls13-ciphers"))?;
    conf.opt_tlsauthtype = value_to_string("tlsauthtype", aargs.value_of("tlsauthtype"))?;
    if let Ok(v) = aargs.value_of("tlspassword") {
        conf.flg_tlspassword = v;
    }
    conf.opt_tlsuser = value_to_string("tlsuser", aargs.value_of("tlsuser"))?;
    if let Ok(v) = aargs.value_of("tlsv1") {
        conf.flg_tlsv1 = v;
    }
    if let Ok(v) = aargs.value_of("tlsv1.0") {
        conf.flg_tlsv1_0 = v;
    }
    if let Ok(v) = aargs.value_of("tlsv1.1") {
        conf.flg_tlsv1_1 = v;
    }
    if let Ok(v) = aargs.value_of("tlsv1.2") {
        conf.flg_tlsv1_2 = v;
    }
    if let Ok(v) = aargs.value_of("tlsv1.3") {
        conf.flg_tlsv1_3 = v;
    }
    if let Ok(v) = aargs.value_of("tr-encoding") {
        conf.flg_tr_encoding = v;
    }
    conf.opt_trace = value_to_string("trace", aargs.value_of("trace"))?;
    conf.opt_trace_ascii = value_to_string("trace-ascii", aargs.value_of("trace-ascii"))?;
    if let Ok(v) = aargs.value_of("trace-time") {
        conf.flg_trace_time = v;
    }
    conf.opt_unix_socket = value_to_string("unix-socket", aargs.value_of("unix-socket"))?;
    conf.opt_upload_file = value_to_string("upload-file", aargs.value_of("upload-file"))?;
    conf.opt_url = value_to_string("url", aargs.value_of("url"))?;
    if let Ok(v) = aargs.value_of("use-ascii") {
        conf.flg_use_ascii = v;
    }
    conf.opt_user = value_to_string("user", aargs.value_of("user"))?;
    conf.opt_user_agent = value_to_string("user-agent", aargs.value_of("user-agent"))?;
    if let Ok(v) = aargs.value_of("verbose") {
        conf.flg_verbose = v;
    }
    conf.opt_write_out = value_to_string("write-out", aargs.value_of("write-out"))?;
    if let Ok(v) = aargs.value_of("xattr") {
        conf.flg_xattr = v;
    }

    if aargs.value_of("help")? {
        print_help_and_exit(conf);
    }

    if aargs.value_of("version")? {
        print_version_and_exit(conf);
    }

}
