// WARN: This file is auto generated by cmp_clap3_xtask
{
    App::new(env!("CARGO_PKG_NAME"))
    .color(ColorChoice::Never)
    .version(env!("CARGO_PKG_VERSION"))
    .arg(Arg::with_name("abstract-unix-socket").long("abstract-unix-socket").help("Connect via abstract Unix domain socket").takes_value(true).empty_values(false))
    .arg(Arg::with_name("alt-svc").long("alt-svc").help("Enable alt-svc with this cache file").takes_value(true).empty_values(false))
    .arg(Arg::with_name("anyauth").long("anyauth").help("Pick any authentication method"))
    .arg(Arg::with_name("append").short('a').long("append").help("Append to target file when uploading"))
    .arg(Arg::with_name("basic").long("basic").help("Use HTTP Basic Authentication"))
    .arg(Arg::with_name("cacert").long("cacert").help("CA certificate to verify peer against").takes_value(true).empty_values(false))
    .arg(Arg::with_name("capath").long("capath").help("CA directory to verify peer against").takes_value(true).empty_values(false))
    .arg(Arg::with_name("cert").short('E').long("cert").help("Client certificate file and password").takes_value(true).empty_values(false))
    .arg(Arg::with_name("cert-status").long("cert-status").help("Verify the status of the server certificate"))
    .arg(Arg::with_name("cert-type").long("cert-type").help("Certificate file type (DER/PEM/ENG)").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ciphers").long("ciphers").help("SSL ciphers to use").takes_value(true).empty_values(false))
    .arg(Arg::with_name("compressed").long("compressed").help("Request compressed response"))
    .arg(Arg::with_name("compressed-ssh").long("compressed-ssh").help("Enable SSH compression"))
    .arg(Arg::with_name("config").short('K').long("config").help("Read config from a file").takes_value(true).empty_values(false))
    .arg(Arg::with_name("connect-timeout").long("connect-timeout").help("Maximum time allowed for connection").takes_value(true).empty_values(false))
    .arg(Arg::with_name("connect-to").long("connect-to").help("Connect to host").takes_value(true).empty_values(false))
    .arg(Arg::with_name("continue-at").short('C').long("continue-at").help("Resumed transfer offset").takes_value(true).empty_values(false))
    .arg(Arg::with_name("cookie").short('b').long("cookie").help("Send cookies from string/file").takes_value(true).empty_values(false))
    .arg(Arg::with_name("cookie-jar").short('c').long("cookie-jar").help("Write cookies to <filename> after operation").takes_value(true).empty_values(false))
    .arg(Arg::with_name("create-dirs").long("create-dirs").help("Create necessary local directory hierarchy"))
    .arg(Arg::with_name("crlf").long("crlf").help("Convert LF to CRLF in upload"))
    .arg(Arg::with_name("crlfile").long("crlfile").help("Get a CRL list in PEM format from the given file").takes_value(true).empty_values(false))
    .arg(Arg::with_name("data").short('d').long("data").help("HTTP POST data").takes_value(true).empty_values(false))
    .arg(Arg::with_name("data-ascii").long("data-ascii").help("HTTP POST ASCII data").takes_value(true).empty_values(false))
    .arg(Arg::with_name("data-binary").long("data-binary").help("HTTP POST binary data").takes_value(true).empty_values(false))
    .arg(Arg::with_name("data-raw").long("data-raw").help("HTTP POST data  '@' allowed").takes_value(true).empty_values(false))
    .arg(Arg::with_name("data-urlencode").long("data-urlencode").help("HTTP POST data url encoded").takes_value(true).empty_values(false))
    .arg(Arg::with_name("delegation").long("delegation").help("GSS-API delegation permission").takes_value(true).empty_values(false))
    .arg(Arg::with_name("digest").long("digest").help("Use HTTP Digest Authentication"))
    .arg(Arg::with_name("disable").short('q').long("disable").help("Disable .curlrc"))
    .arg(Arg::with_name("disable-eprt").long("disable-eprt").help("Inhibit using EPRT or LPRT"))
    .arg(Arg::with_name("disable-epsv").long("disable-epsv").help("Inhibit using EPSV"))
    .arg(Arg::with_name("disallow-username-in-url").long("disallow-username-in-url").help("Disallow username in url"))
    .arg(Arg::with_name("dns-interface").long("dns-interface").help("Interface to use for DNS requests").takes_value(true).empty_values(false))
    .arg(Arg::with_name("dns-ipv4-addr").long("dns-ipv4-addr").help("IPv4 address to use for DNS requests").takes_value(true).empty_values(false))
    .arg(Arg::with_name("dns-ipv6-addr").long("dns-ipv6-addr").help("IPv6 address to use for DNS requests").takes_value(true).empty_values(false))
    .arg(Arg::with_name("dns-servers").long("dns-servers").help("DNS server addrs to use").takes_value(true).empty_values(false))
    .arg(Arg::with_name("doh-url").long("doh-url").help("Resolve host names over DOH").takes_value(true).empty_values(false))
    .arg(Arg::with_name("dump-header").short('D').long("dump-header").help("Write the received headers to <filename>").takes_value(true).empty_values(false))
    .arg(Arg::with_name("egd-file").long("egd-file").help("EGD socket path for random data").takes_value(true).empty_values(false))
    .arg(Arg::with_name("engine").long("engine").help("Crypto engine to use").takes_value(true).empty_values(false))
    .arg(Arg::with_name("etag-save").long("etag-save").help("Get an ETag from response header and save it to a FILE").takes_value(true).empty_values(false))
    .arg(Arg::with_name("etag-compare").long("etag-compare").help("Get an ETag from a file and send a conditional request").takes_value(true).empty_values(false))
    .arg(Arg::with_name("expect100-timeout").long("expect100-timeout").help("How long to wait for 100-continue").takes_value(true).empty_values(false))
    .arg(Arg::with_name("fail").short('f').long("fail").help("Fail silently (no output at all) on HTTP errors"))
    .arg(Arg::with_name("fail-early").long("fail-early").help("Fail on first transfer error  do not continue"))
    .arg(Arg::with_name("false-start").long("false-start").help("Enable TLS False Start"))
    .arg(Arg::with_name("form").short('F').long("form").help("Specify multipart MIME data").takes_value(true).empty_values(false))
    .arg(Arg::with_name("form-string").long("form-string").help("Specify multipart MIME data").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ftp-account").long("ftp-account").help("Account data string").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ftp-alternative-to-user").long("ftp-alternative-to-user").help("String to replace USER [name]").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ftp-create-dirs").long("ftp-create-dirs").help("Create the remote dirs if not present"))
    .arg(Arg::with_name("ftp-method").long("ftp-method").help("Control CWD usage").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ftp-pasv").long("ftp-pasv").help("Use PASV/EPSV instead of PORT"))
    .arg(Arg::with_name("ftp-port").short('P').long("ftp-port").help("Use PORT instead of PASV").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ftp-pret").long("ftp-pret").help("Send PRET before PASV"))
    .arg(Arg::with_name("ftp-skip-pasv-ip").long("ftp-skip-pasv-ip").help("Skip the IP address for PASV"))
    .arg(Arg::with_name("ftp-ssl-ccc").long("ftp-ssl-ccc").help("Send CCC after authenticating"))
    .arg(Arg::with_name("ftp-ssl-ccc-mode").long("ftp-ssl-ccc-mode").help("Set CCC mode").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ftp-ssl-control").long("ftp-ssl-control").help("Require SSL/TLS for FTP login  clear for transfer"))
    .arg(Arg::with_name("get").short('G').long("get").help("Put the post data in the URL and use GET"))
    .arg(Arg::with_name("globoff").short('g').long("globoff").help("Disable URL sequences and ranges using {} and []"))
    .arg(Arg::with_name("happy-eyeballs-timeout-ms").long("happy-eyeballs-timeout-ms").help("How long to wait in milliseconds for IPv6 before trying IPv4").takes_value(true).empty_values(false))
    .arg(Arg::with_name("haproxy-protocol").long("haproxy-protocol").help("Send HAProxy PROXY protocol v1 header"))
    .arg(Arg::with_name("head").short('I').long("head").help("Show document info only"))
    .arg(Arg::with_name("header").long("header").help("Pass custom header(s) to server").takes_value(true).empty_values(false))
    .arg(Arg::with_name("hostpubmd5").long("hostpubmd5").help("Acceptable MD5 hash of the host public key").takes_value(true).empty_values(false))
    .arg(Arg::with_name("http0.9").long("http0.9").help("Allow HTTP 0.9 responses"))
    .arg(Arg::with_name("http1.0").short('0').long("http1.0").help("Use HTTP 1.0"))
    .arg(Arg::with_name("http1.1").long("http1.1").help("Use HTTP 1.1"))
    .arg(Arg::with_name("http2").long("http2").help("Use HTTP 2"))
    .arg(Arg::with_name("http2-prior-knowledge").long("http2-prior-knowledge").help("Use HTTP 2 without HTTP/1.1 Upgrade"))
    .arg(Arg::with_name("http3").long("http3").help("Use HTTP v3"))
    .arg(Arg::with_name("ignore-content-length").long("ignore-content-length").help("Ignore the size of the remote resource"))
    .arg(Arg::with_name("include").short('i').long("include").help("Include protocol response headers in the output"))
    .arg(Arg::with_name("insecure").short('k').long("insecure").help("Allow insecure server connections when using SSL"))
    .arg(Arg::with_name("interface").long("interface").help("Use network INTERFACE (or address)").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ipv4").short('4').long("ipv4").help("Resolve names to IPv4 addresses"))
    .arg(Arg::with_name("ipv6").short('6').long("ipv6").help("Resolve names to IPv6 addresses"))
    .arg(Arg::with_name("junk-session-cookies").short('j').long("junk-session-cookies").help("Ignore session cookies read from file"))
    .arg(Arg::with_name("keepalive-time").long("keepalive-time").help("Interval time for keepalive probes").takes_value(true).empty_values(false))
    .arg(Arg::with_name("key").long("key").help("Private key file name").takes_value(true).empty_values(false))
    .arg(Arg::with_name("key-type").long("key-type").help("Private key file type (DER/PEM/ENG)").takes_value(true).empty_values(false))
    .arg(Arg::with_name("krb").long("krb").help("Enable Kerberos with security <level>").takes_value(true).empty_values(false))
    .arg(Arg::with_name("libcurl").long("libcurl").help("Dump libcurl equivalent code of this command line").takes_value(true).empty_values(false))
    .arg(Arg::with_name("limit-rate").long("limit-rate").help("Limit transfer speed to RATE").takes_value(true).empty_values(false))
    .arg(Arg::with_name("list-only").short('l').long("list-only").help("List only mode"))
    .arg(Arg::with_name("local-port").long("local-port").help("Force use of RANGE for local port numbers").takes_value(true).empty_values(false))
    .arg(Arg::with_name("location").short('L').long("location").help("Follow redirects"))
    .arg(Arg::with_name("location-trusted").long("location-trusted").help("Like --location  and send auth to other hosts"))
    .arg(Arg::with_name("login-options").long("login-options").help("Server login options").takes_value(true).empty_values(false))
    .arg(Arg::with_name("mail-auth").long("mail-auth").help("Originator address of the original email").takes_value(true).empty_values(false))
    .arg(Arg::with_name("mail-from").long("mail-from").help("Mail from this address").takes_value(true).empty_values(false))
    .arg(Arg::with_name("mail-rcpt").long("mail-rcpt").help("Mail to this address").takes_value(true).empty_values(false))
    .arg(Arg::with_name("manual").short('M').long("manual").help("Display the full manual"))
    .arg(Arg::with_name("max-filesize").long("max-filesize").help("Maximum file size to download").takes_value(true).empty_values(false))
    .arg(Arg::with_name("max-redirs").long("max-redirs").help("Maximum number of redirects allowed").takes_value(true).empty_values(false))
    .arg(Arg::with_name("max-time").short('m').long("max-time").help("Maximum time allowed for the transfer").takes_value(true).empty_values(false))
    .arg(Arg::with_name("metalink").long("metalink").help("Process given URLs as metalink XML file"))
    .arg(Arg::with_name("negotiate").long("negotiate").help("Use HTTP Negotiate (SPNEGO) authentication"))
    .arg(Arg::with_name("netrc").short('n').long("netrc").help("Must read .netrc for user name and password"))
    .arg(Arg::with_name("netrc-file").long("netrc-file").help("Specify FILE for netrc").takes_value(true).empty_values(false))
    .arg(Arg::with_name("netrc-optional").long("netrc-optional").help("Use either .netrc or URL"))
    .arg(Arg::with_name("next").short(':').long("next").help("Make next URL use its separate set of options"))
    .arg(Arg::with_name("no-alpn").long("no-alpn").help("Disable the ALPN TLS extension"))
    .arg(Arg::with_name("no-buffer").short('N').long("no-buffer").help("Disable buffering of the output stream"))
    .arg(Arg::with_name("no-keepalive").long("no-keepalive").help("Disable TCP keepalive on the connection"))
    .arg(Arg::with_name("no-npn").long("no-npn").help("Disable the NPN TLS extension"))
    .arg(Arg::with_name("no-progress-meter").long("no-progress-meter").help("Do not show the progress meter"))
    .arg(Arg::with_name("no-sessionid").long("no-sessionid").help("Disable SSL session-ID reusing"))
    .arg(Arg::with_name("noproxy").long("noproxy").help("List of hosts which do not use proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ntlm").long("ntlm").help("Use HTTP NTLM authentication"))
    .arg(Arg::with_name("ntlm-wb").long("ntlm-wb").help("Use HTTP NTLM authentication with winbind"))
    .arg(Arg::with_name("oauth2-bearer").long("oauth2-bearer").help("OAuth 2 Bearer Token").takes_value(true).empty_values(false))
    .arg(Arg::with_name("output").short('o').long("output").help("Write to file instead of stdout").takes_value(true).empty_values(false))
    .arg(Arg::with_name("parallel").short('Z').long("parallel").help("Perform transfers in parallel"))
    .arg(Arg::with_name("parallel-immediate").long("parallel-immediate").help("Do not wait for multiplexing (with --parallel)"))
    .arg(Arg::with_name("parallel-max").long("parallel-max").help("Maximum concurrency for parallel transfers"))
    .arg(Arg::with_name("pass").long("pass").help("Pass phrase for the private key").takes_value(true).empty_values(false))
    .arg(Arg::with_name("path-as-is").long("path-as-is").help("Do not squash .. sequences in URL path"))
    .arg(Arg::with_name("pinnedpubkey").long("pinnedpubkey").help("FILE/HASHES Public key to verify peer against").takes_value(true).empty_values(false))
    .arg(Arg::with_name("post301").long("post301").help("Do not switch to GET after following a 301"))
    .arg(Arg::with_name("post302").long("post302").help("Do not switch to GET after following a 302"))
    .arg(Arg::with_name("post303").long("post303").help("Do not switch to GET after following a 303"))
    .arg(Arg::with_name("preproxy").long("preproxy").help("Use this proxy first").takes_value(true).empty_values(false))
    .arg(Arg::with_name("progress-bar").short('#').long("progress-bar").help("Display transfer progress as a bar"))
    .arg(Arg::with_name("proto").long("proto").help("Enable/disable PROTOCOLS").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proto-default").long("proto-default").help("Use PROTOCOL for any URL missing a scheme").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proto-redir").long("proto-redir").help("Enable/disable PROTOCOLS on redirect").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy").short('x').long("proxy").help("Use this proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-anyauth").long("proxy-anyauth").help("Pick any proxy authentication method"))
    .arg(Arg::with_name("proxy-basic").long("proxy-basic").help("Use Basic authentication on the proxy"))
    .arg(Arg::with_name("proxy-cacert").long("proxy-cacert").help("CA certificate to verify peer against for proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-capath").long("proxy-capath").help("CA directory to verify peer against for proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-cert").long("proxy-cert").help("Set client certificate for proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-cert-type").long("proxy-cert-type").help("Client certificate type for HTTPS proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-ciphers").long("proxy-ciphers").help("SSL ciphers to use for proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-crlfile").long("proxy-crlfile").help("Set a CRL list for proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-digest").long("proxy-digest").help("Use Digest authentication on the proxy"))
    .arg(Arg::with_name("proxy-header").long("proxy-header").help("Pass custom header(s) to proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-insecure").long("proxy-insecure").help("Do HTTPS proxy connections without verifying the proxy"))
    .arg(Arg::with_name("proxy-key").long("proxy-key").help("Private key for HTTPS proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-key-type").long("proxy-key-type").help("Private key file type for proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-negotiate").long("proxy-negotiate").help("Use HTTP Negotiate (SPNEGO) authentication on the proxy"))
    .arg(Arg::with_name("proxy-ntlm").long("proxy-ntlm").help("Use NTLM authentication on the proxy"))
    .arg(Arg::with_name("proxy-pass").long("proxy-pass").help("Pass phrase for the private key for HTTPS proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-pinnedpubkey").long("proxy-pinnedpubkey").help("FILE/HASHES public key to verify proxy with").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-service-name").long("proxy-service-name").help("SPNEGO proxy service name").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-ssl-allow-beast").long("proxy-ssl-allow-beast").help("Allow security flaw for interop for HTTPS proxy"))
    .arg(Arg::with_name("proxy-tls13-ciphers").long("proxy-tls13-ciphers").help("TLS 1.3 ciphersuites for proxy (OpenSSL)").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-tlsauthtype").long("proxy-tlsauthtype").help("TLS authentication type for HTTPS proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-tlspassword").long("proxy-tlspassword").help("TLS password for HTTPS proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-tlsuser").long("proxy-tlsuser").help("TLS username for HTTPS proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy-tlsv1").long("proxy-tlsv1").help("Use TLSv1 for HTTPS proxy"))
    .arg(Arg::with_name("proxy-user").short('U').long("proxy-user").help("Proxy user and password").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxy1.0").long("proxy1.0").help("Use HTTP/1.0 proxy on given port").takes_value(true).empty_values(false))
    .arg(Arg::with_name("proxytunnel").short('p').long("proxytunnel").help("Operate through an HTTP proxy tunnel (using CONNECT)"))
    .arg(Arg::with_name("pubkey").long("pubkey").help("SSH Public key file name").takes_value(true).empty_values(false))
    .arg(Arg::with_name("quote").short('Q').long("quote").help("Send command(s) to server before transfer"))
    .arg(Arg::with_name("random-file").long("random-file").help("File for reading random data from").takes_value(true).empty_values(false))
    .arg(Arg::with_name("range").short('r').long("range").help("Retrieve only the bytes within RANGE").takes_value(true).empty_values(false))
    .arg(Arg::with_name("raw").long("raw").help("Do HTTP 'raw'; no transfer decoding"))
    .arg(Arg::with_name("referer").short('e').long("referer").help("Referrer URL").takes_value(true).empty_values(false))
    .arg(Arg::with_name("remote-header-name").short('J').long("remote-header-name").help("Use the header-provided filename"))
    .arg(Arg::with_name("remote-name").short('O').long("remote-name").help("Write output to a file named as the remote file"))
    .arg(Arg::with_name("remote-name-all").long("remote-name-all").help("Use the remote file name for all URLs"))
    .arg(Arg::with_name("remote-time").short('R').long("remote-time").help("Set the remote file's time on the local output"))
    .arg(Arg::with_name("request").short('X').long("request").help("Specify request command to use").takes_value(true).empty_values(false))
    .arg(Arg::with_name("request-target").long("request-target").help("Specify the target for this request"))
    .arg(Arg::with_name("resolve").long("resolve").help("Resolve the host+port to this address").takes_value(true).empty_values(false))
    .arg(Arg::with_name("retry").long("retry").help("Retry request if transient problems occur").takes_value(true).empty_values(false))
    .arg(Arg::with_name("retry-connrefused").long("retry-connrefused").help("Retry on connection refused (use with --retry)"))
    .arg(Arg::with_name("retry-delay").long("retry-delay").help("Wait time between retries").takes_value(true).empty_values(false))
    .arg(Arg::with_name("retry-max-time").long("retry-max-time").help("Retry only within this period").takes_value(true).empty_values(false))
    .arg(Arg::with_name("sasl-authzid").long("sasl-authzid").help("Use this identity to act as during SASL PLAIN authentication").takes_value(true).empty_values(false))
    .arg(Arg::with_name("sasl-ir").long("sasl-ir").help("Enable initial response in SASL authentication"))
    .arg(Arg::with_name("service-name").long("service-name").help("SPNEGO service name").takes_value(true).empty_values(false))
    .arg(Arg::with_name("show-error").short('S').long("show-error").help("Show error even when -s is used"))
    .arg(Arg::with_name("silent").short('s').long("silent").help("Silent mode"))
    .arg(Arg::with_name("socks4").long("socks4").help("SOCKS4 proxy on given host + port").takes_value(true).empty_values(false))
    .arg(Arg::with_name("socks4a").long("socks4a").help("SOCKS4a proxy on given host + port").takes_value(true).empty_values(false))
    .arg(Arg::with_name("socks5").long("socks5").help("SOCKS5 proxy on given host + port").takes_value(true).empty_values(false))
    .arg(Arg::with_name("socks5-basic").long("socks5-basic").help("Enable username/password auth for SOCKS5 proxies"))
    .arg(Arg::with_name("socks5-gssapi").long("socks5-gssapi").help("Enable GSS-API auth for SOCKS5 proxies"))
    .arg(Arg::with_name("socks5-gssapi-nec").long("socks5-gssapi-nec").help("Compatibility with NEC SOCKS5 server"))
    .arg(Arg::with_name("socks5-gssapi-service").long("socks5-gssapi-service").help("SOCKS5 proxy service name for GSS-API").takes_value(true).empty_values(false))
    .arg(Arg::with_name("socks5-hostname").long("socks5-hostname").help("SOCKS5 proxy  pass host name to proxy").takes_value(true).empty_values(false))
    .arg(Arg::with_name("speed-limit").short('Y').long("speed-limit").help("Stop transfers slower than this").takes_value(true).empty_values(false))
    .arg(Arg::with_name("speed-time").short('y').long("speed-time").help("Trigger 'speed-limit' abort after this time").takes_value(true).empty_values(false))
    .arg(Arg::with_name("ssl").long("ssl").help("Try SSL/TLS"))
    .arg(Arg::with_name("ssl-allow-beast").long("ssl-allow-beast").help("Allow security flaw to improve interop"))
    .arg(Arg::with_name("ssl-no-revoke").long("ssl-no-revoke").help("Disable cert revocation checks (Schannel)"))
    .arg(Arg::with_name("ssl-reqd").long("ssl-reqd").help("Require SSL/TLS"))
    .arg(Arg::with_name("sslv2").short('2').long("sslv2").help("Use SSLv2"))
    .arg(Arg::with_name("sslv3").short('3').long("sslv3").help("Use SSLv3"))
    .arg(Arg::with_name("stderr").long("stderr").help("Where to redirect stderr"))
    .arg(Arg::with_name("styled-output").long("styled-output").help("Enable styled output for HTTP headers"))
    .arg(Arg::with_name("suppress-connect-headers").long("suppress-connect-headers").help("Suppress proxy CONNECT response headers"))
    .arg(Arg::with_name("tcp-fastopen").long("tcp-fastopen").help("Use TCP Fast Open"))
    .arg(Arg::with_name("tcp-nodelay").long("tcp-nodelay").help("Use the TCP_NODELAY option"))
    .arg(Arg::with_name("telnet-option").short('t').long("telnet-option").help("Set telnet option").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tftp-blksize").long("tftp-blksize").help("Set TFTP BLKSIZE option").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tftp-no-options").long("tftp-no-options").help("Do not send any TFTP options"))
    .arg(Arg::with_name("time-cond").short('z').long("time-cond").help("Transfer based on a time condition").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tls-max").long("tls-max").help("Set maximum allowed TLS version").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tls13-ciphers").long("tls13-ciphers").help("TLS 1.3 ciphersuites (OpenSSL)").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tlsauthtype").long("tlsauthtype").help("TLS authentication type").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tlspassword").long("tlspassword").help("TLS password"))
    .arg(Arg::with_name("tlsuser").long("tlsuser").help("TLS user name").takes_value(true).empty_values(false))
    .arg(Arg::with_name("tlsv1").short('1').long("tlsv1").help("Use TLSv1.0 or greater"))
    .arg(Arg::with_name("tlsv1.0").long("tlsv1.0").help("Use TLSv1.0 or greater"))
    .arg(Arg::with_name("tlsv1.1").long("tlsv1.1").help("Use TLSv1.1 or greater"))
    .arg(Arg::with_name("tlsv1.2").long("tlsv1.2").help("Use TLSv1.2 or greater"))
    .arg(Arg::with_name("tlsv1.3").long("tlsv1.3").help("Use TLSv1.3 or greater"))
    .arg(Arg::with_name("tr-encoding").long("tr-encoding").help("Request compressed transfer encoding"))
    .arg(Arg::with_name("trace").long("trace").help("Write a debug trace to FILE").takes_value(true).empty_values(false))
    .arg(Arg::with_name("trace-ascii").long("trace-ascii").help("Like --trace  but without hex output").takes_value(true).empty_values(false))
    .arg(Arg::with_name("trace-time").long("trace-time").help("Add time stamps to trace/verbose output"))
    .arg(Arg::with_name("unix-socket").long("unix-socket").help("Connect through this Unix domain socket").takes_value(true).empty_values(false))
    .arg(Arg::with_name("upload-file").short('T').long("upload-file").help("Transfer local FILE to destination").takes_value(true).empty_values(false))
    .arg(Arg::with_name("url").long("url").help("URL to work with").takes_value(true).empty_values(false))
    .arg(Arg::with_name("use-ascii").short('B').long("use-ascii").help("Use ASCII/text transfer"))
    .arg(Arg::with_name("user").short('u').long("user").help("Server user and password").takes_value(true).empty_values(false))
    .arg(Arg::with_name("user-agent").short('A').long("user-agent").help("Send User-Agent <name> to server").takes_value(true).empty_values(false))
    .arg(Arg::with_name("verbose").short('v').long("verbose").help("Make the operation more talkative"))
    .arg(Arg::with_name("write-out").short('w').long("write-out").help("Use output FORMAT after completion").takes_value(true).empty_values(false))
    .arg(Arg::with_name("xattr").long("xattr").help("Store metadata in extended file attributes"))
    .arg(Arg::with_name("ARG-URL").help("url").required(true).index(1))

}
