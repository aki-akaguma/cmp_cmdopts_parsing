use optstr_curl::parse_input_file;
use optstr_curl::OptStr;

pub fn do_gen_src() -> anyhow::Result<()> {
    let (vec_optstr, vec_line) = parse_input_file("comps/common/optstr-curl/src/curl.cmd.txt")?;
    //
    let sss = do_gen_src_help(&vec_optstr, &vec_line)?;
    update_file::update_file(&sss, "comps/cmp_commander/src/curl.cmd.help.rs.txt")?;
    //
    let sss = do_gen_src_match(&vec_optstr)?;
    update_file::update_file(&sss, "comps/cmp_commander/src/curl.cmd.match.rs.txt")?;
    //
    let sss = do_gen_src_lex(&vec_optstr)?;
    update_file::update_file(&sss, "comps/cmp_commander/src/curl.cmd.lex.rs.txt")?;
    //
    Ok(())
}

fn do_gen_src_help(vec_optstr: &[OptStr], _vec_line: &[String]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));
    sss += r#"
"#;
    //
    sss += r#"
#[derive(Debug, Default, PartialEq)]
pub struct CmdOptConf {
    pub opt_program: String,
    //
"#;
    for rec in vec_optstr.iter() {
        sss += &format!("    pub {}: {},\n", rec.field_s, rec.type_s);
    }
    sss += r#"    //
    pub arg_params: Vec<String>,
}
"#;
    //
    Ok(sss)
}

fn do_gen_src_match(vec_optstr: &[OptStr]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));
    sss += r#"
{
"#;
    //
    for rec in vec_optstr.iter() {
        let sholon = if !rec.lon.is_empty() {
            rec.lon.replace("-","").clone()
        } else {
            rec.sho.clone()
        };
        match rec.type_s.as_str() {
            "bool" => match rec.enum_s.as_str() {
                "Help" => {}
                "Version" => {}
                _ => {
                    sss += &format!("    if cmd.get(\"{}\").is_some() {{\n", sholon);
                    sss += &format!("        conf.{} = true;\n", rec.field_s);
                    sss += "    }\n";
                }
            },
            "String" => {
                sss += &format!("    if let Some(s) = cmd.get_str(\"{}\") {{\n", sholon);
                sss += &format!("        conf.{} = s;\n", rec.field_s);
                sss += "    }\n";
            }
            "u32" => {
                sss += &format!("    if let Some(i) = cmd.get_int(\"{}\") {{\n", sholon);
                sss += &format!("        conf.{} = i as u32;\n", rec.field_s);
                sss += "    }\n";
            }
            "u64" => {
                sss += &format!("    if let Some(i) = cmd.get_int(\"{}\") {{\n", sholon);
                sss += &format!("        conf.{} = i as u64;\n", rec.field_s);
                sss += "    }\n";
            }
            _ => unreachable!(),
        }
    }
    sss += r#"
}
"#;
    //
    Ok(sss)
}

fn do_gen_src_lex(vec_optstr: &[OptStr]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));
    //
    sss += r#"
{
    Commander::new()
    .version(env!("CARGO_PKG_VERSION"))
    .exec(env!("CARGO_PKG_NAME"))
    .usage("[options] <url>")
    .usage("[-h|--help|-v|--version]")
"#;
    for rec in vec_optstr.iter() {
        let sholon = if !rec.sho.is_empty() && !rec.lon.is_empty() {
            format!("-{}, --{}", rec.sho, rec.lon.replace("-",""))
        } else if !rec.sho.is_empty() {
            format!("-{}", rec.sho)
        } else {
            format!("--{}", rec.lon.replace("-",""))
        };
        match rec.type_s.as_str() {
            "bool" => match rec.enum_s.as_str() {
                "Help" => {}
                "Version" => {}
                _ => {
                    sss += &format!("    .option(\"{}\", \"{}\", None)\n", sholon, rec._comment);
                }
            },
            "String" => {
                sss += &format!(
                    "    .option_str(\"{} [value]\", \"{}\", None)\n",
                    sholon, rec._comment
                );
            }
            "u32" => {
                sss += &format!(
                    "    .option_int(\"{} [value]\", \"{}\", None)\n",
                    sholon, rec._comment
                );
            }
            "u64" => {
                sss += &format!(
                    "    .option_int(\"{} [value]\", \"{}\", None)\n",
                    sholon, rec._comment
                );
            }
            _ => unreachable!(),
        }
    }
    sss += r#"    .parse_list_or_exit(args)
"#;
    sss += r#"
}
"#;
    //
    Ok(sss)
}
