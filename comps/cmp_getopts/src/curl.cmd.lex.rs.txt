// WARN: This file is auto generated by cmp_getopts_xtask
{
    opts.optopt("", "abstract-unix-socket", "Connect via abstract Unix domain socket", "<>");
    opts.optopt("", "alt-svc", "Enable alt-svc with this cache file", "<>");
    opts.optflag("", "anyauth", "Pick any authentication method");
    opts.optflag("a", "append", "Append to target file when uploading");
    opts.optflag("", "basic", "Use HTTP Basic Authentication");
    opts.optopt("", "cacert", "CA certificate to verify peer against", "<>");
    opts.optopt("", "capath", "CA directory to verify peer against", "<>");
    opts.optopt("E", "cert", "Client certificate file and password", "<>");
    opts.optflag("", "cert-status", "Verify the status of the server certificate");
    opts.optopt("", "cert-type", "Certificate file type (DER/PEM/ENG)", "<>");
    opts.optopt("", "ciphers", "SSL ciphers to use", "<>");
    opts.optflag("", "compressed", "Request compressed response");
    opts.optflag("", "compressed-ssh", "Enable SSH compression");
    opts.optopt("K", "config", "Read config from a file", "<>");
    opts.optopt("", "connect-timeout", "Maximum time allowed for connection", "<>");
    opts.optopt("", "connect-to", "Connect to host", "<>");
    opts.optopt("C", "continue-at", "Resumed transfer offset", "<>");
    opts.optopt("b", "cookie", "Send cookies from string/file", "<>");
    opts.optopt("c", "cookie-jar", "Write cookies to <filename> after operation", "<>");
    opts.optflag("", "create-dirs", "Create necessary local directory hierarchy");
    opts.optflag("", "crlf", "Convert LF to CRLF in upload");
    opts.optopt("", "crlfile", "Get a CRL list in PEM format from the given file", "<>");
    opts.optopt("d", "data", "HTTP POST data", "<>");
    opts.optopt("", "data-ascii", "HTTP POST ASCII data", "<>");
    opts.optopt("", "data-binary", "HTTP POST binary data", "<>");
    opts.optopt("", "data-raw", "HTTP POST data  '@' allowed", "<>");
    opts.optopt("", "data-urlencode", "HTTP POST data url encoded", "<>");
    opts.optopt("", "delegation", "GSS-API delegation permission", "<>");
    opts.optflag("", "digest", "Use HTTP Digest Authentication");
    opts.optflag("q", "disable", "Disable .curlrc");
    opts.optflag("", "disable-eprt", "Inhibit using EPRT or LPRT");
    opts.optflag("", "disable-epsv", "Inhibit using EPSV");
    opts.optflag("", "disallow-username-in-url", "Disallow username in url");
    opts.optopt("", "dns-interface", "Interface to use for DNS requests", "<>");
    opts.optopt("", "dns-ipv4-addr", "IPv4 address to use for DNS requests", "<>");
    opts.optopt("", "dns-ipv6-addr", "IPv6 address to use for DNS requests", "<>");
    opts.optopt("", "dns-servers", "DNS server addrs to use", "<>");
    opts.optopt("", "doh-url", "Resolve host names over DOH", "<>");
    opts.optopt("D", "dump-header", "Write the received headers to <filename>", "<>");
    opts.optopt("", "egd-file", "EGD socket path for random data", "<>");
    opts.optopt("", "engine", "Crypto engine to use", "<>");
    opts.optopt("", "etag-save", "Get an ETag from response header and save it to a FILE", "<>");
    opts.optopt("", "etag-compare", "Get an ETag from a file and send a conditional request", "<>");
    opts.optopt("", "expect100-timeout", "How long to wait for 100-continue", "<>");
    opts.optflag("f", "fail", "Fail silently (no output at all) on HTTP errors");
    opts.optflag("", "fail-early", "Fail on first transfer error  do not continue");
    opts.optflag("", "false-start", "Enable TLS False Start");
    opts.optopt("F", "form", "Specify multipart MIME data", "<>");
    opts.optopt("", "form-string", "Specify multipart MIME data", "<>");
    opts.optopt("", "ftp-account", "Account data string", "<>");
    opts.optopt("", "ftp-alternative-to-user", "String to replace USER [name]", "<>");
    opts.optflag("", "ftp-create-dirs", "Create the remote dirs if not present");
    opts.optopt("", "ftp-method", "Control CWD usage", "<>");
    opts.optflag("", "ftp-pasv", "Use PASV/EPSV instead of PORT");
    opts.optopt("P", "ftp-port", "Use PORT instead of PASV", "<>");
    opts.optflag("", "ftp-pret", "Send PRET before PASV");
    opts.optflag("", "ftp-skip-pasv-ip", "Skip the IP address for PASV");
    opts.optflag("", "ftp-ssl-ccc", "Send CCC after authenticating");
    opts.optopt("", "ftp-ssl-ccc-mode", "Set CCC mode", "<>");
    opts.optflag("", "ftp-ssl-control", "Require SSL/TLS for FTP login  clear for transfer");
    opts.optflag("G", "get", "Put the post data in the URL and use GET");
    opts.optflag("g", "globoff", "Disable URL sequences and ranges using {} and []");
    opts.optopt("", "happy-eyeballs-timeout-ms", "How long to wait in milliseconds for IPv6 before trying IPv4", "<>");
    opts.optflag("", "haproxy-protocol", "Send HAProxy PROXY protocol v1 header");
    opts.optflag("I", "head", "Show document info only");
    opts.optopt("h", "header", "Pass custom header(s) to server", "<>");
    opts.optopt("", "hostpubmd5", "Acceptable MD5 hash of the host public key", "<>");
    opts.optflag("", "http0.9", "Allow HTTP 0.9 responses");
    opts.optflag("0", "http1.0", "Use HTTP 1.0");
    opts.optflag("", "http1.1", "Use HTTP 1.1");
    opts.optflag("", "http2", "Use HTTP 2");
    opts.optflag("", "http2-prior-knowledge", "Use HTTP 2 without HTTP/1.1 Upgrade");
    opts.optflag("", "http3", "Use HTTP v3");
    opts.optflag("", "ignore-content-length", "Ignore the size of the remote resource");
    opts.optflag("i", "include", "Include protocol response headers in the output");
    opts.optflag("k", "insecure", "Allow insecure server connections when using SSL");
    opts.optopt("", "interface", "Use network INTERFACE (or address)", "<>");
    opts.optflag("4", "ipv4", "Resolve names to IPv4 addresses");
    opts.optflag("6", "ipv6", "Resolve names to IPv6 addresses");
    opts.optflag("j", "junk-session-cookies", "Ignore session cookies read from file");
    opts.optopt("", "keepalive-time", "Interval time for keepalive probes", "<>");
    opts.optopt("", "key", "Private key file name", "<>");
    opts.optopt("", "key-type", "Private key file type (DER/PEM/ENG)", "<>");
    opts.optopt("", "krb", "Enable Kerberos with security <level>", "<>");
    opts.optopt("", "libcurl", "Dump libcurl equivalent code of this command line", "<>");
    opts.optopt("", "limit-rate", "Limit transfer speed to RATE", "<>");
    opts.optflag("l", "list-only", "List only mode");
    opts.optopt("", "local-port", "Force use of RANGE for local port numbers", "<>");
    opts.optflag("L", "location", "Follow redirects");
    opts.optflag("", "location-trusted", "Like --location  and send auth to other hosts");
    opts.optopt("", "login-options", "Server login options", "<>");
    opts.optopt("", "mail-auth", "Originator address of the original email", "<>");
    opts.optopt("", "mail-from", "Mail from this address", "<>");
    opts.optopt("", "mail-rcpt", "Mail to this address", "<>");
    opts.optflag("M", "manual", "Display the full manual");
    opts.optopt("", "max-filesize", "Maximum file size to download", "<>");
    opts.optopt("", "max-redirs", "Maximum number of redirects allowed", "<>");
    opts.optopt("m", "max-time", "Maximum time allowed for the transfer", "<>");
    opts.optflag("", "metalink", "Process given URLs as metalink XML file");
    opts.optflag("", "negotiate", "Use HTTP Negotiate (SPNEGO) authentication");
    opts.optflag("n", "netrc", "Must read .netrc for user name and password");
    opts.optopt("", "netrc-file", "Specify FILE for netrc", "<>");
    opts.optflag("", "netrc-optional", "Use either .netrc or URL");
    opts.optflag(":", "next", "Make next URL use its separate set of options");
    opts.optflag("", "no-alpn", "Disable the ALPN TLS extension");
    opts.optflag("N", "no-buffer", "Disable buffering of the output stream");
    opts.optflag("", "no-keepalive", "Disable TCP keepalive on the connection");
    opts.optflag("", "no-npn", "Disable the NPN TLS extension");
    opts.optflag("", "no-progress-meter", "Do not show the progress meter");
    opts.optflag("", "no-sessionid", "Disable SSL session-ID reusing");
    opts.optopt("", "noproxy", "List of hosts which do not use proxy", "<>");
    opts.optflag("", "ntlm", "Use HTTP NTLM authentication");
    opts.optflag("", "ntlm-wb", "Use HTTP NTLM authentication with winbind");
    opts.optopt("", "oauth2-bearer", "OAuth 2 Bearer Token", "<>");
    opts.optopt("o", "output", "Write to file instead of stdout", "<>");
    opts.optflag("Z", "parallel", "Perform transfers in parallel");
    opts.optflag("", "parallel-immediate", "Do not wait for multiplexing (with --parallel)");
    opts.optflag("", "parallel-max", "Maximum concurrency for parallel transfers");
    opts.optopt("", "pass", "Pass phrase for the private key", "<>");
    opts.optflag("", "path-as-is", "Do not squash .. sequences in URL path");
    opts.optopt("", "pinnedpubkey", "FILE/HASHES Public key to verify peer against", "<>");
    opts.optflag("", "post301", "Do not switch to GET after following a 301");
    opts.optflag("", "post302", "Do not switch to GET after following a 302");
    opts.optflag("", "post303", "Do not switch to GET after following a 303");
    opts.optopt("", "preproxy", "Use this proxy first", "<>");
    opts.optflag("#", "progress-bar", "Display transfer progress as a bar");
    opts.optopt("", "proto", "Enable/disable PROTOCOLS", "<>");
    opts.optopt("", "proto-default", "Use PROTOCOL for any URL missing a scheme", "<>");
    opts.optopt("", "proto-redir", "Enable/disable PROTOCOLS on redirect", "<>");
    opts.optopt("x", "proxy", "Use this proxy", "<>");
    opts.optflag("", "proxy-anyauth", "Pick any proxy authentication method");
    opts.optflag("", "proxy-basic", "Use Basic authentication on the proxy");
    opts.optopt("", "proxy-cacert", "CA certificate to verify peer against for proxy", "<>");
    opts.optopt("", "proxy-capath", "CA directory to verify peer against for proxy", "<>");
    opts.optopt("", "proxy-cert", "Set client certificate for proxy", "<>");
    opts.optopt("", "proxy-cert-type", "Client certificate type for HTTPS proxy", "<>");
    opts.optopt("", "proxy-ciphers", "SSL ciphers to use for proxy", "<>");
    opts.optopt("", "proxy-crlfile", "Set a CRL list for proxy", "<>");
    opts.optflag("", "proxy-digest", "Use Digest authentication on the proxy");
    opts.optopt("", "proxy-header", "Pass custom header(s) to proxy", "<>");
    opts.optflag("", "proxy-insecure", "Do HTTPS proxy connections without verifying the proxy");
    opts.optopt("", "proxy-key", "Private key for HTTPS proxy", "<>");
    opts.optopt("", "proxy-key-type", "Private key file type for proxy", "<>");
    opts.optflag("", "proxy-negotiate", "Use HTTP Negotiate (SPNEGO) authentication on the proxy");
    opts.optflag("", "proxy-ntlm", "Use NTLM authentication on the proxy");
    opts.optopt("", "proxy-pass", "Pass phrase for the private key for HTTPS proxy", "<>");
    opts.optopt("", "proxy-pinnedpubkey", "FILE/HASHES public key to verify proxy with", "<>");
    opts.optopt("", "proxy-service-name", "SPNEGO proxy service name", "<>");
    opts.optflag("", "proxy-ssl-allow-beast", "Allow security flaw for interop for HTTPS proxy");
    opts.optopt("", "proxy-tls13-ciphers", "TLS 1.3 ciphersuites for proxy (OpenSSL)", "<>");
    opts.optopt("", "proxy-tlsauthtype", "TLS authentication type for HTTPS proxy", "<>");
    opts.optopt("", "proxy-tlspassword", "TLS password for HTTPS proxy", "<>");
    opts.optopt("", "proxy-tlsuser", "TLS username for HTTPS proxy", "<>");
    opts.optflag("", "proxy-tlsv1", "Use TLSv1 for HTTPS proxy");
    opts.optopt("U", "proxy-user", "Proxy user and password", "<>");
    opts.optopt("", "proxy1.0", "Use HTTP/1.0 proxy on given port", "<>");
    opts.optflag("p", "proxytunnel", "Operate through an HTTP proxy tunnel (using CONNECT)");
    opts.optopt("", "pubkey", "SSH Public key file name", "<>");
    opts.optflag("Q", "quote", "Send command(s) to server before transfer");
    opts.optopt("", "random-file", "File for reading random data from", "<>");
    opts.optopt("r", "range", "Retrieve only the bytes within RANGE", "<>");
    opts.optflag("", "raw", "Do HTTP 'raw'; no transfer decoding");
    opts.optopt("e", "referer", "Referrer URL", "<>");
    opts.optflag("J", "remote-header-name", "Use the header-provided filename");
    opts.optflag("O", "remote-name", "Write output to a file named as the remote file");
    opts.optflag("", "remote-name-all", "Use the remote file name for all URLs");
    opts.optflag("R", "remote-time", "Set the remote file's time on the local output");
    opts.optopt("X", "request", "Specify request command to use", "<>");
    opts.optflag("", "request-target", "Specify the target for this request");
    opts.optopt("", "resolve", "Resolve the host+port to this address", "<>");
    opts.optopt("", "retry", "Retry request if transient problems occur", "<>");
    opts.optflag("", "retry-connrefused", "Retry on connection refused (use with --retry)");
    opts.optopt("", "retry-delay", "Wait time between retries", "<>");
    opts.optopt("", "retry-max-time", "Retry only within this period", "<>");
    opts.optopt("", "sasl-authzid", "Use this identity to act as during SASL PLAIN authentication", "<>");
    opts.optflag("", "sasl-ir", "Enable initial response in SASL authentication");
    opts.optopt("", "service-name", "SPNEGO service name", "<>");
    opts.optflag("S", "show-error", "Show error even when -s is used");
    opts.optflag("s", "silent", "Silent mode");
    opts.optopt("", "socks4", "SOCKS4 proxy on given host + port", "<>");
    opts.optopt("", "socks4a", "SOCKS4a proxy on given host + port", "<>");
    opts.optopt("", "socks5", "SOCKS5 proxy on given host + port", "<>");
    opts.optflag("", "socks5-basic", "Enable username/password auth for SOCKS5 proxies");
    opts.optflag("", "socks5-gssapi", "Enable GSS-API auth for SOCKS5 proxies");
    opts.optflag("", "socks5-gssapi-nec", "Compatibility with NEC SOCKS5 server");
    opts.optopt("", "socks5-gssapi-service", "SOCKS5 proxy service name for GSS-API", "<>");
    opts.optopt("", "socks5-hostname", "SOCKS5 proxy  pass host name to proxy", "<>");
    opts.optopt("Y", "speed-limit", "Stop transfers slower than this", "<>");
    opts.optopt("y", "speed-time", "Trigger 'speed-limit' abort after this time", "<>");
    opts.optflag("", "ssl", "Try SSL/TLS");
    opts.optflag("", "ssl-allow-beast", "Allow security flaw to improve interop");
    opts.optflag("", "ssl-no-revoke", "Disable cert revocation checks (Schannel)");
    opts.optflag("", "ssl-reqd", "Require SSL/TLS");
    opts.optflag("2", "sslv2", "Use SSLv2");
    opts.optflag("3", "sslv3", "Use SSLv3");
    opts.optflag("", "stderr", "Where to redirect stderr");
    opts.optflag("", "styled-output", "Enable styled output for HTTP headers");
    opts.optflag("", "suppress-connect-headers", "Suppress proxy CONNECT response headers");
    opts.optflag("", "tcp-fastopen", "Use TCP Fast Open");
    opts.optflag("", "tcp-nodelay", "Use the TCP_NODELAY option");
    opts.optopt("t", "telnet-option", "Set telnet option", "<>");
    opts.optopt("", "tftp-blksize", "Set TFTP BLKSIZE option", "<>");
    opts.optflag("", "tftp-no-options", "Do not send any TFTP options");
    opts.optopt("z", "time-cond", "Transfer based on a time condition", "<>");
    opts.optopt("", "tls-max", "Set maximum allowed TLS version", "<>");
    opts.optopt("", "tls13-ciphers", "TLS 1.3 ciphersuites (OpenSSL)", "<>");
    opts.optopt("", "tlsauthtype", "TLS authentication type", "<>");
    opts.optflag("", "tlspassword", "TLS password");
    opts.optopt("", "tlsuser", "TLS user name", "<>");
    opts.optflag("1", "tlsv1", "Use TLSv1.0 or greater");
    opts.optflag("", "tlsv1.0", "Use TLSv1.0 or greater");
    opts.optflag("", "tlsv1.1", "Use TLSv1.1 or greater");
    opts.optflag("", "tlsv1.2", "Use TLSv1.2 or greater");
    opts.optflag("", "tlsv1.3", "Use TLSv1.3 or greater");
    opts.optflag("", "tr-encoding", "Request compressed transfer encoding");
    opts.optopt("", "trace", "Write a debug trace to FILE", "<>");
    opts.optopt("", "trace-ascii", "Like --trace  but without hex output", "<>");
    opts.optflag("", "trace-time", "Add time stamps to trace/verbose output");
    opts.optopt("", "unix-socket", "Connect through this Unix domain socket", "<>");
    opts.optopt("T", "upload-file", "Transfer local FILE to destination", "<>");
    opts.optopt("", "url", "URL to work with", "<>");
    opts.optflag("B", "use-ascii", "Use ASCII/text transfer");
    opts.optopt("u", "user", "Server user and password", "<>");
    opts.optopt("A", "user-agent", "Send User-Agent <name> to server", "<>");
    opts.optflag("v", "verbose", "Make the operation more talkative");
    opts.optopt("w", "write-out", "Use output FORMAT after completion", "<>");
    opts.optflag("", "xattr", "Store metadata in extended file attributes");
    opts.optflag("H", "help", "display this help and exit");
    opts.optflag("V", "version", "output version information and exit");
}
