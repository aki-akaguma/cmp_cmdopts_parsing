// WARN: This file is auto generated by cmp_gumdrop_xtask

#[derive(Debug, Default, PartialEq)]
pub struct CmdOptConf {
    pub opt_program: String,
    //
    pub opt_abstract_unix_socket: String,
    pub opt_alt_svc: String,
    pub flg_anyauth: bool,
    pub flg_append: bool,
    pub flg_basic: bool,
    pub opt_cacert: String,
    pub opt_capath: String,
    pub opt_cert: String,
    pub flg_cert_status: bool,
    pub opt_cert_type: String,
    pub opt_ciphers: String,
    pub flg_compressed: bool,
    pub flg_compressed_ssh: bool,
    pub opt_config: String,
    pub opt_connect_timeout: u32,
    pub opt_connect_to: String,
    pub opt_continue_at: u64,
    pub opt_cookie: String,
    pub opt_cookie_jar: String,
    pub flg_create_dirs: bool,
    pub flg_crlf: bool,
    pub opt_crlfile: String,
    pub opt_data: String,
    pub opt_data_ascii: String,
    pub opt_data_binary: String,
    pub opt_data_raw: String,
    pub opt_data_urlencode: String,
    pub opt_delegation: String,
    pub flg_digest: bool,
    pub flg_disable: bool,
    pub flg_disable_eprt: bool,
    pub flg_disable_epsv: bool,
    pub flg_disallow_username_in_url: bool,
    pub opt_dns_interface: String,
    pub opt_dns_ipv4_addr: String,
    pub opt_dns_ipv6_addr: String,
    pub opt_dns_servers: String,
    pub opt_doh_url: String,
    pub opt_dump_header: String,
    pub opt_egd_file: String,
    pub opt_engine: String,
    pub opt_etag_save: String,
    pub opt_etag_compare: String,
    pub opt_expect100_timeout: u32,
    pub flg_fail: bool,
    pub flg_fail_early: bool,
    pub flg_false_start: bool,
    pub opt_form: String,
    pub opt_form_string: String,
    pub opt_ftp_account: String,
    pub opt_ftp_alternative_to_user: String,
    pub flg_ftp_create_dirs: bool,
    pub opt_ftp_method: String,
    pub flg_ftp_pasv: bool,
    pub opt_ftp_port: String,
    pub flg_ftp_pret: bool,
    pub flg_ftp_skip_pasv_ip: bool,
    pub flg_ftp_ssl_ccc: bool,
    pub opt_ftp_ssl_ccc_mode: String,
    pub flg_ftp_ssl_control: bool,
    pub flg_get: bool,
    pub flg_globoff: bool,
    pub opt_happy_eyeballs_timeout_ms: u64,
    pub flg_haproxy_protocol: bool,
    pub flg_head: bool,
    pub opt_header: String,
    pub opt_hostpubmd5: String,
    pub flg_http0_9: bool,
    pub flg_http1_0: bool,
    pub flg_http1_1: bool,
    pub flg_http2: bool,
    pub flg_http2_prior_knowledge: bool,
    pub flg_http3: bool,
    pub flg_ignore_content_length: bool,
    pub flg_include: bool,
    pub flg_insecure: bool,
    pub opt_interface: String,
    pub flg_ipv4: bool,
    pub flg_ipv6: bool,
    pub flg_junk_session_cookies: bool,
    pub opt_keepalive_time: u32,
    pub opt_key: String,
    pub opt_key_type: String,
    pub opt_krb: String,
    pub opt_libcurl: String,
    pub opt_limit_rate: u64,
    pub flg_list_only: bool,
    pub opt_local_port: String,
    pub flg_location: bool,
    pub flg_location_trusted: bool,
    pub opt_login_options: String,
    pub opt_mail_auth: String,
    pub opt_mail_from: String,
    pub opt_mail_rcpt: String,
    pub flg_manual: bool,
    pub opt_max_filesize: u64,
    pub opt_max_redirs: u32,
    pub opt_max_time: u32,
    pub flg_metalink: bool,
    pub flg_negotiate: bool,
    pub flg_netrc: bool,
    pub opt_netrc_file: String,
    pub flg_netrc_optional: bool,
    pub flg_next: bool,
    pub flg_no_alpn: bool,
    pub flg_no_buffer: bool,
    pub flg_no_keepalive: bool,
    pub flg_no_npn: bool,
    pub flg_no_progress_meter: bool,
    pub flg_no_sessionid: bool,
    pub opt_noproxy: String,
    pub flg_ntlm: bool,
    pub flg_ntlm_wb: bool,
    pub opt_oauth2_bearer: String,
    pub opt_output: String,
    pub flg_parallel: bool,
    pub flg_parallel_immediate: bool,
    pub flg_parallel_max: bool,
    pub opt_pass: String,
    pub flg_path_as_is: bool,
    pub opt_pinnedpubkey: String,
    pub flg_post301: bool,
    pub flg_post302: bool,
    pub flg_post303: bool,
    pub opt_preproxy: String,
    pub flg_progress_bar: bool,
    pub opt_proto: String,
    pub opt_proto_default: String,
    pub opt_proto_redir: String,
    pub opt_proxy: String,
    pub flg_proxy_anyauth: bool,
    pub flg_proxy_basic: bool,
    pub opt_proxy_cacert: String,
    pub opt_proxy_capath: String,
    pub opt_proxy_cert: String,
    pub opt_proxy_cert_type: String,
    pub opt_proxy_ciphers: String,
    pub opt_proxy_crlfile: String,
    pub flg_proxy_digest: bool,
    pub opt_proxy_header: String,
    pub flg_proxy_insecure: bool,
    pub opt_proxy_key: String,
    pub opt_proxy_key_type: String,
    pub flg_proxy_negotiate: bool,
    pub flg_proxy_ntlm: bool,
    pub opt_proxy_pass: String,
    pub opt_proxy_pinnedpubkey: String,
    pub opt_proxy_service_name: String,
    pub flg_proxy_ssl_allow_beast: bool,
    pub opt_proxy_tls13_ciphers: String,
    pub opt_proxy_tlsauthtype: String,
    pub opt_proxy_tlspassword: String,
    pub opt_proxy_tlsuser: String,
    pub flg_proxy_tlsv1: bool,
    pub opt_proxy_user: String,
    pub opt_proxy1_0: String,
    pub flg_proxytunnel: bool,
    pub opt_pubkey: String,
    pub flg_quote: bool,
    pub opt_random_file: String,
    pub opt_range: String,
    pub flg_raw: bool,
    pub opt_referer: String,
    pub flg_remote_header_name: bool,
    pub flg_remote_name: bool,
    pub flg_remote_name_all: bool,
    pub flg_remote_time: bool,
    pub opt_request: String,
    pub flg_request_target: bool,
    pub opt_resolve: String,
    pub opt_retry: u32,
    pub flg_retry_connrefused: bool,
    pub opt_retry_delay: u32,
    pub opt_retry_max_time: u32,
    pub opt_sasl_authzid: String,
    pub flg_sasl_ir: bool,
    pub opt_service_name: String,
    pub flg_show_error: bool,
    pub flg_silent: bool,
    pub opt_socks4: String,
    pub opt_socks4a: String,
    pub opt_socks5: String,
    pub flg_socks5_basic: bool,
    pub flg_socks5_gssapi: bool,
    pub flg_socks5_gssapi_nec: bool,
    pub opt_socks5_gssapi_service: String,
    pub opt_socks5_hostname: String,
    pub opt_speed_limit: u64,
    pub opt_speed_time: u32,
    pub flg_ssl: bool,
    pub flg_ssl_allow_beast: bool,
    pub flg_ssl_no_revoke: bool,
    pub flg_ssl_reqd: bool,
    pub flg_sslv2: bool,
    pub flg_sslv3: bool,
    pub flg_stderr: bool,
    pub flg_styled_output: bool,
    pub flg_suppress_connect_headers: bool,
    pub flg_tcp_fastopen: bool,
    pub flg_tcp_nodelay: bool,
    pub opt_telnet_option: String,
    pub opt_tftp_blksize: u32,
    pub flg_tftp_no_options: bool,
    pub opt_time_cond: String,
    pub opt_tls_max: String,
    pub opt_tls13_ciphers: String,
    pub opt_tlsauthtype: String,
    pub flg_tlspassword: bool,
    pub opt_tlsuser: String,
    pub flg_tlsv1: bool,
    pub flg_tlsv1_0: bool,
    pub flg_tlsv1_1: bool,
    pub flg_tlsv1_2: bool,
    pub flg_tlsv1_3: bool,
    pub flg_tr_encoding: bool,
    pub opt_trace: String,
    pub opt_trace_ascii: String,
    pub flg_trace_time: bool,
    pub opt_unix_socket: String,
    pub opt_upload_file: String,
    pub opt_url: String,
    pub flg_use_ascii: bool,
    pub opt_user: String,
    pub opt_user_agent: String,
    pub flg_verbose: bool,
    pub opt_write_out: String,
    pub flg_xattr: bool,
    pub flg_help: bool,
    pub flg_version: bool,
    //
    pub arg_params: Vec<String>,
}

#[derive(Options, Debug, Default)]
pub struct MyOptions {
    #[options(free)]
    free: Vec<String>,
    //
    #[options(
        no_short,
        help = "Connect via abstract Unix domain socket",
        meta = "<path>",
    )]
    pub abstract_unix_socket: String,
    #[options(
        no_short,
        help = "Enable alt-svc with this cache file",
        meta = "<file name>",
    )]
    pub alt_svc: String,
    #[options(
        no_short,
        help = "Pick any authentication method",
    )]
    pub anyauth: bool,
    #[options(
        short = "a",
        help = "Append to target file when uploading",
    )]
    pub append: bool,
    #[options(
        no_short,
        help = "Use HTTP Basic Authentication",
    )]
    pub basic: bool,
    #[options(
        no_short,
        help = "CA certificate to verify peer against",
        meta = "<file>",
    )]
    pub cacert: String,
    #[options(
        no_short,
        help = "CA directory to verify peer against",
        meta = "<dir>",
    )]
    pub capath: String,
    #[options(
        short = "E",
        help = "Client certificate file and password",
        meta = "<certificate[:password]>",
    )]
    pub cert: String,
    #[options(
        no_short,
        help = "Verify the status of the server certificate",
    )]
    pub cert_status: bool,
    #[options(
        no_short,
        help = "Certificate file type (DER/PEM/ENG)",
        meta = "<type>",
    )]
    pub cert_type: String,
    #[options(
        no_short,
        help = "SSL ciphers to use",
        meta = "<list of ciphers>",
    )]
    pub ciphers: String,
    #[options(
        no_short,
        help = "Request compressed response",
    )]
    pub compressed: bool,
    #[options(
        no_short,
        help = "Enable SSH compression",
    )]
    pub compressed_ssh: bool,
    #[options(
        short = "K",
        help = "Read config from a file",
        meta = "<file>",
    )]
    pub config: String,
    #[options(
        no_short,
        help = "Maximum time allowed for connection",
        meta = "<seconds>",
    )]
    pub connect_timeout: u32,
    #[options(
        no_short,
        help = "Connect to host",
        meta = "<HOST1:PORT1:HOST2:PORT2>",
    )]
    pub connect_to: String,
    #[options(
        short = "C",
        help = "Resumed transfer offset",
        meta = "<offset>",
    )]
    pub continue_at: u64,
    #[options(
        short = "b",
        help = "Send cookies from string/file",
        meta = "<data|filename>",
    )]
    pub cookie: String,
    #[options(
        short = "c",
        help = "Write cookies to <filename> after operation",
        meta = "<filename>",
    )]
    pub cookie_jar: String,
    #[options(
        no_short,
        help = "Create necessary local directory hierarchy",
    )]
    pub create_dirs: bool,
    #[options(
        no_short,
        help = "Convert LF to CRLF in upload",
    )]
    pub crlf: bool,
    #[options(
        no_short,
        help = "Get a CRL list in PEM format from the given file",
        meta = "<file>",
    )]
    pub crlfile: String,
    #[options(
        short = "d",
        help = "HTTP POST data",
        meta = "<data>",
    )]
    pub data: String,
    #[options(
        no_short,
        help = "HTTP POST ASCII data",
        meta = "<data>",
    )]
    pub data_ascii: String,
    #[options(
        no_short,
        help = "HTTP POST binary data",
        meta = "<data>",
    )]
    pub data_binary: String,
    #[options(
        no_short,
        help = "HTTP POST data  '@' allowed",
        meta = "<data>",
    )]
    pub data_raw: String,
    #[options(
        no_short,
        help = "HTTP POST data url encoded",
        meta = "<data>",
    )]
    pub data_urlencode: String,
    #[options(
        no_short,
        help = "GSS-API delegation permission",
        meta = "<LEVEL>",
    )]
    pub delegation: String,
    #[options(
        no_short,
        help = "Use HTTP Digest Authentication",
    )]
    pub digest: bool,
    #[options(
        short = "q",
        help = "Disable .curlrc",
    )]
    pub disable: bool,
    #[options(
        no_short,
        help = "Inhibit using EPRT or LPRT",
    )]
    pub disable_eprt: bool,
    #[options(
        no_short,
        help = "Inhibit using EPSV",
    )]
    pub disable_epsv: bool,
    #[options(
        no_short,
        help = "Disallow username in url",
    )]
    pub disallow_username_in_url: bool,
    #[options(
        no_short,
        help = "Interface to use for DNS requests",
        meta = "<interface>",
    )]
    pub dns_interface: String,
    #[options(
        no_short,
        help = "IPv4 address to use for DNS requests",
        meta = "<address>",
    )]
    pub dns_ipv4_addr: String,
    #[options(
        no_short,
        help = "IPv6 address to use for DNS requests",
        meta = "<address>",
    )]
    pub dns_ipv6_addr: String,
    #[options(
        no_short,
        help = "DNS server addrs to use",
        meta = "<addresses>",
    )]
    pub dns_servers: String,
    #[options(
        no_short,
        help = "Resolve host names over DOH",
        meta = "<URL>",
    )]
    pub doh_url: String,
    #[options(
        short = "D",
        help = "Write the received headers to <filename>",
        meta = "<filename>",
    )]
    pub dump_header: String,
    #[options(
        no_short,
        help = "EGD socket path for random data",
        meta = "<file>",
    )]
    pub egd_file: String,
    #[options(
        no_short,
        help = "Crypto engine to use",
        meta = "<name>",
    )]
    pub engine: String,
    #[options(
        no_short,
        help = "Get an ETag from response header and save it to a FILE",
        meta = "<file>",
    )]
    pub etag_save: String,
    #[options(
        no_short,
        help = "Get an ETag from a file and send a conditional request",
        meta = "<file>",
    )]
    pub etag_compare: String,
    #[options(
        no_short,
        help = "How long to wait for 100-continue",
        meta = "<seconds>",
    )]
    pub expect100_timeout: u32,
    #[options(
        short = "f",
        help = "Fail silently (no output at all) on HTTP errors",
    )]
    pub fail: bool,
    #[options(
        no_short,
        help = "Fail on first transfer error  do not continue",
    )]
    pub fail_early: bool,
    #[options(
        no_short,
        help = "Enable TLS False Start",
    )]
    pub false_start: bool,
    #[options(
        short = "F",
        help = "Specify multipart MIME data",
        meta = "<name=content>",
    )]
    pub form: String,
    #[options(
        no_short,
        help = "Specify multipart MIME data",
        meta = "<name=string>",
    )]
    pub form_string: String,
    #[options(
        no_short,
        help = "Account data string",
        meta = "<data>",
    )]
    pub ftp_account: String,
    #[options(
        no_short,
        help = "String to replace USER [name]",
        meta = "<command>",
    )]
    pub ftp_alternative_to_user: String,
    #[options(
        no_short,
        help = "Create the remote dirs if not present",
    )]
    pub ftp_create_dirs: bool,
    #[options(
        no_short,
        help = "Control CWD usage",
        meta = "<method>",
    )]
    pub ftp_method: String,
    #[options(
        no_short,
        help = "Use PASV/EPSV instead of PORT",
    )]
    pub ftp_pasv: bool,
    #[options(
        short = "P",
        help = "Use PORT instead of PASV",
        meta = "<address>",
    )]
    pub ftp_port: String,
    #[options(
        no_short,
        help = "Send PRET before PASV",
    )]
    pub ftp_pret: bool,
    #[options(
        no_short,
        help = "Skip the IP address for PASV",
    )]
    pub ftp_skip_pasv_ip: bool,
    #[options(
        no_short,
        help = "Send CCC after authenticating",
    )]
    pub ftp_ssl_ccc: bool,
    #[options(
        no_short,
        help = "Set CCC mode",
        meta = "<active/passive>",
    )]
    pub ftp_ssl_ccc_mode: String,
    #[options(
        no_short,
        help = "Require SSL/TLS for FTP login  clear for transfer",
    )]
    pub ftp_ssl_control: bool,
    #[options(
        short = "G",
        help = "Put the post data in the URL and use GET",
    )]
    pub get: bool,
    #[options(
        short = "g",
        help = "Disable URL sequences and ranges using {} and []",
    )]
    pub globoff: bool,
    #[options(
        no_short,
        help = "How long to wait in milliseconds for IPv6 before trying IPv4",
        meta = "<milliseconds>",
    )]
    pub happy_eyeballs_timeout_ms: u64,
    #[options(
        no_short,
        help = "Send HAProxy PROXY protocol v1 header",
    )]
    pub haproxy_protocol: bool,
    #[options(
        short = "I",
        help = "Show document info only",
    )]
    pub head: bool,
    #[options(
        no_short,
        help = "Pass custom header(s) to server",
        meta = "<header/@file>",
    )]
    pub header: String,
    #[options(
        no_short,
        help = "Acceptable MD5 hash of the host public key",
        meta = "<md5>",
    )]
    pub hostpubmd5: String,
    #[options(
        no_short,
        help = "Allow HTTP 0.9 responses",
    )]
    pub http0_9: bool,
    #[options(
        short = "0",
        help = "Use HTTP 1.0",
    )]
    pub http1_0: bool,
    #[options(
        no_short,
        help = "Use HTTP 1.1",
    )]
    pub http1_1: bool,
    #[options(
        no_short,
        help = "Use HTTP 2",
    )]
    pub http2: bool,
    #[options(
        no_short,
        help = "Use HTTP 2 without HTTP/1.1 Upgrade",
    )]
    pub http2_prior_knowledge: bool,
    #[options(
        no_short,
        help = "Use HTTP v3",
    )]
    pub http3: bool,
    #[options(
        no_short,
        help = "Ignore the size of the remote resource",
    )]
    pub ignore_content_length: bool,
    #[options(
        short = "i",
        help = "Include protocol response headers in the output",
    )]
    pub include: bool,
    #[options(
        short = "k",
        help = "Allow insecure server connections when using SSL",
    )]
    pub insecure: bool,
    #[options(
        no_short,
        help = "Use network INTERFACE (or address)",
        meta = "<name>",
    )]
    pub interface: String,
    #[options(
        short = "4",
        help = "Resolve names to IPv4 addresses",
    )]
    pub ipv4: bool,
    #[options(
        short = "6",
        help = "Resolve names to IPv6 addresses",
    )]
    pub ipv6: bool,
    #[options(
        short = "j",
        help = "Ignore session cookies read from file",
    )]
    pub junk_session_cookies: bool,
    #[options(
        no_short,
        help = "Interval time for keepalive probes",
        meta = "<seconds>",
    )]
    pub keepalive_time: u32,
    #[options(
        no_short,
        help = "Private key file name",
        meta = "<key>",
    )]
    pub key: String,
    #[options(
        no_short,
        help = "Private key file type (DER/PEM/ENG)",
        meta = "<type>",
    )]
    pub key_type: String,
    #[options(
        no_short,
        help = "Enable Kerberos with security <level>",
        meta = "<level>",
    )]
    pub krb: String,
    #[options(
        no_short,
        help = "Dump libcurl equivalent code of this command line",
        meta = "<file>",
    )]
    pub libcurl: String,
    #[options(
        no_short,
        help = "Limit transfer speed to RATE",
        meta = "<speed>",
    )]
    pub limit_rate: u64,
    #[options(
        short = "l",
        help = "List only mode",
    )]
    pub list_only: bool,
    #[options(
        no_short,
        help = "Force use of RANGE for local port numbers",
        meta = "<num/range>",
    )]
    pub local_port: String,
    #[options(
        short = "L",
        help = "Follow redirects",
    )]
    pub location: bool,
    #[options(
        no_short,
        help = "Like --location  and send auth to other hosts",
    )]
    pub location_trusted: bool,
    #[options(
        no_short,
        help = "Server login options",
        meta = "<options>",
    )]
    pub login_options: String,
    #[options(
        no_short,
        help = "Originator address of the original email",
        meta = "<address>",
    )]
    pub mail_auth: String,
    #[options(
        no_short,
        help = "Mail from this address",
        meta = "<address>",
    )]
    pub mail_from: String,
    #[options(
        no_short,
        help = "Mail to this address",
        meta = "<address>",
    )]
    pub mail_rcpt: String,
    #[options(
        short = "M",
        help = "Display the full manual",
    )]
    pub manual: bool,
    #[options(
        no_short,
        help = "Maximum file size to download",
        meta = "<bytes>",
    )]
    pub max_filesize: u64,
    #[options(
        no_short,
        help = "Maximum number of redirects allowed",
        meta = "<num>",
    )]
    pub max_redirs: u32,
    #[options(
        short = "m",
        help = "Maximum time allowed for the transfer",
        meta = "<seconds>",
    )]
    pub max_time: u32,
    #[options(
        no_short,
        help = "Process given URLs as metalink XML file",
    )]
    pub metalink: bool,
    #[options(
        no_short,
        help = "Use HTTP Negotiate (SPNEGO) authentication",
    )]
    pub negotiate: bool,
    #[options(
        short = "n",
        help = "Must read .netrc for user name and password",
    )]
    pub netrc: bool,
    #[options(
        no_short,
        help = "Specify FILE for netrc",
        meta = "<filename>",
    )]
    pub netrc_file: String,
    #[options(
        no_short,
        help = "Use either .netrc or URL",
    )]
    pub netrc_optional: bool,
    #[options(
        short = ":",
        help = "Make next URL use its separate set of options",
    )]
    pub next: bool,
    #[options(
        no_short,
        help = "Disable the ALPN TLS extension",
    )]
    pub no_alpn: bool,
    #[options(
        short = "N",
        help = "Disable buffering of the output stream",
    )]
    pub no_buffer: bool,
    #[options(
        no_short,
        help = "Disable TCP keepalive on the connection",
    )]
    pub no_keepalive: bool,
    #[options(
        no_short,
        help = "Disable the NPN TLS extension",
    )]
    pub no_npn: bool,
    #[options(
        no_short,
        help = "Do not show the progress meter",
    )]
    pub no_progress_meter: bool,
    #[options(
        no_short,
        help = "Disable SSL session-ID reusing",
    )]
    pub no_sessionid: bool,
    #[options(
        no_short,
        help = "List of hosts which do not use proxy",
        meta = "<no-proxy-list>",
    )]
    pub noproxy: String,
    #[options(
        no_short,
        help = "Use HTTP NTLM authentication",
    )]
    pub ntlm: bool,
    #[options(
        no_short,
        help = "Use HTTP NTLM authentication with winbind",
    )]
    pub ntlm_wb: bool,
    #[options(
        no_short,
        help = "OAuth 2 Bearer Token",
        meta = "<token>",
    )]
    pub oauth2_bearer: String,
    #[options(
        short = "o",
        help = "Write to file instead of stdout",
        meta = "<file>",
    )]
    pub output: String,
    #[options(
        short = "Z",
        help = "Perform transfers in parallel",
    )]
    pub parallel: bool,
    #[options(
        no_short,
        help = "Do not wait for multiplexing (with --parallel)",
    )]
    pub parallel_immediate: bool,
    #[options(
        no_short,
        help = "Maximum concurrency for parallel transfers",
    )]
    pub parallel_max: bool,
    #[options(
        no_short,
        help = "Pass phrase for the private key",
        meta = "<phrase>",
    )]
    pub pass: String,
    #[options(
        no_short,
        help = "Do not squash .. sequences in URL path",
    )]
    pub path_as_is: bool,
    #[options(
        no_short,
        help = "FILE/HASHES Public key to verify peer against",
        meta = "<hashes>",
    )]
    pub pinnedpubkey: String,
    #[options(
        no_short,
        help = "Do not switch to GET after following a 301",
    )]
    pub post301: bool,
    #[options(
        no_short,
        help = "Do not switch to GET after following a 302",
    )]
    pub post302: bool,
    #[options(
        no_short,
        help = "Do not switch to GET after following a 303",
    )]
    pub post303: bool,
    #[options(
        no_short,
        help = "Use this proxy first",
        meta = "<[protocol://]host[:port]>",
    )]
    pub preproxy: String,
    #[options(
        short = "#",
        help = "Display transfer progress as a bar",
    )]
    pub progress_bar: bool,
    #[options(
        no_short,
        help = "Enable/disable PROTOCOLS",
        meta = "<protocols>",
    )]
    pub proto: String,
    #[options(
        no_short,
        help = "Use PROTOCOL for any URL missing a scheme",
        meta = "<protocol>",
    )]
    pub proto_default: String,
    #[options(
        no_short,
        help = "Enable/disable PROTOCOLS on redirect",
        meta = "<protocols>",
    )]
    pub proto_redir: String,
    #[options(
        short = "x",
        help = "Use this proxy",
        meta = "<[protocol://]host[:port]>",
    )]
    pub proxy: String,
    #[options(
        no_short,
        help = "Pick any proxy authentication method",
    )]
    pub proxy_anyauth: bool,
    #[options(
        no_short,
        help = "Use Basic authentication on the proxy",
    )]
    pub proxy_basic: bool,
    #[options(
        no_short,
        help = "CA certificate to verify peer against for proxy",
        meta = "<file>",
    )]
    pub proxy_cacert: String,
    #[options(
        no_short,
        help = "CA directory to verify peer against for proxy",
        meta = "<dir>",
    )]
    pub proxy_capath: String,
    #[options(
        no_short,
        help = "Set client certificate for proxy",
        meta = "<cert[:passwd]>",
    )]
    pub proxy_cert: String,
    #[options(
        no_short,
        help = "Client certificate type for HTTPS proxy",
        meta = "<type>",
    )]
    pub proxy_cert_type: String,
    #[options(
        no_short,
        help = "SSL ciphers to use for proxy",
        meta = "<list>",
    )]
    pub proxy_ciphers: String,
    #[options(
        no_short,
        help = "Set a CRL list for proxy",
        meta = "<file>",
    )]
    pub proxy_crlfile: String,
    #[options(
        no_short,
        help = "Use Digest authentication on the proxy",
    )]
    pub proxy_digest: bool,
    #[options(
        no_short,
        help = "Pass custom header(s) to proxy",
        meta = "<header/@file>",
    )]
    pub proxy_header: String,
    #[options(
        no_short,
        help = "Do HTTPS proxy connections without verifying the proxy",
    )]
    pub proxy_insecure: bool,
    #[options(
        no_short,
        help = "Private key for HTTPS proxy",
        meta = "<key>",
    )]
    pub proxy_key: String,
    #[options(
        no_short,
        help = "Private key file type for proxy",
        meta = "<type>",
    )]
    pub proxy_key_type: String,
    #[options(
        no_short,
        help = "Use HTTP Negotiate (SPNEGO) authentication on the proxy",
    )]
    pub proxy_negotiate: bool,
    #[options(
        no_short,
        help = "Use NTLM authentication on the proxy",
    )]
    pub proxy_ntlm: bool,
    #[options(
        no_short,
        help = "Pass phrase for the private key for HTTPS proxy",
        meta = "<phrase>",
    )]
    pub proxy_pass: String,
    #[options(
        no_short,
        help = "FILE/HASHES public key to verify proxy with",
        meta = "<hashes>",
    )]
    pub proxy_pinnedpubkey: String,
    #[options(
        no_short,
        help = "SPNEGO proxy service name",
        meta = "<name>",
    )]
    pub proxy_service_name: String,
    #[options(
        no_short,
        help = "Allow security flaw for interop for HTTPS proxy",
    )]
    pub proxy_ssl_allow_beast: bool,
    #[options(
        no_short,
        help = "TLS 1.3 ciphersuites for proxy (OpenSSL)",
        meta = "<list>",
    )]
    pub proxy_tls13_ciphers: String,
    #[options(
        no_short,
        help = "TLS authentication type for HTTPS proxy",
        meta = "<type>",
    )]
    pub proxy_tlsauthtype: String,
    #[options(
        no_short,
        help = "TLS password for HTTPS proxy",
        meta = "<string>",
    )]
    pub proxy_tlspassword: String,
    #[options(
        no_short,
        help = "TLS username for HTTPS proxy",
        meta = "<name>",
    )]
    pub proxy_tlsuser: String,
    #[options(
        no_short,
        help = "Use TLSv1 for HTTPS proxy",
    )]
    pub proxy_tlsv1: bool,
    #[options(
        short = "U",
        help = "Proxy user and password",
        meta = "<user:password>",
    )]
    pub proxy_user: String,
    #[options(
        no_short,
        help = "Use HTTP/1.0 proxy on given port",
        meta = "<host[:port]>",
    )]
    pub proxy1_0: String,
    #[options(
        short = "p",
        help = "Operate through an HTTP proxy tunnel (using CONNECT)",
    )]
    pub proxytunnel: bool,
    #[options(
        no_short,
        help = "SSH Public key file name",
        meta = "<key>",
    )]
    pub pubkey: String,
    #[options(
        short = "Q",
        help = "Send command(s) to server before transfer",
    )]
    pub quote: bool,
    #[options(
        no_short,
        help = "File for reading random data from",
        meta = "<file>",
    )]
    pub random_file: String,
    #[options(
        short = "r",
        help = "Retrieve only the bytes within RANGE",
        meta = "<range>",
    )]
    pub range: String,
    #[options(
        no_short,
        help = "Do HTTP 'raw'; no transfer decoding",
    )]
    pub raw: bool,
    #[options(
        short = "e",
        help = "Referrer URL",
        meta = "<URL>",
    )]
    pub referer: String,
    #[options(
        short = "J",
        help = "Use the header-provided filename",
    )]
    pub remote_header_name: bool,
    #[options(
        short = "O",
        help = "Write output to a file named as the remote file",
    )]
    pub remote_name: bool,
    #[options(
        no_short,
        help = "Use the remote file name for all URLs",
    )]
    pub remote_name_all: bool,
    #[options(
        short = "R",
        help = "Set the remote file's time on the local output",
    )]
    pub remote_time: bool,
    #[options(
        short = "X",
        help = "Specify request command to use",
        meta = "<command>",
    )]
    pub request: String,
    #[options(
        no_short,
        help = "Specify the target for this request",
    )]
    pub request_target: bool,
    #[options(
        no_short,
        help = "Resolve the host+port to this address",
        meta = "<host:port:address[ address]...>",
    )]
    pub resolve: String,
    #[options(
        no_short,
        help = "Retry request if transient problems occur",
        meta = "<num>",
    )]
    pub retry: u32,
    #[options(
        no_short,
        help = "Retry on connection refused (use with --retry)",
    )]
    pub retry_connrefused: bool,
    #[options(
        no_short,
        help = "Wait time between retries",
        meta = "<seconds>",
    )]
    pub retry_delay: u32,
    #[options(
        no_short,
        help = "Retry only within this period",
        meta = "<seconds>",
    )]
    pub retry_max_time: u32,
    #[options(
        no_short,
        help = "Use this identity to act as during SASL PLAIN authentication",
        meta = "<identity>",
    )]
    pub sasl_authzid: String,
    #[options(
        no_short,
        help = "Enable initial response in SASL authentication",
    )]
    pub sasl_ir: bool,
    #[options(
        no_short,
        help = "SPNEGO service name",
        meta = "<name>",
    )]
    pub service_name: String,
    #[options(
        short = "S",
        help = "Show error even when -s is used",
    )]
    pub show_error: bool,
    #[options(
        short = "s",
        help = "Silent mode",
    )]
    pub silent: bool,
    #[options(
        no_short,
        help = "SOCKS4 proxy on given host + port",
        meta = "<host[:port]>",
    )]
    pub socks4: String,
    #[options(
        no_short,
        help = "SOCKS4a proxy on given host + port",
        meta = "<host[:port]>",
    )]
    pub socks4a: String,
    #[options(
        no_short,
        help = "SOCKS5 proxy on given host + port",
        meta = "<host[:port]>",
    )]
    pub socks5: String,
    #[options(
        no_short,
        help = "Enable username/password auth for SOCKS5 proxies",
    )]
    pub socks5_basic: bool,
    #[options(
        no_short,
        help = "Enable GSS-API auth for SOCKS5 proxies",
    )]
    pub socks5_gssapi: bool,
    #[options(
        no_short,
        help = "Compatibility with NEC SOCKS5 server",
    )]
    pub socks5_gssapi_nec: bool,
    #[options(
        no_short,
        help = "SOCKS5 proxy service name for GSS-API",
        meta = "<name>",
    )]
    pub socks5_gssapi_service: String,
    #[options(
        no_short,
        help = "SOCKS5 proxy  pass host name to proxy",
        meta = "<host[:port]>",
    )]
    pub socks5_hostname: String,
    #[options(
        short = "Y",
        help = "Stop transfers slower than this",
        meta = "<speed>",
    )]
    pub speed_limit: u64,
    #[options(
        short = "y",
        help = "Trigger 'speed-limit' abort after this time",
        meta = "<seconds>",
    )]
    pub speed_time: u32,
    #[options(
        no_short,
        help = "Try SSL/TLS",
    )]
    pub ssl: bool,
    #[options(
        no_short,
        help = "Allow security flaw to improve interop",
    )]
    pub ssl_allow_beast: bool,
    #[options(
        no_short,
        help = "Disable cert revocation checks (Schannel)",
    )]
    pub ssl_no_revoke: bool,
    #[options(
        no_short,
        help = "Require SSL/TLS",
    )]
    pub ssl_reqd: bool,
    #[options(
        short = "2",
        help = "Use SSLv2",
    )]
    pub sslv2: bool,
    #[options(
        short = "3",
        help = "Use SSLv3",
    )]
    pub sslv3: bool,
    #[options(
        no_short,
        help = "Where to redirect stderr",
    )]
    pub stderr: bool,
    #[options(
        no_short,
        help = "Enable styled output for HTTP headers",
    )]
    pub styled_output: bool,
    #[options(
        no_short,
        help = "Suppress proxy CONNECT response headers",
    )]
    pub suppress_connect_headers: bool,
    #[options(
        no_short,
        help = "Use TCP Fast Open",
    )]
    pub tcp_fastopen: bool,
    #[options(
        no_short,
        help = "Use the TCP_NODELAY option",
    )]
    pub tcp_nodelay: bool,
    #[options(
        short = "t",
        help = "Set telnet option",
        meta = "<opt=val>",
    )]
    pub telnet_option: String,
    #[options(
        no_short,
        help = "Set TFTP BLKSIZE option",
        meta = "<value>",
    )]
    pub tftp_blksize: u32,
    #[options(
        no_short,
        help = "Do not send any TFTP options",
    )]
    pub tftp_no_options: bool,
    #[options(
        short = "z",
        help = "Transfer based on a time condition",
        meta = "<time>",
    )]
    pub time_cond: String,
    #[options(
        no_short,
        help = "Set maximum allowed TLS version",
        meta = "<VERSION>",
    )]
    pub tls_max: String,
    #[options(
        no_short,
        help = "TLS 1.3 ciphersuites (OpenSSL)",
        meta = "<list>",
    )]
    pub tls13_ciphers: String,
    #[options(
        no_short,
        help = "TLS authentication type",
        meta = "<type>",
    )]
    pub tlsauthtype: String,
    #[options(
        no_short,
        help = "TLS password",
    )]
    pub tlspassword: bool,
    #[options(
        no_short,
        help = "TLS user name",
        meta = "<name>",
    )]
    pub tlsuser: String,
    #[options(
        short = "1",
        help = "Use TLSv1.0 or greater",
    )]
    pub tlsv1: bool,
    #[options(
        no_short,
        help = "Use TLSv1.0 or greater",
    )]
    pub tlsv1_0: bool,
    #[options(
        no_short,
        help = "Use TLSv1.1 or greater",
    )]
    pub tlsv1_1: bool,
    #[options(
        no_short,
        help = "Use TLSv1.2 or greater",
    )]
    pub tlsv1_2: bool,
    #[options(
        no_short,
        help = "Use TLSv1.3 or greater",
    )]
    pub tlsv1_3: bool,
    #[options(
        no_short,
        help = "Request compressed transfer encoding",
    )]
    pub tr_encoding: bool,
    #[options(
        no_short,
        help = "Write a debug trace to FILE",
        meta = "<file>",
    )]
    pub trace: String,
    #[options(
        no_short,
        help = "Like --trace  but without hex output",
        meta = "<file>",
    )]
    pub trace_ascii: String,
    #[options(
        no_short,
        help = "Add time stamps to trace/verbose output",
    )]
    pub trace_time: bool,
    #[options(
        no_short,
        help = "Connect through this Unix domain socket",
        meta = "<path>",
    )]
    pub unix_socket: String,
    #[options(
        short = "T",
        help = "Transfer local FILE to destination",
        meta = "<file>",
    )]
    pub upload_file: String,
    #[options(
        no_short,
        help = "URL to work with",
        meta = "<url>",
    )]
    pub url: String,
    #[options(
        short = "B",
        help = "Use ASCII/text transfer",
    )]
    pub use_ascii: bool,
    #[options(
        short = "u",
        help = "Server user and password",
        meta = "<user:password>",
    )]
    pub user: String,
    #[options(
        short = "A",
        help = "Send User-Agent <name> to server",
        meta = "<name>",
    )]
    pub user_agent: String,
    #[options(
        short = "v",
        help = "Make the operation more talkative",
    )]
    pub verbose: bool,
    #[options(
        short = "w",
        help = "Use output FORMAT after completion",
        meta = "<format>",
    )]
    pub write_out: String,
    #[options(
        no_short,
        help = "Store metadata in extended file attributes",
    )]
    pub xattr: bool,
    #[options(
        short = "H",
        help = "display this help and exit",
    )]
    pub help: bool,
    #[options(
        short = "V",
        help = "output version information and exit",
    )]
    pub version: bool,
    //
}
