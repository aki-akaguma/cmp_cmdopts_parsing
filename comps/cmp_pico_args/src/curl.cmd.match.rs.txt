// WARN: This file is auto generated by cmp_pico_args_xtask
{
    let x = pico_args.opt_value_from_str("--abstract-unix-socket");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_abstract_unix_socket = value_to_string("abstract-unix-socket", x)?
    }
    let x = pico_args.opt_value_from_str("--alt-svc");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_alt_svc = value_to_string("alt-svc", x)?
    }
    conf.flg_anyauth = pico_args.contains("--anyauth");
    conf.flg_append = pico_args.contains(["-a", "--append"]);
    conf.flg_basic = pico_args.contains("--basic");
    let x = pico_args.opt_value_from_str("--cacert");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_cacert = value_to_string("cacert", x)?
    }
    let x = pico_args.opt_value_from_str("--capath");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_capath = value_to_string("capath", x)?
    }
    let x = pico_args.opt_value_from_str(["-E", "--cert"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_cert = value_to_string("cert", x)?
    }
    conf.flg_cert_status = pico_args.contains("--cert-status");
    let x = pico_args.opt_value_from_str("--cert-type");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_cert_type = value_to_string("cert-type", x)?
    }
    let x = pico_args.opt_value_from_str("--ciphers");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_ciphers = value_to_string("ciphers", x)?
    }
    conf.flg_compressed = pico_args.contains("--compressed");
    conf.flg_compressed_ssh = pico_args.contains("--compressed-ssh");
    let x = pico_args.opt_value_from_str(["-K", "--config"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_config = value_to_string("config", x)?
    }
    let x = pico_args.opt_value_from_str("--connect-timeout");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_connect_timeout = value_to_u32("connect-timeout", x)?
    }
    let x = pico_args.opt_value_from_str("--connect-to");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_connect_to = value_to_string("connect-to", x)?
    }
    let x = pico_args.opt_value_from_str(["-C", "--continue-at"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_continue_at = value_to_u64("continue-at", x)?
    }
    let x = pico_args.opt_value_from_str(["-b", "--cookie"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_cookie = value_to_string("cookie", x)?
    }
    let x = pico_args.opt_value_from_str(["-c", "--cookie-jar"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_cookie_jar = value_to_string("cookie-jar", x)?
    }
    conf.flg_create_dirs = pico_args.contains("--create-dirs");
    conf.flg_crlf = pico_args.contains("--crlf");
    let x = pico_args.opt_value_from_str("--crlfile");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_crlfile = value_to_string("crlfile", x)?
    }
    let x = pico_args.opt_value_from_str(["-d", "--data"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_data = value_to_string("data", x)?
    }
    let x = pico_args.opt_value_from_str("--data-ascii");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_data_ascii = value_to_string("data-ascii", x)?
    }
    let x = pico_args.opt_value_from_str("--data-binary");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_data_binary = value_to_string("data-binary", x)?
    }
    let x = pico_args.opt_value_from_str("--data-raw");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_data_raw = value_to_string("data-raw", x)?
    }
    let x = pico_args.opt_value_from_str("--data-urlencode");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_data_urlencode = value_to_string("data-urlencode", x)?
    }
    let x = pico_args.opt_value_from_str("--delegation");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_delegation = value_to_string("delegation", x)?
    }
    conf.flg_digest = pico_args.contains("--digest");
    conf.flg_disable = pico_args.contains(["-q", "--disable"]);
    conf.flg_disable_eprt = pico_args.contains("--disable-eprt");
    conf.flg_disable_epsv = pico_args.contains("--disable-epsv");
    conf.flg_disallow_username_in_url = pico_args.contains("--disallow-username-in-url");
    let x = pico_args.opt_value_from_str("--dns-interface");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_dns_interface = value_to_string("dns-interface", x)?
    }
    let x = pico_args.opt_value_from_str("--dns-ipv4-addr");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_dns_ipv4_addr = value_to_string("dns-ipv4-addr", x)?
    }
    let x = pico_args.opt_value_from_str("--dns-ipv6-addr");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_dns_ipv6_addr = value_to_string("dns-ipv6-addr", x)?
    }
    let x = pico_args.opt_value_from_str("--dns-servers");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_dns_servers = value_to_string("dns-servers", x)?
    }
    let x = pico_args.opt_value_from_str("--doh-url");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_doh_url = value_to_string("doh-url", x)?
    }
    let x = pico_args.opt_value_from_str(["-D", "--dump-header"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_dump_header = value_to_string("dump-header", x)?
    }
    let x = pico_args.opt_value_from_str("--egd-file");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_egd_file = value_to_string("egd-file", x)?
    }
    let x = pico_args.opt_value_from_str("--engine");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_engine = value_to_string("engine", x)?
    }
    let x = pico_args.opt_value_from_str("--etag-save");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_etag_save = value_to_string("etag-save", x)?
    }
    let x = pico_args.opt_value_from_str("--etag-compare");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_etag_compare = value_to_string("etag-compare", x)?
    }
    let x = pico_args.opt_value_from_str("--expect100-timeout");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_expect100_timeout = value_to_u32("expect100-timeout", x)?
    }
    conf.flg_fail = pico_args.contains(["-f", "--fail"]);
    conf.flg_fail_early = pico_args.contains("--fail-early");
    conf.flg_false_start = pico_args.contains("--false-start");
    let x = pico_args.opt_value_from_str(["-F", "--form"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_form = value_to_string("form", x)?
    }
    let x = pico_args.opt_value_from_str("--form-string");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_form_string = value_to_string("form-string", x)?
    }
    let x = pico_args.opt_value_from_str("--ftp-account");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_ftp_account = value_to_string("ftp-account", x)?
    }
    let x = pico_args.opt_value_from_str("--ftp-alternative-to-user");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_ftp_alternative_to_user = value_to_string("ftp-alternative-to-user", x)?
    }
    conf.flg_ftp_create_dirs = pico_args.contains("--ftp-create-dirs");
    let x = pico_args.opt_value_from_str("--ftp-method");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_ftp_method = value_to_string("ftp-method", x)?
    }
    conf.flg_ftp_pasv = pico_args.contains("--ftp-pasv");
    let x = pico_args.opt_value_from_str(["-P", "--ftp-port"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_ftp_port = value_to_string("ftp-port", x)?
    }
    conf.flg_ftp_pret = pico_args.contains("--ftp-pret");
    conf.flg_ftp_skip_pasv_ip = pico_args.contains("--ftp-skip-pasv-ip");
    conf.flg_ftp_ssl_ccc = pico_args.contains("--ftp-ssl-ccc");
    let x = pico_args.opt_value_from_str("--ftp-ssl-ccc-mode");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_ftp_ssl_ccc_mode = value_to_string("ftp-ssl-ccc-mode", x)?
    }
    conf.flg_ftp_ssl_control = pico_args.contains("--ftp-ssl-control");
    conf.flg_get = pico_args.contains(["-G", "--get"]);
    conf.flg_globoff = pico_args.contains(["-g", "--globoff"]);
    let x = pico_args.opt_value_from_str("--happy-eyeballs-timeout-ms");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_happy_eyeballs_timeout_ms = value_to_u64("happy-eyeballs-timeout-ms", x)?
    }
    conf.flg_haproxy_protocol = pico_args.contains("--haproxy-protocol");
    conf.flg_head = pico_args.contains(["-I", "--head"]);
    let x = pico_args.opt_value_from_str(["-h", "--header"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_header = value_to_string("header", x)?
    }
    let x = pico_args.opt_value_from_str("--hostpubmd5");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_hostpubmd5 = value_to_string("hostpubmd5", x)?
    }
    conf.flg_http0_9 = pico_args.contains("--http0.9");
    conf.flg_http1_0 = pico_args.contains(["-0", "--http1.0"]);
    conf.flg_http1_1 = pico_args.contains("--http1.1");
    conf.flg_http2 = pico_args.contains("--http2");
    conf.flg_http2_prior_knowledge = pico_args.contains("--http2-prior-knowledge");
    conf.flg_http3 = pico_args.contains("--http3");
    conf.flg_ignore_content_length = pico_args.contains("--ignore-content-length");
    conf.flg_include = pico_args.contains(["-i", "--include"]);
    conf.flg_insecure = pico_args.contains(["-k", "--insecure"]);
    let x = pico_args.opt_value_from_str("--interface");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_interface = value_to_string("interface", x)?
    }
    conf.flg_ipv4 = pico_args.contains(["-4", "--ipv4"]);
    conf.flg_ipv6 = pico_args.contains(["-6", "--ipv6"]);
    conf.flg_junk_session_cookies = pico_args.contains(["-j", "--junk-session-cookies"]);
    let x = pico_args.opt_value_from_str("--keepalive-time");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_keepalive_time = value_to_u32("keepalive-time", x)?
    }
    let x = pico_args.opt_value_from_str("--key");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_key = value_to_string("key", x)?
    }
    let x = pico_args.opt_value_from_str("--key-type");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_key_type = value_to_string("key-type", x)?
    }
    let x = pico_args.opt_value_from_str("--krb");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_krb = value_to_string("krb", x)?
    }
    let x = pico_args.opt_value_from_str("--libcurl");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_libcurl = value_to_string("libcurl", x)?
    }
    let x = pico_args.opt_value_from_str("--limit-rate");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_limit_rate = value_to_u64("limit-rate", x)?
    }
    conf.flg_list_only = pico_args.contains(["-l", "--list-only"]);
    let x = pico_args.opt_value_from_str("--local-port");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_local_port = value_to_string("local-port", x)?
    }
    conf.flg_location = pico_args.contains(["-L", "--location"]);
    conf.flg_location_trusted = pico_args.contains("--location-trusted");
    let x = pico_args.opt_value_from_str("--login-options");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_login_options = value_to_string("login-options", x)?
    }
    let x = pico_args.opt_value_from_str("--mail-auth");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_mail_auth = value_to_string("mail-auth", x)?
    }
    let x = pico_args.opt_value_from_str("--mail-from");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_mail_from = value_to_string("mail-from", x)?
    }
    let x = pico_args.opt_value_from_str("--mail-rcpt");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_mail_rcpt = value_to_string("mail-rcpt", x)?
    }
    conf.flg_manual = pico_args.contains(["-M", "--manual"]);
    let x = pico_args.opt_value_from_str("--max-filesize");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_max_filesize = value_to_u64("max-filesize", x)?
    }
    let x = pico_args.opt_value_from_str("--max-redirs");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_max_redirs = value_to_u32("max-redirs", x)?
    }
    let x = pico_args.opt_value_from_str(["-m", "--max-time"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_max_time = value_to_u32("max-time", x)?
    }
    conf.flg_metalink = pico_args.contains("--metalink");
    conf.flg_negotiate = pico_args.contains("--negotiate");
    conf.flg_netrc = pico_args.contains(["-n", "--netrc"]);
    let x = pico_args.opt_value_from_str("--netrc-file");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_netrc_file = value_to_string("netrc-file", x)?
    }
    conf.flg_netrc_optional = pico_args.contains("--netrc-optional");
    conf.flg_next = pico_args.contains(["-:", "--next"]);
    conf.flg_no_alpn = pico_args.contains("--no-alpn");
    conf.flg_no_buffer = pico_args.contains(["-N", "--no-buffer"]);
    conf.flg_no_keepalive = pico_args.contains("--no-keepalive");
    conf.flg_no_npn = pico_args.contains("--no-npn");
    conf.flg_no_progress_meter = pico_args.contains("--no-progress-meter");
    conf.flg_no_sessionid = pico_args.contains("--no-sessionid");
    let x = pico_args.opt_value_from_str("--noproxy");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_noproxy = value_to_string("noproxy", x)?
    }
    conf.flg_ntlm = pico_args.contains("--ntlm");
    conf.flg_ntlm_wb = pico_args.contains("--ntlm-wb");
    let x = pico_args.opt_value_from_str("--oauth2-bearer");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_oauth2_bearer = value_to_string("oauth2-bearer", x)?
    }
    let x = pico_args.opt_value_from_str(["-o", "--output"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_output = value_to_string("output", x)?
    }
    conf.flg_parallel = pico_args.contains(["-Z", "--parallel"]);
    conf.flg_parallel_immediate = pico_args.contains("--parallel-immediate");
    conf.flg_parallel_max = pico_args.contains("--parallel-max");
    let x = pico_args.opt_value_from_str("--pass");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_pass = value_to_string("pass", x)?
    }
    conf.flg_path_as_is = pico_args.contains("--path-as-is");
    let x = pico_args.opt_value_from_str("--pinnedpubkey");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_pinnedpubkey = value_to_string("pinnedpubkey", x)?
    }
    conf.flg_post301 = pico_args.contains("--post301");
    conf.flg_post302 = pico_args.contains("--post302");
    conf.flg_post303 = pico_args.contains("--post303");
    let x = pico_args.opt_value_from_str("--preproxy");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_preproxy = value_to_string("preproxy", x)?
    }
    conf.flg_progress_bar = pico_args.contains(["-#", "--progress-bar"]);
    let x = pico_args.opt_value_from_str("--proto");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proto = value_to_string("proto", x)?
    }
    let x = pico_args.opt_value_from_str("--proto-default");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proto_default = value_to_string("proto-default", x)?
    }
    let x = pico_args.opt_value_from_str("--proto-redir");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proto_redir = value_to_string("proto-redir", x)?
    }
    let x = pico_args.opt_value_from_str(["-x", "--proxy"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy = value_to_string("proxy", x)?
    }
    conf.flg_proxy_anyauth = pico_args.contains("--proxy-anyauth");
    conf.flg_proxy_basic = pico_args.contains("--proxy-basic");
    let x = pico_args.opt_value_from_str("--proxy-cacert");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_cacert = value_to_string("proxy-cacert", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-capath");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_capath = value_to_string("proxy-capath", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-cert");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_cert = value_to_string("proxy-cert", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-cert-type");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_cert_type = value_to_string("proxy-cert-type", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-ciphers");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_ciphers = value_to_string("proxy-ciphers", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-crlfile");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_crlfile = value_to_string("proxy-crlfile", x)?
    }
    conf.flg_proxy_digest = pico_args.contains("--proxy-digest");
    let x = pico_args.opt_value_from_str("--proxy-header");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_header = value_to_string("proxy-header", x)?
    }
    conf.flg_proxy_insecure = pico_args.contains("--proxy-insecure");
    let x = pico_args.opt_value_from_str("--proxy-key");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_key = value_to_string("proxy-key", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-key-type");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_key_type = value_to_string("proxy-key-type", x)?
    }
    conf.flg_proxy_negotiate = pico_args.contains("--proxy-negotiate");
    conf.flg_proxy_ntlm = pico_args.contains("--proxy-ntlm");
    let x = pico_args.opt_value_from_str("--proxy-pass");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_pass = value_to_string("proxy-pass", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-pinnedpubkey");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_pinnedpubkey = value_to_string("proxy-pinnedpubkey", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-service-name");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_service_name = value_to_string("proxy-service-name", x)?
    }
    conf.flg_proxy_ssl_allow_beast = pico_args.contains("--proxy-ssl-allow-beast");
    let x = pico_args.opt_value_from_str("--proxy-tls13-ciphers");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_tls13_ciphers = value_to_string("proxy-tls13-ciphers", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-tlsauthtype");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_tlsauthtype = value_to_string("proxy-tlsauthtype", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-tlspassword");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_tlspassword = value_to_string("proxy-tlspassword", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy-tlsuser");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_tlsuser = value_to_string("proxy-tlsuser", x)?
    }
    conf.flg_proxy_tlsv1 = pico_args.contains("--proxy-tlsv1");
    let x = pico_args.opt_value_from_str(["-U", "--proxy-user"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy_user = value_to_string("proxy-user", x)?
    }
    let x = pico_args.opt_value_from_str("--proxy1.0");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_proxy1_0 = value_to_string("proxy1.0", x)?
    }
    conf.flg_proxytunnel = pico_args.contains(["-p", "--proxytunnel"]);
    let x = pico_args.opt_value_from_str("--pubkey");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_pubkey = value_to_string("pubkey", x)?
    }
    conf.flg_quote = pico_args.contains(["-Q", "--quote"]);
    let x = pico_args.opt_value_from_str("--random-file");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_random_file = value_to_string("random-file", x)?
    }
    let x = pico_args.opt_value_from_str(["-r", "--range"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_range = value_to_string("range", x)?
    }
    conf.flg_raw = pico_args.contains("--raw");
    let x = pico_args.opt_value_from_str(["-e", "--referer"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_referer = value_to_string("referer", x)?
    }
    conf.flg_remote_header_name = pico_args.contains(["-J", "--remote-header-name"]);
    conf.flg_remote_name = pico_args.contains(["-O", "--remote-name"]);
    conf.flg_remote_name_all = pico_args.contains("--remote-name-all");
    conf.flg_remote_time = pico_args.contains(["-R", "--remote-time"]);
    let x = pico_args.opt_value_from_str(["-X", "--request"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_request = value_to_string("request", x)?
    }
    conf.flg_request_target = pico_args.contains("--request-target");
    let x = pico_args.opt_value_from_str("--resolve");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_resolve = value_to_string("resolve", x)?
    }
    let x = pico_args.opt_value_from_str("--retry");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_retry = value_to_u32("retry", x)?
    }
    conf.flg_retry_connrefused = pico_args.contains("--retry-connrefused");
    let x = pico_args.opt_value_from_str("--retry-delay");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_retry_delay = value_to_u32("retry-delay", x)?
    }
    let x = pico_args.opt_value_from_str("--retry-max-time");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_retry_max_time = value_to_u32("retry-max-time", x)?
    }
    let x = pico_args.opt_value_from_str("--sasl-authzid");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_sasl_authzid = value_to_string("sasl-authzid", x)?
    }
    conf.flg_sasl_ir = pico_args.contains("--sasl-ir");
    let x = pico_args.opt_value_from_str("--service-name");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_service_name = value_to_string("service-name", x)?
    }
    conf.flg_show_error = pico_args.contains(["-S", "--show-error"]);
    conf.flg_silent = pico_args.contains(["-s", "--silent"]);
    let x = pico_args.opt_value_from_str("--socks4");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_socks4 = value_to_string("socks4", x)?
    }
    let x = pico_args.opt_value_from_str("--socks4a");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_socks4a = value_to_string("socks4a", x)?
    }
    let x = pico_args.opt_value_from_str("--socks5");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_socks5 = value_to_string("socks5", x)?
    }
    conf.flg_socks5_basic = pico_args.contains("--socks5-basic");
    conf.flg_socks5_gssapi = pico_args.contains("--socks5-gssapi");
    conf.flg_socks5_gssapi_nec = pico_args.contains("--socks5-gssapi-nec");
    let x = pico_args.opt_value_from_str("--socks5-gssapi-service");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_socks5_gssapi_service = value_to_string("socks5-gssapi-service", x)?
    }
    let x = pico_args.opt_value_from_str("--socks5-hostname");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_socks5_hostname = value_to_string("socks5-hostname", x)?
    }
    let x = pico_args.opt_value_from_str(["-Y", "--speed-limit"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_speed_limit = value_to_u64("speed-limit", x)?
    }
    let x = pico_args.opt_value_from_str(["-y", "--speed-time"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_speed_time = value_to_u32("speed-time", x)?
    }
    conf.flg_ssl = pico_args.contains("--ssl");
    conf.flg_ssl_allow_beast = pico_args.contains("--ssl-allow-beast");
    conf.flg_ssl_no_revoke = pico_args.contains("--ssl-no-revoke");
    conf.flg_ssl_reqd = pico_args.contains("--ssl-reqd");
    conf.flg_sslv2 = pico_args.contains(["-2", "--sslv2"]);
    conf.flg_sslv3 = pico_args.contains(["-3", "--sslv3"]);
    conf.flg_stderr = pico_args.contains("--stderr");
    conf.flg_styled_output = pico_args.contains("--styled-output");
    conf.flg_suppress_connect_headers = pico_args.contains("--suppress-connect-headers");
    conf.flg_tcp_fastopen = pico_args.contains("--tcp-fastopen");
    conf.flg_tcp_nodelay = pico_args.contains("--tcp-nodelay");
    let x = pico_args.opt_value_from_str(["-t", "--telnet-option"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_telnet_option = value_to_string("telnet-option", x)?
    }
    let x = pico_args.opt_value_from_str("--tftp-blksize");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_tftp_blksize = value_to_u32("tftp-blksize", x)?
    }
    conf.flg_tftp_no_options = pico_args.contains("--tftp-no-options");
    let x = pico_args.opt_value_from_str(["-z", "--time-cond"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_time_cond = value_to_string("time-cond", x)?
    }
    let x = pico_args.opt_value_from_str("--tls-max");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_tls_max = value_to_string("tls-max", x)?
    }
    let x = pico_args.opt_value_from_str("--tls13-ciphers");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_tls13_ciphers = value_to_string("tls13-ciphers", x)?
    }
    let x = pico_args.opt_value_from_str("--tlsauthtype");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_tlsauthtype = value_to_string("tlsauthtype", x)?
    }
    conf.flg_tlspassword = pico_args.contains("--tlspassword");
    let x = pico_args.opt_value_from_str("--tlsuser");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_tlsuser = value_to_string("tlsuser", x)?
    }
    conf.flg_tlsv1 = pico_args.contains(["-1", "--tlsv1"]);
    conf.flg_tlsv1_0 = pico_args.contains("--tlsv1.0");
    conf.flg_tlsv1_1 = pico_args.contains("--tlsv1.1");
    conf.flg_tlsv1_2 = pico_args.contains("--tlsv1.2");
    conf.flg_tlsv1_3 = pico_args.contains("--tlsv1.3");
    conf.flg_tr_encoding = pico_args.contains("--tr-encoding");
    let x = pico_args.opt_value_from_str("--trace");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_trace = value_to_string("trace", x)?
    }
    let x = pico_args.opt_value_from_str("--trace-ascii");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_trace_ascii = value_to_string("trace-ascii", x)?
    }
    conf.flg_trace_time = pico_args.contains("--trace-time");
    let x = pico_args.opt_value_from_str("--unix-socket");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_unix_socket = value_to_string("unix-socket", x)?
    }
    let x = pico_args.opt_value_from_str(["-T", "--upload-file"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_upload_file = value_to_string("upload-file", x)?
    }
    let x = pico_args.opt_value_from_str("--url");
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_url = value_to_string("url", x)?
    }
    conf.flg_use_ascii = pico_args.contains(["-B", "--use-ascii"]);
    let x = pico_args.opt_value_from_str(["-u", "--user"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_user = value_to_string("user", x)?
    }
    let x = pico_args.opt_value_from_str(["-A", "--user-agent"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_user_agent = value_to_string("user-agent", x)?
    }
    conf.flg_verbose = pico_args.contains(["-v", "--verbose"]);
    let x = pico_args.opt_value_from_str(["-w", "--write-out"]);
    if let Ok(None) = x {
        // noting todo
    } else {
        conf.opt_write_out = value_to_string("write-out", x)?
    }
    conf.flg_xattr = pico_args.contains("--xattr");

    if pico_args.contains(["-h", "--help"]) {
        print_help_and_exit(&conf);
    }

    if pico_args.contains(["-V", "--version"]) {
        print_version_and_exit(&conf);
    }
}
