use optstr_curl::parse_input_file;
use optstr_curl::OptStr;

pub fn do_gen_src() -> anyhow::Result<()> {
    let (vec_optstr, vec_line) = parse_input_file("comps/common/optstr-curl/src/curl.cmd.txt")?;
    //
    let sss = do_gen_src_help(&vec_optstr, &vec_line)?;
    update_file::update_file(&sss, "comps/cmp_pure_rust/src/curl.cmd.help.rs.txt")?;
    //
    let sss = do_gen_src_match(&vec_optstr)?;
    update_file::update_file(&sss, "comps/cmp_pure_rust/src/curl.cmd.match.rs.txt")?;
    //
    Ok(())
}

fn do_gen_src_help(vec_optstr: &[OptStr], vec_line: &[String]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));
    sss += r#"
const OPTIONS_TEXT: &str = r""#;
    for line in vec_line {
        sss += &format!("{}\n", line);
    }
    sss += "\";\n";
    //
    sss += r#"
#[derive(Debug, Default, PartialEq)]
pub struct CmdOptConf {
    pub opt_program: String,
    //
"#;
    for rec in vec_optstr.iter() {
        sss += &format!("    pub {}: {},\n", rec.field_s, rec.type_s);
    }
    sss += r#"    //
    pub arg_params: Vec<String>,
}
"#;
    //
    Ok(sss)
}

fn do_gen_src_match(vec_optstr: &[OptStr]) -> anyhow::Result<String> {
    let mut sss = String::with_capacity(4 * 1024);
    //
    let s = r"// WARN: This file is auto generated by";
    sss += &format!("{} {}", s, env!("CARGO_PKG_NAME"));
    //
    sss += r#"
match cur_s {
"#;
    for rec in vec_optstr.iter() {
        let s = if rec.sho.is_empty() {
            format!("\"--{}\"", rec.lon)
        } else {
            format!("\"-{}\" | \"--{}\"", rec.sho, rec.lon)
        };
        sss += &format!("    {} => {{\n", s);
        match rec.type_s.as_str() {
            "bool" => match rec.enum_s.as_str() {
                "Help" => {
                    sss += "        print_help_and_exit(conf);\n";
                }
                "Version" => {
                    sss += "        print_version_and_exit(conf);\n";
                }
                _ => {
                    sss += &format!("        conf.{} = true;\n", rec.field_s);
                }
            },
            "String" => {
                sss += &format!(
                    "        conf.{} = value_to_string(cur_s, cursor.next())?;\n",
                    rec.field_s
                );
            }
            "u32" => {
                sss += &format!(
                    "        conf.{} = value_to_u32(cur_s, cursor.next())?;\n",
                    rec.field_s
                );
            }
            "u64" => {
                sss += &format!(
                    "        conf.{} = value_to_u64(cur_s, cursor.next())?;\n",
                    rec.field_s
                );
            }
            _ => unreachable!(),
        }
        sss += "    }\n";
    }
    sss += r#"    _ => {
        if !cur_s.starts_with('-') {
            free.push(cur_s.to_string());
        } else {
            return Err(From::from(OptParseError::invalid_option(cur_s)));
        }
    }
"#;
    sss += r#"}
"#;
    //
    Ok(sss)
}
