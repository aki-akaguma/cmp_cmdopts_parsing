// WARN: This file is auto generated by cmp_structopt_xtask

#[derive(Debug, Default, PartialEq)]
pub struct CmdOptConf {
    pub opt_program: String,
    //
    pub opt_abstract_unix_socket: String,
    pub opt_alt_svc: String,
    pub flg_anyauth: bool,
    pub flg_append: bool,
    pub flg_basic: bool,
    pub opt_cacert: String,
    pub opt_capath: String,
    pub opt_cert: String,
    pub flg_cert_status: bool,
    pub opt_cert_type: String,
    pub opt_ciphers: String,
    pub flg_compressed: bool,
    pub flg_compressed_ssh: bool,
    pub opt_config: String,
    pub opt_connect_timeout: u32,
    pub opt_connect_to: String,
    pub opt_continue_at: u64,
    pub opt_cookie: String,
    pub opt_cookie_jar: String,
    pub flg_create_dirs: bool,
    pub flg_crlf: bool,
    pub opt_crlfile: String,
    pub opt_data: String,
    pub opt_data_ascii: String,
    pub opt_data_binary: String,
    pub opt_data_raw: String,
    pub opt_data_urlencode: String,
    pub opt_delegation: String,
    pub flg_digest: bool,
    pub flg_disable: bool,
    pub flg_disable_eprt: bool,
    pub flg_disable_epsv: bool,
    pub flg_disallow_username_in_url: bool,
    pub opt_dns_interface: String,
    pub opt_dns_ipv4_addr: String,
    pub opt_dns_ipv6_addr: String,
    pub opt_dns_servers: String,
    pub opt_doh_url: String,
    pub opt_dump_header: String,
    pub opt_egd_file: String,
    pub opt_engine: String,
    pub opt_etag_save: String,
    pub opt_etag_compare: String,
    pub opt_expect100_timeout: u32,
    pub flg_fail: bool,
    pub flg_fail_early: bool,
    pub flg_false_start: bool,
    pub opt_form: String,
    pub opt_form_string: String,
    pub opt_ftp_account: String,
    pub opt_ftp_alternative_to_user: String,
    pub flg_ftp_create_dirs: bool,
    pub opt_ftp_method: String,
    pub flg_ftp_pasv: bool,
    pub opt_ftp_port: String,
    pub flg_ftp_pret: bool,
    pub flg_ftp_skip_pasv_ip: bool,
    pub flg_ftp_ssl_ccc: bool,
    pub opt_ftp_ssl_ccc_mode: String,
    pub flg_ftp_ssl_control: bool,
    pub flg_get: bool,
    pub flg_globoff: bool,
    pub opt_happy_eyeballs_timeout_ms: u64,
    pub flg_haproxy_protocol: bool,
    pub flg_head: bool,
    pub opt_header: String,
    pub opt_hostpubmd5: String,
    pub flg_http0_9: bool,
    pub flg_http1_0: bool,
    pub flg_http1_1: bool,
    pub flg_http2: bool,
    pub flg_http2_prior_knowledge: bool,
    pub flg_http3: bool,
    pub flg_ignore_content_length: bool,
    pub flg_include: bool,
    pub flg_insecure: bool,
    pub opt_interface: String,
    pub flg_ipv4: bool,
    pub flg_ipv6: bool,
    pub flg_junk_session_cookies: bool,
    pub opt_keepalive_time: u32,
    pub opt_key: String,
    pub opt_key_type: String,
    pub opt_krb: String,
    pub opt_libcurl: String,
    pub opt_limit_rate: u64,
    pub flg_list_only: bool,
    pub opt_local_port: String,
    pub flg_location: bool,
    pub flg_location_trusted: bool,
    pub opt_login_options: String,
    pub opt_mail_auth: String,
    pub opt_mail_from: String,
    pub opt_mail_rcpt: String,
    pub flg_manual: bool,
    pub opt_max_filesize: u64,
    pub opt_max_redirs: u32,
    pub opt_max_time: u32,
    pub flg_metalink: bool,
    pub flg_negotiate: bool,
    pub flg_netrc: bool,
    pub opt_netrc_file: String,
    pub flg_netrc_optional: bool,
    pub flg_next: bool,
    pub flg_no_alpn: bool,
    pub flg_no_buffer: bool,
    pub flg_no_keepalive: bool,
    pub flg_no_npn: bool,
    pub flg_no_progress_meter: bool,
    pub flg_no_sessionid: bool,
    pub opt_noproxy: String,
    pub flg_ntlm: bool,
    pub flg_ntlm_wb: bool,
    pub opt_oauth2_bearer: String,
    pub opt_output: String,
    pub flg_parallel: bool,
    pub flg_parallel_immediate: bool,
    pub flg_parallel_max: bool,
    pub opt_pass: String,
    pub flg_path_as_is: bool,
    pub opt_pinnedpubkey: String,
    pub flg_post301: bool,
    pub flg_post302: bool,
    pub flg_post303: bool,
    pub opt_preproxy: String,
    pub flg_progress_bar: bool,
    pub opt_proto: String,
    pub opt_proto_default: String,
    pub opt_proto_redir: String,
    pub opt_proxy: String,
    pub flg_proxy_anyauth: bool,
    pub flg_proxy_basic: bool,
    pub opt_proxy_cacert: String,
    pub opt_proxy_capath: String,
    pub opt_proxy_cert: String,
    pub opt_proxy_cert_type: String,
    pub opt_proxy_ciphers: String,
    pub opt_proxy_crlfile: String,
    pub flg_proxy_digest: bool,
    pub opt_proxy_header: String,
    pub flg_proxy_insecure: bool,
    pub opt_proxy_key: String,
    pub opt_proxy_key_type: String,
    pub flg_proxy_negotiate: bool,
    pub flg_proxy_ntlm: bool,
    pub opt_proxy_pass: String,
    pub opt_proxy_pinnedpubkey: String,
    pub opt_proxy_service_name: String,
    pub flg_proxy_ssl_allow_beast: bool,
    pub opt_proxy_tls13_ciphers: String,
    pub opt_proxy_tlsauthtype: String,
    pub opt_proxy_tlspassword: String,
    pub opt_proxy_tlsuser: String,
    pub flg_proxy_tlsv1: bool,
    pub opt_proxy_user: String,
    pub opt_proxy1_0: String,
    pub flg_proxytunnel: bool,
    pub opt_pubkey: String,
    pub flg_quote: bool,
    pub opt_random_file: String,
    pub opt_range: String,
    pub flg_raw: bool,
    pub opt_referer: String,
    pub flg_remote_header_name: bool,
    pub flg_remote_name: bool,
    pub flg_remote_name_all: bool,
    pub flg_remote_time: bool,
    pub opt_request: String,
    pub flg_request_target: bool,
    pub opt_resolve: String,
    pub opt_retry: u32,
    pub flg_retry_connrefused: bool,
    pub opt_retry_delay: u32,
    pub opt_retry_max_time: u32,
    pub opt_sasl_authzid: String,
    pub flg_sasl_ir: bool,
    pub opt_service_name: String,
    pub flg_show_error: bool,
    pub flg_silent: bool,
    pub opt_socks4: String,
    pub opt_socks4a: String,
    pub opt_socks5: String,
    pub flg_socks5_basic: bool,
    pub flg_socks5_gssapi: bool,
    pub flg_socks5_gssapi_nec: bool,
    pub opt_socks5_gssapi_service: String,
    pub opt_socks5_hostname: String,
    pub opt_speed_limit: u64,
    pub opt_speed_time: u32,
    pub flg_ssl: bool,
    pub flg_ssl_allow_beast: bool,
    pub flg_ssl_no_revoke: bool,
    pub flg_ssl_reqd: bool,
    pub flg_sslv2: bool,
    pub flg_sslv3: bool,
    pub flg_stderr: bool,
    pub flg_styled_output: bool,
    pub flg_suppress_connect_headers: bool,
    pub flg_tcp_fastopen: bool,
    pub flg_tcp_nodelay: bool,
    pub opt_telnet_option: String,
    pub opt_tftp_blksize: u32,
    pub flg_tftp_no_options: bool,
    pub opt_time_cond: String,
    pub opt_tls_max: String,
    pub opt_tls13_ciphers: String,
    pub opt_tlsauthtype: String,
    pub flg_tlspassword: bool,
    pub opt_tlsuser: String,
    pub flg_tlsv1: bool,
    pub flg_tlsv1_0: bool,
    pub flg_tlsv1_1: bool,
    pub flg_tlsv1_2: bool,
    pub flg_tlsv1_3: bool,
    pub flg_tr_encoding: bool,
    pub opt_trace: String,
    pub opt_trace_ascii: String,
    pub flg_trace_time: bool,
    pub opt_unix_socket: String,
    pub opt_upload_file: String,
    pub opt_url: String,
    pub flg_use_ascii: bool,
    pub opt_user: String,
    pub opt_user_agent: String,
    pub flg_verbose: bool,
    pub opt_write_out: String,
    pub flg_xattr: bool,
    pub flg_help: bool,
    pub flg_version: bool,
    //
    pub arg_params: Vec<String>,
}

#[derive(StructOpt, Debug)]
#[structopt()]
pub struct MyOptions {
    #[structopt(
        name = "abstract-unix-socket",
        long = "abstract-unix-socket",
        help = "Connect via abstract Unix domain socket",
    )]
    pub opt_abstract_unix_socket: Option<String>,
    #[structopt(
        name = "alt-svc",
        long = "alt-svc",
        help = "Enable alt-svc with this cache file",
    )]
    pub opt_alt_svc: Option<String>,
    #[structopt(
        name = "anyauth",
        long = "anyauth",
        help = "Pick any authentication method",
    )]
    pub flg_anyauth: bool,
    #[structopt(
        name = "append",
        short = "a",
        long = "append",
        help = "Append to target file when uploading",
    )]
    pub flg_append: bool,
    #[structopt(
        name = "basic",
        long = "basic",
        help = "Use HTTP Basic Authentication",
    )]
    pub flg_basic: bool,
    #[structopt(
        name = "cacert",
        long = "cacert",
        help = "CA certificate to verify peer against",
    )]
    pub opt_cacert: Option<String>,
    #[structopt(
        name = "capath",
        long = "capath",
        help = "CA directory to verify peer against",
    )]
    pub opt_capath: Option<String>,
    #[structopt(
        name = "cert",
        short = "E",
        long = "cert",
        help = "Client certificate file and password",
    )]
    pub opt_cert: Option<String>,
    #[structopt(
        name = "cert-status",
        long = "cert-status",
        help = "Verify the status of the server certificate",
    )]
    pub flg_cert_status: bool,
    #[structopt(
        name = "cert-type",
        long = "cert-type",
        help = "Certificate file type (DER/PEM/ENG)",
    )]
    pub opt_cert_type: Option<String>,
    #[structopt(
        name = "ciphers",
        long = "ciphers",
        help = "SSL ciphers to use",
    )]
    pub opt_ciphers: Option<String>,
    #[structopt(
        name = "compressed",
        long = "compressed",
        help = "Request compressed response",
    )]
    pub flg_compressed: bool,
    #[structopt(
        name = "compressed-ssh",
        long = "compressed-ssh",
        help = "Enable SSH compression",
    )]
    pub flg_compressed_ssh: bool,
    #[structopt(
        name = "config",
        short = "K",
        long = "config",
        help = "Read config from a file",
    )]
    pub opt_config: Option<String>,
    #[structopt(
        name = "connect-timeout",
        long = "connect-timeout",
        help = "Maximum time allowed for connection",
    )]
    pub opt_connect_timeout: Option<u32>,
    #[structopt(
        name = "connect-to",
        long = "connect-to",
        help = "Connect to host",
    )]
    pub opt_connect_to: Option<String>,
    #[structopt(
        name = "continue-at",
        short = "C",
        long = "continue-at",
        help = "Resumed transfer offset",
    )]
    pub opt_continue_at: Option<u64>,
    #[structopt(
        name = "cookie",
        short = "b",
        long = "cookie",
        help = "Send cookies from string/file",
    )]
    pub opt_cookie: Option<String>,
    #[structopt(
        name = "cookie-jar",
        short = "c",
        long = "cookie-jar",
        help = "Write cookies to <filename> after operation",
    )]
    pub opt_cookie_jar: Option<String>,
    #[structopt(
        name = "create-dirs",
        long = "create-dirs",
        help = "Create necessary local directory hierarchy",
    )]
    pub flg_create_dirs: bool,
    #[structopt(
        name = "crlf",
        long = "crlf",
        help = "Convert LF to CRLF in upload",
    )]
    pub flg_crlf: bool,
    #[structopt(
        name = "crlfile",
        long = "crlfile",
        help = "Get a CRL list in PEM format from the given file",
    )]
    pub opt_crlfile: Option<String>,
    #[structopt(
        name = "data",
        short = "d",
        long = "data",
        help = "HTTP POST data",
    )]
    pub opt_data: Option<String>,
    #[structopt(
        name = "data-ascii",
        long = "data-ascii",
        help = "HTTP POST ASCII data",
    )]
    pub opt_data_ascii: Option<String>,
    #[structopt(
        name = "data-binary",
        long = "data-binary",
        help = "HTTP POST binary data",
    )]
    pub opt_data_binary: Option<String>,
    #[structopt(
        name = "data-raw",
        long = "data-raw",
        help = "HTTP POST data  '@' allowed",
    )]
    pub opt_data_raw: Option<String>,
    #[structopt(
        name = "data-urlencode",
        long = "data-urlencode",
        help = "HTTP POST data url encoded",
    )]
    pub opt_data_urlencode: Option<String>,
    #[structopt(
        name = "delegation",
        long = "delegation",
        help = "GSS-API delegation permission",
    )]
    pub opt_delegation: Option<String>,
    #[structopt(
        name = "digest",
        long = "digest",
        help = "Use HTTP Digest Authentication",
    )]
    pub flg_digest: bool,
    #[structopt(
        name = "disable",
        short = "q",
        long = "disable",
        help = "Disable .curlrc",
    )]
    pub flg_disable: bool,
    #[structopt(
        name = "disable-eprt",
        long = "disable-eprt",
        help = "Inhibit using EPRT or LPRT",
    )]
    pub flg_disable_eprt: bool,
    #[structopt(
        name = "disable-epsv",
        long = "disable-epsv",
        help = "Inhibit using EPSV",
    )]
    pub flg_disable_epsv: bool,
    #[structopt(
        name = "disallow-username-in-url",
        long = "disallow-username-in-url",
        help = "Disallow username in url",
    )]
    pub flg_disallow_username_in_url: bool,
    #[structopt(
        name = "dns-interface",
        long = "dns-interface",
        help = "Interface to use for DNS requests",
    )]
    pub opt_dns_interface: Option<String>,
    #[structopt(
        name = "dns-ipv4-addr",
        long = "dns-ipv4-addr",
        help = "IPv4 address to use for DNS requests",
    )]
    pub opt_dns_ipv4_addr: Option<String>,
    #[structopt(
        name = "dns-ipv6-addr",
        long = "dns-ipv6-addr",
        help = "IPv6 address to use for DNS requests",
    )]
    pub opt_dns_ipv6_addr: Option<String>,
    #[structopt(
        name = "dns-servers",
        long = "dns-servers",
        help = "DNS server addrs to use",
    )]
    pub opt_dns_servers: Option<String>,
    #[structopt(
        name = "doh-url",
        long = "doh-url",
        help = "Resolve host names over DOH",
    )]
    pub opt_doh_url: Option<String>,
    #[structopt(
        name = "dump-header",
        short = "D",
        long = "dump-header",
        help = "Write the received headers to <filename>",
    )]
    pub opt_dump_header: Option<String>,
    #[structopt(
        name = "egd-file",
        long = "egd-file",
        help = "EGD socket path for random data",
    )]
    pub opt_egd_file: Option<String>,
    #[structopt(
        name = "engine",
        long = "engine",
        help = "Crypto engine to use",
    )]
    pub opt_engine: Option<String>,
    #[structopt(
        name = "etag-save",
        long = "etag-save",
        help = "Get an ETag from response header and save it to a FILE",
    )]
    pub opt_etag_save: Option<String>,
    #[structopt(
        name = "etag-compare",
        long = "etag-compare",
        help = "Get an ETag from a file and send a conditional request",
    )]
    pub opt_etag_compare: Option<String>,
    #[structopt(
        name = "expect100-timeout",
        long = "expect100-timeout",
        help = "How long to wait for 100-continue",
    )]
    pub opt_expect100_timeout: Option<u32>,
    #[structopt(
        name = "fail",
        short = "f",
        long = "fail",
        help = "Fail silently (no output at all) on HTTP errors",
    )]
    pub flg_fail: bool,
    #[structopt(
        name = "fail-early",
        long = "fail-early",
        help = "Fail on first transfer error  do not continue",
    )]
    pub flg_fail_early: bool,
    #[structopt(
        name = "false-start",
        long = "false-start",
        help = "Enable TLS False Start",
    )]
    pub flg_false_start: bool,
    #[structopt(
        name = "form",
        short = "F",
        long = "form",
        help = "Specify multipart MIME data",
    )]
    pub opt_form: Option<String>,
    #[structopt(
        name = "form-string",
        long = "form-string",
        help = "Specify multipart MIME data",
    )]
    pub opt_form_string: Option<String>,
    #[structopt(
        name = "ftp-account",
        long = "ftp-account",
        help = "Account data string",
    )]
    pub opt_ftp_account: Option<String>,
    #[structopt(
        name = "ftp-alternative-to-user",
        long = "ftp-alternative-to-user",
        help = "String to replace USER [name]",
    )]
    pub opt_ftp_alternative_to_user: Option<String>,
    #[structopt(
        name = "ftp-create-dirs",
        long = "ftp-create-dirs",
        help = "Create the remote dirs if not present",
    )]
    pub flg_ftp_create_dirs: bool,
    #[structopt(
        name = "ftp-method",
        long = "ftp-method",
        help = "Control CWD usage",
    )]
    pub opt_ftp_method: Option<String>,
    #[structopt(
        name = "ftp-pasv",
        long = "ftp-pasv",
        help = "Use PASV/EPSV instead of PORT",
    )]
    pub flg_ftp_pasv: bool,
    #[structopt(
        name = "ftp-port",
        short = "P",
        long = "ftp-port",
        help = "Use PORT instead of PASV",
    )]
    pub opt_ftp_port: Option<String>,
    #[structopt(
        name = "ftp-pret",
        long = "ftp-pret",
        help = "Send PRET before PASV",
    )]
    pub flg_ftp_pret: bool,
    #[structopt(
        name = "ftp-skip-pasv-ip",
        long = "ftp-skip-pasv-ip",
        help = "Skip the IP address for PASV",
    )]
    pub flg_ftp_skip_pasv_ip: bool,
    #[structopt(
        name = "ftp-ssl-ccc",
        long = "ftp-ssl-ccc",
        help = "Send CCC after authenticating",
    )]
    pub flg_ftp_ssl_ccc: bool,
    #[structopt(
        name = "ftp-ssl-ccc-mode",
        long = "ftp-ssl-ccc-mode",
        help = "Set CCC mode",
    )]
    pub opt_ftp_ssl_ccc_mode: Option<String>,
    #[structopt(
        name = "ftp-ssl-control",
        long = "ftp-ssl-control",
        help = "Require SSL/TLS for FTP login  clear for transfer",
    )]
    pub flg_ftp_ssl_control: bool,
    #[structopt(
        name = "get",
        short = "G",
        long = "get",
        help = "Put the post data in the URL and use GET",
    )]
    pub flg_get: bool,
    #[structopt(
        name = "globoff",
        short = "g",
        long = "globoff",
        help = "Disable URL sequences and ranges using {} and []",
    )]
    pub flg_globoff: bool,
    #[structopt(
        name = "happy-eyeballs-timeout-ms",
        long = "happy-eyeballs-timeout-ms",
        help = "How long to wait in milliseconds for IPv6 before trying IPv4",
    )]
    pub opt_happy_eyeballs_timeout_ms: Option<u64>,
    #[structopt(
        name = "haproxy-protocol",
        long = "haproxy-protocol",
        help = "Send HAProxy PROXY protocol v1 header",
    )]
    pub flg_haproxy_protocol: bool,
    #[structopt(
        name = "head",
        short = "I",
        long = "head",
        help = "Show document info only",
    )]
    pub flg_head: bool,
    #[structopt(
        name = "header",
        short = "h",
        long = "header",
        help = "Pass custom header(s) to server",
    )]
    pub opt_header: Option<String>,
    #[structopt(
        name = "hostpubmd5",
        long = "hostpubmd5",
        help = "Acceptable MD5 hash of the host public key",
    )]
    pub opt_hostpubmd5: Option<String>,
    #[structopt(
        name = "http0.9",
        long = "http0.9",
        help = "Allow HTTP 0.9 responses",
    )]
    pub flg_http0_9: bool,
    #[structopt(
        name = "http1.0",
        short = "0",
        long = "http1.0",
        help = "Use HTTP 1.0",
    )]
    pub flg_http1_0: bool,
    #[structopt(
        name = "http1.1",
        long = "http1.1",
        help = "Use HTTP 1.1",
    )]
    pub flg_http1_1: bool,
    #[structopt(
        name = "http2",
        long = "http2",
        help = "Use HTTP 2",
    )]
    pub flg_http2: bool,
    #[structopt(
        name = "http2-prior-knowledge",
        long = "http2-prior-knowledge",
        help = "Use HTTP 2 without HTTP/1.1 Upgrade",
    )]
    pub flg_http2_prior_knowledge: bool,
    #[structopt(
        name = "http3",
        long = "http3",
        help = "Use HTTP v3",
    )]
    pub flg_http3: bool,
    #[structopt(
        name = "ignore-content-length",
        long = "ignore-content-length",
        help = "Ignore the size of the remote resource",
    )]
    pub flg_ignore_content_length: bool,
    #[structopt(
        name = "include",
        short = "i",
        long = "include",
        help = "Include protocol response headers in the output",
    )]
    pub flg_include: bool,
    #[structopt(
        name = "insecure",
        short = "k",
        long = "insecure",
        help = "Allow insecure server connections when using SSL",
    )]
    pub flg_insecure: bool,
    #[structopt(
        name = "interface",
        long = "interface",
        help = "Use network INTERFACE (or address)",
    )]
    pub opt_interface: Option<String>,
    #[structopt(
        name = "ipv4",
        short = "4",
        long = "ipv4",
        help = "Resolve names to IPv4 addresses",
    )]
    pub flg_ipv4: bool,
    #[structopt(
        name = "ipv6",
        short = "6",
        long = "ipv6",
        help = "Resolve names to IPv6 addresses",
    )]
    pub flg_ipv6: bool,
    #[structopt(
        name = "junk-session-cookies",
        short = "j",
        long = "junk-session-cookies",
        help = "Ignore session cookies read from file",
    )]
    pub flg_junk_session_cookies: bool,
    #[structopt(
        name = "keepalive-time",
        long = "keepalive-time",
        help = "Interval time for keepalive probes",
    )]
    pub opt_keepalive_time: Option<u32>,
    #[structopt(
        name = "key",
        long = "key",
        help = "Private key file name",
    )]
    pub opt_key: Option<String>,
    #[structopt(
        name = "key-type",
        long = "key-type",
        help = "Private key file type (DER/PEM/ENG)",
    )]
    pub opt_key_type: Option<String>,
    #[structopt(
        name = "krb",
        long = "krb",
        help = "Enable Kerberos with security <level>",
    )]
    pub opt_krb: Option<String>,
    #[structopt(
        name = "libcurl",
        long = "libcurl",
        help = "Dump libcurl equivalent code of this command line",
    )]
    pub opt_libcurl: Option<String>,
    #[structopt(
        name = "limit-rate",
        long = "limit-rate",
        help = "Limit transfer speed to RATE",
    )]
    pub opt_limit_rate: Option<u64>,
    #[structopt(
        name = "list-only",
        short = "l",
        long = "list-only",
        help = "List only mode",
    )]
    pub flg_list_only: bool,
    #[structopt(
        name = "local-port",
        long = "local-port",
        help = "Force use of RANGE for local port numbers",
    )]
    pub opt_local_port: Option<String>,
    #[structopt(
        name = "location",
        short = "L",
        long = "location",
        help = "Follow redirects",
    )]
    pub flg_location: bool,
    #[structopt(
        name = "location-trusted",
        long = "location-trusted",
        help = "Like --location  and send auth to other hosts",
    )]
    pub flg_location_trusted: bool,
    #[structopt(
        name = "login-options",
        long = "login-options",
        help = "Server login options",
    )]
    pub opt_login_options: Option<String>,
    #[structopt(
        name = "mail-auth",
        long = "mail-auth",
        help = "Originator address of the original email",
    )]
    pub opt_mail_auth: Option<String>,
    #[structopt(
        name = "mail-from",
        long = "mail-from",
        help = "Mail from this address",
    )]
    pub opt_mail_from: Option<String>,
    #[structopt(
        name = "mail-rcpt",
        long = "mail-rcpt",
        help = "Mail to this address",
    )]
    pub opt_mail_rcpt: Option<String>,
    #[structopt(
        name = "manual",
        short = "M",
        long = "manual",
        help = "Display the full manual",
    )]
    pub flg_manual: bool,
    #[structopt(
        name = "max-filesize",
        long = "max-filesize",
        help = "Maximum file size to download",
    )]
    pub opt_max_filesize: Option<u64>,
    #[structopt(
        name = "max-redirs",
        long = "max-redirs",
        help = "Maximum number of redirects allowed",
    )]
    pub opt_max_redirs: Option<u32>,
    #[structopt(
        name = "max-time",
        short = "m",
        long = "max-time",
        help = "Maximum time allowed for the transfer",
    )]
    pub opt_max_time: Option<u32>,
    #[structopt(
        name = "metalink",
        long = "metalink",
        help = "Process given URLs as metalink XML file",
    )]
    pub flg_metalink: bool,
    #[structopt(
        name = "negotiate",
        long = "negotiate",
        help = "Use HTTP Negotiate (SPNEGO) authentication",
    )]
    pub flg_negotiate: bool,
    #[structopt(
        name = "netrc",
        short = "n",
        long = "netrc",
        help = "Must read .netrc for user name and password",
    )]
    pub flg_netrc: bool,
    #[structopt(
        name = "netrc-file",
        long = "netrc-file",
        help = "Specify FILE for netrc",
    )]
    pub opt_netrc_file: Option<String>,
    #[structopt(
        name = "netrc-optional",
        long = "netrc-optional",
        help = "Use either .netrc or URL",
    )]
    pub flg_netrc_optional: bool,
    #[structopt(
        name = "next",
        short = ":",
        long = "next",
        help = "Make next URL use its separate set of options",
    )]
    pub flg_next: bool,
    #[structopt(
        name = "no-alpn",
        long = "no-alpn",
        help = "Disable the ALPN TLS extension",
    )]
    pub flg_no_alpn: bool,
    #[structopt(
        name = "no-buffer",
        short = "N",
        long = "no-buffer",
        help = "Disable buffering of the output stream",
    )]
    pub flg_no_buffer: bool,
    #[structopt(
        name = "no-keepalive",
        long = "no-keepalive",
        help = "Disable TCP keepalive on the connection",
    )]
    pub flg_no_keepalive: bool,
    #[structopt(
        name = "no-npn",
        long = "no-npn",
        help = "Disable the NPN TLS extension",
    )]
    pub flg_no_npn: bool,
    #[structopt(
        name = "no-progress-meter",
        long = "no-progress-meter",
        help = "Do not show the progress meter",
    )]
    pub flg_no_progress_meter: bool,
    #[structopt(
        name = "no-sessionid",
        long = "no-sessionid",
        help = "Disable SSL session-ID reusing",
    )]
    pub flg_no_sessionid: bool,
    #[structopt(
        name = "noproxy",
        long = "noproxy",
        help = "List of hosts which do not use proxy",
    )]
    pub opt_noproxy: Option<String>,
    #[structopt(
        name = "ntlm",
        long = "ntlm",
        help = "Use HTTP NTLM authentication",
    )]
    pub flg_ntlm: bool,
    #[structopt(
        name = "ntlm-wb",
        long = "ntlm-wb",
        help = "Use HTTP NTLM authentication with winbind",
    )]
    pub flg_ntlm_wb: bool,
    #[structopt(
        name = "oauth2-bearer",
        long = "oauth2-bearer",
        help = "OAuth 2 Bearer Token",
    )]
    pub opt_oauth2_bearer: Option<String>,
    #[structopt(
        name = "output",
        short = "o",
        long = "output",
        help = "Write to file instead of stdout",
    )]
    pub opt_output: Option<String>,
    #[structopt(
        name = "parallel",
        short = "Z",
        long = "parallel",
        help = "Perform transfers in parallel",
    )]
    pub flg_parallel: bool,
    #[structopt(
        name = "parallel-immediate",
        long = "parallel-immediate",
        help = "Do not wait for multiplexing (with --parallel)",
    )]
    pub flg_parallel_immediate: bool,
    #[structopt(
        name = "parallel-max",
        long = "parallel-max",
        help = "Maximum concurrency for parallel transfers",
    )]
    pub flg_parallel_max: bool,
    #[structopt(
        name = "pass",
        long = "pass",
        help = "Pass phrase for the private key",
    )]
    pub opt_pass: Option<String>,
    #[structopt(
        name = "path-as-is",
        long = "path-as-is",
        help = "Do not squash .. sequences in URL path",
    )]
    pub flg_path_as_is: bool,
    #[structopt(
        name = "pinnedpubkey",
        long = "pinnedpubkey",
        help = "FILE/HASHES Public key to verify peer against",
    )]
    pub opt_pinnedpubkey: Option<String>,
    #[structopt(
        name = "post301",
        long = "post301",
        help = "Do not switch to GET after following a 301",
    )]
    pub flg_post301: bool,
    #[structopt(
        name = "post302",
        long = "post302",
        help = "Do not switch to GET after following a 302",
    )]
    pub flg_post302: bool,
    #[structopt(
        name = "post303",
        long = "post303",
        help = "Do not switch to GET after following a 303",
    )]
    pub flg_post303: bool,
    #[structopt(
        name = "preproxy",
        long = "preproxy",
        help = "Use this proxy first",
    )]
    pub opt_preproxy: Option<String>,
    #[structopt(
        name = "progress-bar",
        short = "#",
        long = "progress-bar",
        help = "Display transfer progress as a bar",
    )]
    pub flg_progress_bar: bool,
    #[structopt(
        name = "proto",
        long = "proto",
        help = "Enable/disable PROTOCOLS",
    )]
    pub opt_proto: Option<String>,
    #[structopt(
        name = "proto-default",
        long = "proto-default",
        help = "Use PROTOCOL for any URL missing a scheme",
    )]
    pub opt_proto_default: Option<String>,
    #[structopt(
        name = "proto-redir",
        long = "proto-redir",
        help = "Enable/disable PROTOCOLS on redirect",
    )]
    pub opt_proto_redir: Option<String>,
    #[structopt(
        name = "proxy",
        short = "x",
        long = "proxy",
        help = "Use this proxy",
    )]
    pub opt_proxy: Option<String>,
    #[structopt(
        name = "proxy-anyauth",
        long = "proxy-anyauth",
        help = "Pick any proxy authentication method",
    )]
    pub flg_proxy_anyauth: bool,
    #[structopt(
        name = "proxy-basic",
        long = "proxy-basic",
        help = "Use Basic authentication on the proxy",
    )]
    pub flg_proxy_basic: bool,
    #[structopt(
        name = "proxy-cacert",
        long = "proxy-cacert",
        help = "CA certificate to verify peer against for proxy",
    )]
    pub opt_proxy_cacert: Option<String>,
    #[structopt(
        name = "proxy-capath",
        long = "proxy-capath",
        help = "CA directory to verify peer against for proxy",
    )]
    pub opt_proxy_capath: Option<String>,
    #[structopt(
        name = "proxy-cert",
        long = "proxy-cert",
        help = "Set client certificate for proxy",
    )]
    pub opt_proxy_cert: Option<String>,
    #[structopt(
        name = "proxy-cert-type",
        long = "proxy-cert-type",
        help = "Client certificate type for HTTPS proxy",
    )]
    pub opt_proxy_cert_type: Option<String>,
    #[structopt(
        name = "proxy-ciphers",
        long = "proxy-ciphers",
        help = "SSL ciphers to use for proxy",
    )]
    pub opt_proxy_ciphers: Option<String>,
    #[structopt(
        name = "proxy-crlfile",
        long = "proxy-crlfile",
        help = "Set a CRL list for proxy",
    )]
    pub opt_proxy_crlfile: Option<String>,
    #[structopt(
        name = "proxy-digest",
        long = "proxy-digest",
        help = "Use Digest authentication on the proxy",
    )]
    pub flg_proxy_digest: bool,
    #[structopt(
        name = "proxy-header",
        long = "proxy-header",
        help = "Pass custom header(s) to proxy",
    )]
    pub opt_proxy_header: Option<String>,
    #[structopt(
        name = "proxy-insecure",
        long = "proxy-insecure",
        help = "Do HTTPS proxy connections without verifying the proxy",
    )]
    pub flg_proxy_insecure: bool,
    #[structopt(
        name = "proxy-key",
        long = "proxy-key",
        help = "Private key for HTTPS proxy",
    )]
    pub opt_proxy_key: Option<String>,
    #[structopt(
        name = "proxy-key-type",
        long = "proxy-key-type",
        help = "Private key file type for proxy",
    )]
    pub opt_proxy_key_type: Option<String>,
    #[structopt(
        name = "proxy-negotiate",
        long = "proxy-negotiate",
        help = "Use HTTP Negotiate (SPNEGO) authentication on the proxy",
    )]
    pub flg_proxy_negotiate: bool,
    #[structopt(
        name = "proxy-ntlm",
        long = "proxy-ntlm",
        help = "Use NTLM authentication on the proxy",
    )]
    pub flg_proxy_ntlm: bool,
    #[structopt(
        name = "proxy-pass",
        long = "proxy-pass",
        help = "Pass phrase for the private key for HTTPS proxy",
    )]
    pub opt_proxy_pass: Option<String>,
    #[structopt(
        name = "proxy-pinnedpubkey",
        long = "proxy-pinnedpubkey",
        help = "FILE/HASHES public key to verify proxy with",
    )]
    pub opt_proxy_pinnedpubkey: Option<String>,
    #[structopt(
        name = "proxy-service-name",
        long = "proxy-service-name",
        help = "SPNEGO proxy service name",
    )]
    pub opt_proxy_service_name: Option<String>,
    #[structopt(
        name = "proxy-ssl-allow-beast",
        long = "proxy-ssl-allow-beast",
        help = "Allow security flaw for interop for HTTPS proxy",
    )]
    pub flg_proxy_ssl_allow_beast: bool,
    #[structopt(
        name = "proxy-tls13-ciphers",
        long = "proxy-tls13-ciphers",
        help = "TLS 1.3 ciphersuites for proxy (OpenSSL)",
    )]
    pub opt_proxy_tls13_ciphers: Option<String>,
    #[structopt(
        name = "proxy-tlsauthtype",
        long = "proxy-tlsauthtype",
        help = "TLS authentication type for HTTPS proxy",
    )]
    pub opt_proxy_tlsauthtype: Option<String>,
    #[structopt(
        name = "proxy-tlspassword",
        long = "proxy-tlspassword",
        help = "TLS password for HTTPS proxy",
    )]
    pub opt_proxy_tlspassword: Option<String>,
    #[structopt(
        name = "proxy-tlsuser",
        long = "proxy-tlsuser",
        help = "TLS username for HTTPS proxy",
    )]
    pub opt_proxy_tlsuser: Option<String>,
    #[structopt(
        name = "proxy-tlsv1",
        long = "proxy-tlsv1",
        help = "Use TLSv1 for HTTPS proxy",
    )]
    pub flg_proxy_tlsv1: bool,
    #[structopt(
        name = "proxy-user",
        short = "U",
        long = "proxy-user",
        help = "Proxy user and password",
    )]
    pub opt_proxy_user: Option<String>,
    #[structopt(
        name = "proxy1.0",
        long = "proxy1.0",
        help = "Use HTTP/1.0 proxy on given port",
    )]
    pub opt_proxy1_0: Option<String>,
    #[structopt(
        name = "proxytunnel",
        short = "p",
        long = "proxytunnel",
        help = "Operate through an HTTP proxy tunnel (using CONNECT)",
    )]
    pub flg_proxytunnel: bool,
    #[structopt(
        name = "pubkey",
        long = "pubkey",
        help = "SSH Public key file name",
    )]
    pub opt_pubkey: Option<String>,
    #[structopt(
        name = "quote",
        short = "Q",
        long = "quote",
        help = "Send command(s) to server before transfer",
    )]
    pub flg_quote: bool,
    #[structopt(
        name = "random-file",
        long = "random-file",
        help = "File for reading random data from",
    )]
    pub opt_random_file: Option<String>,
    #[structopt(
        name = "range",
        short = "r",
        long = "range",
        help = "Retrieve only the bytes within RANGE",
    )]
    pub opt_range: Option<String>,
    #[structopt(
        name = "raw",
        long = "raw",
        help = "Do HTTP 'raw'; no transfer decoding",
    )]
    pub flg_raw: bool,
    #[structopt(
        name = "referer",
        short = "e",
        long = "referer",
        help = "Referrer URL",
    )]
    pub opt_referer: Option<String>,
    #[structopt(
        name = "remote-header-name",
        short = "J",
        long = "remote-header-name",
        help = "Use the header-provided filename",
    )]
    pub flg_remote_header_name: bool,
    #[structopt(
        name = "remote-name",
        short = "O",
        long = "remote-name",
        help = "Write output to a file named as the remote file",
    )]
    pub flg_remote_name: bool,
    #[structopt(
        name = "remote-name-all",
        long = "remote-name-all",
        help = "Use the remote file name for all URLs",
    )]
    pub flg_remote_name_all: bool,
    #[structopt(
        name = "remote-time",
        short = "R",
        long = "remote-time",
        help = "Set the remote file's time on the local output",
    )]
    pub flg_remote_time: bool,
    #[structopt(
        name = "request",
        short = "X",
        long = "request",
        help = "Specify request command to use",
    )]
    pub opt_request: Option<String>,
    #[structopt(
        name = "request-target",
        long = "request-target",
        help = "Specify the target for this request",
    )]
    pub flg_request_target: bool,
    #[structopt(
        name = "resolve",
        long = "resolve",
        help = "Resolve the host+port to this address",
    )]
    pub opt_resolve: Option<String>,
    #[structopt(
        name = "retry",
        long = "retry",
        help = "Retry request if transient problems occur",
    )]
    pub opt_retry: Option<u32>,
    #[structopt(
        name = "retry-connrefused",
        long = "retry-connrefused",
        help = "Retry on connection refused (use with --retry)",
    )]
    pub flg_retry_connrefused: bool,
    #[structopt(
        name = "retry-delay",
        long = "retry-delay",
        help = "Wait time between retries",
    )]
    pub opt_retry_delay: Option<u32>,
    #[structopt(
        name = "retry-max-time",
        long = "retry-max-time",
        help = "Retry only within this period",
    )]
    pub opt_retry_max_time: Option<u32>,
    #[structopt(
        name = "sasl-authzid",
        long = "sasl-authzid",
        help = "Use this identity to act as during SASL PLAIN authentication",
    )]
    pub opt_sasl_authzid: Option<String>,
    #[structopt(
        name = "sasl-ir",
        long = "sasl-ir",
        help = "Enable initial response in SASL authentication",
    )]
    pub flg_sasl_ir: bool,
    #[structopt(
        name = "service-name",
        long = "service-name",
        help = "SPNEGO service name",
    )]
    pub opt_service_name: Option<String>,
    #[structopt(
        name = "show-error",
        short = "S",
        long = "show-error",
        help = "Show error even when -s is used",
    )]
    pub flg_show_error: bool,
    #[structopt(
        name = "silent",
        short = "s",
        long = "silent",
        help = "Silent mode",
    )]
    pub flg_silent: bool,
    #[structopt(
        name = "socks4",
        long = "socks4",
        help = "SOCKS4 proxy on given host + port",
    )]
    pub opt_socks4: Option<String>,
    #[structopt(
        name = "socks4a",
        long = "socks4a",
        help = "SOCKS4a proxy on given host + port",
    )]
    pub opt_socks4a: Option<String>,
    #[structopt(
        name = "socks5",
        long = "socks5",
        help = "SOCKS5 proxy on given host + port",
    )]
    pub opt_socks5: Option<String>,
    #[structopt(
        name = "socks5-basic",
        long = "socks5-basic",
        help = "Enable username/password auth for SOCKS5 proxies",
    )]
    pub flg_socks5_basic: bool,
    #[structopt(
        name = "socks5-gssapi",
        long = "socks5-gssapi",
        help = "Enable GSS-API auth for SOCKS5 proxies",
    )]
    pub flg_socks5_gssapi: bool,
    #[structopt(
        name = "socks5-gssapi-nec",
        long = "socks5-gssapi-nec",
        help = "Compatibility with NEC SOCKS5 server",
    )]
    pub flg_socks5_gssapi_nec: bool,
    #[structopt(
        name = "socks5-gssapi-service",
        long = "socks5-gssapi-service",
        help = "SOCKS5 proxy service name for GSS-API",
    )]
    pub opt_socks5_gssapi_service: Option<String>,
    #[structopt(
        name = "socks5-hostname",
        long = "socks5-hostname",
        help = "SOCKS5 proxy  pass host name to proxy",
    )]
    pub opt_socks5_hostname: Option<String>,
    #[structopt(
        name = "speed-limit",
        short = "Y",
        long = "speed-limit",
        help = "Stop transfers slower than this",
    )]
    pub opt_speed_limit: Option<u64>,
    #[structopt(
        name = "speed-time",
        short = "y",
        long = "speed-time",
        help = "Trigger 'speed-limit' abort after this time",
    )]
    pub opt_speed_time: Option<u32>,
    #[structopt(
        name = "ssl",
        long = "ssl",
        help = "Try SSL/TLS",
    )]
    pub flg_ssl: bool,
    #[structopt(
        name = "ssl-allow-beast",
        long = "ssl-allow-beast",
        help = "Allow security flaw to improve interop",
    )]
    pub flg_ssl_allow_beast: bool,
    #[structopt(
        name = "ssl-no-revoke",
        long = "ssl-no-revoke",
        help = "Disable cert revocation checks (Schannel)",
    )]
    pub flg_ssl_no_revoke: bool,
    #[structopt(
        name = "ssl-reqd",
        long = "ssl-reqd",
        help = "Require SSL/TLS",
    )]
    pub flg_ssl_reqd: bool,
    #[structopt(
        name = "sslv2",
        short = "2",
        long = "sslv2",
        help = "Use SSLv2",
    )]
    pub flg_sslv2: bool,
    #[structopt(
        name = "sslv3",
        short = "3",
        long = "sslv3",
        help = "Use SSLv3",
    )]
    pub flg_sslv3: bool,
    #[structopt(
        name = "stderr",
        long = "stderr",
        help = "Where to redirect stderr",
    )]
    pub flg_stderr: bool,
    #[structopt(
        name = "styled-output",
        long = "styled-output",
        help = "Enable styled output for HTTP headers",
    )]
    pub flg_styled_output: bool,
    #[structopt(
        name = "suppress-connect-headers",
        long = "suppress-connect-headers",
        help = "Suppress proxy CONNECT response headers",
    )]
    pub flg_suppress_connect_headers: bool,
    #[structopt(
        name = "tcp-fastopen",
        long = "tcp-fastopen",
        help = "Use TCP Fast Open",
    )]
    pub flg_tcp_fastopen: bool,
    #[structopt(
        name = "tcp-nodelay",
        long = "tcp-nodelay",
        help = "Use the TCP_NODELAY option",
    )]
    pub flg_tcp_nodelay: bool,
    #[structopt(
        name = "telnet-option",
        short = "t",
        long = "telnet-option",
        help = "Set telnet option",
    )]
    pub opt_telnet_option: Option<String>,
    #[structopt(
        name = "tftp-blksize",
        long = "tftp-blksize",
        help = "Set TFTP BLKSIZE option",
    )]
    pub opt_tftp_blksize: Option<u32>,
    #[structopt(
        name = "tftp-no-options",
        long = "tftp-no-options",
        help = "Do not send any TFTP options",
    )]
    pub flg_tftp_no_options: bool,
    #[structopt(
        name = "time-cond",
        short = "z",
        long = "time-cond",
        help = "Transfer based on a time condition",
    )]
    pub opt_time_cond: Option<String>,
    #[structopt(
        name = "tls-max",
        long = "tls-max",
        help = "Set maximum allowed TLS version",
    )]
    pub opt_tls_max: Option<String>,
    #[structopt(
        name = "tls13-ciphers",
        long = "tls13-ciphers",
        help = "TLS 1.3 ciphersuites (OpenSSL)",
    )]
    pub opt_tls13_ciphers: Option<String>,
    #[structopt(
        name = "tlsauthtype",
        long = "tlsauthtype",
        help = "TLS authentication type",
    )]
    pub opt_tlsauthtype: Option<String>,
    #[structopt(
        name = "tlspassword",
        long = "tlspassword",
        help = "TLS password",
    )]
    pub flg_tlspassword: bool,
    #[structopt(
        name = "tlsuser",
        long = "tlsuser",
        help = "TLS user name",
    )]
    pub opt_tlsuser: Option<String>,
    #[structopt(
        name = "tlsv1",
        short = "1",
        long = "tlsv1",
        help = "Use TLSv1.0 or greater",
    )]
    pub flg_tlsv1: bool,
    #[structopt(
        name = "tlsv1.0",
        long = "tlsv1.0",
        help = "Use TLSv1.0 or greater",
    )]
    pub flg_tlsv1_0: bool,
    #[structopt(
        name = "tlsv1.1",
        long = "tlsv1.1",
        help = "Use TLSv1.1 or greater",
    )]
    pub flg_tlsv1_1: bool,
    #[structopt(
        name = "tlsv1.2",
        long = "tlsv1.2",
        help = "Use TLSv1.2 or greater",
    )]
    pub flg_tlsv1_2: bool,
    #[structopt(
        name = "tlsv1.3",
        long = "tlsv1.3",
        help = "Use TLSv1.3 or greater",
    )]
    pub flg_tlsv1_3: bool,
    #[structopt(
        name = "tr-encoding",
        long = "tr-encoding",
        help = "Request compressed transfer encoding",
    )]
    pub flg_tr_encoding: bool,
    #[structopt(
        name = "trace",
        long = "trace",
        help = "Write a debug trace to FILE",
    )]
    pub opt_trace: Option<String>,
    #[structopt(
        name = "trace-ascii",
        long = "trace-ascii",
        help = "Like --trace  but without hex output",
    )]
    pub opt_trace_ascii: Option<String>,
    #[structopt(
        name = "trace-time",
        long = "trace-time",
        help = "Add time stamps to trace/verbose output",
    )]
    pub flg_trace_time: bool,
    #[structopt(
        name = "unix-socket",
        long = "unix-socket",
        help = "Connect through this Unix domain socket",
    )]
    pub opt_unix_socket: Option<String>,
    #[structopt(
        name = "upload-file",
        short = "T",
        long = "upload-file",
        help = "Transfer local FILE to destination",
    )]
    pub opt_upload_file: Option<String>,
    #[structopt(
        name = "url",
        long = "url",
        help = "URL to work with",
    )]
    pub opt_url: Option<String>,
    #[structopt(
        name = "use-ascii",
        short = "B",
        long = "use-ascii",
        help = "Use ASCII/text transfer",
    )]
    pub flg_use_ascii: bool,
    #[structopt(
        name = "user",
        short = "u",
        long = "user",
        help = "Server user and password",
    )]
    pub opt_user: Option<String>,
    #[structopt(
        name = "user-agent",
        short = "A",
        long = "user-agent",
        help = "Send User-Agent <name> to server",
    )]
    pub opt_user_agent: Option<String>,
    #[structopt(
        name = "verbose",
        short = "v",
        long = "verbose",
        help = "Make the operation more talkative",
    )]
    pub flg_verbose: bool,
    #[structopt(
        name = "write-out",
        short = "w",
        long = "write-out",
        help = "Use output FORMAT after completion",
    )]
    pub opt_write_out: Option<String>,
    #[structopt(
        name = "xattr",
        long = "xattr",
        help = "Store metadata in extended file attributes",
    )]
    pub flg_xattr: bool,

    #[structopt(name = "URL", help = "url")]
    arg_input: String,
}
